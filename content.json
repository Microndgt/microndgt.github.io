{"posts":[{"title":"2022年国庆","text":"今年国庆下了一周雨，也没有出去逛 宅家做饭给宝宝们（媳妇和娃🤗）补充营养 10.5日去医院做建档和产检，抽了媳妇十一管血，完了之后还得做尿检等其他检查，真是太辛苦了，我看着都心疼。 国庆虽然没能像以往出去来个长途旅行，但是宅家的日子也过的美妙而幸福。 期待宝宝出生的那一天，还有193天。","link":"/2022/10/07/2022%E5%B9%B4%E5%9B%BD%E5%BA%86/"},{"title":"Casdoor 部署问题","text":"后端运行时 timeout运行go run main.go，时候报 get 包 timeout，应该是代理问题，解决办法就是：go env -w GOPROXY=https://goproxy.cn,direct 如下： 12345678duguangting@c123:~/casdoor$ go get github.com/RobotsAndPencils/go-saml@v0.0.0-20170520135329-fb13cb52a46bgo: github.com/RobotsAndPencils/go-saml@v0.0.0-20170520135329-fb13cb52a46b: Get &quot;https://proxy.golang.org/github.com/%21robots%21and%21pencils/go-saml/@v/v0.0.0-20170520135329-fb13cb52a46b.mod&quot;: dial tcp 172.217.163.49:443: i/o timeoutduguangting@c123:~/casdoor$ go env -w GOPROXY=https://goproxy.cn,directduguangting@c123:~/casdoor$ go get github.com/RobotsAndPencils/go-saml@v0.0.0-20170520135329-fb13cb52a46bgo: downloading github.com/RobotsAndPencils/go-saml v0.0.0-20170520135329-fb13cb52a46bgo: downloading github.com/nu7hatch/gouuid v0.0.0-20131221200532-179d4d0c4d8dgo: downloading github.com/kardianos/osext v0.0.0-20190222173326-2bc1f35cddc0 前端运行报错后端跑通之后，前端运行yarn install的时候报： The engine &quot;node&quot; is incompatible with this module 解决办法： yarn install --ignore-engines Goland 方法没法跳转在Goland里所有引入的外部包无法跳转，搜了一下，大概这样： step 1 在 Goland 的 go modules 设置勾选，然后设置 GOPROXY step2 然后因为项目已经有 go.mod 文件了，那么直接执行 go mod tidy，这个命令的作用就是：add missing and remove unused modules 然后就 OK 了","link":"/2022/09/21/Casdoor-%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"},{"title":"Casdoor的权限检查","text":"Casdoor 的权限检查机制是基于 Casbin 的，参考文档： Permission Overview Syntax for Models 简要介绍所有在同一个组织的用户可以访问该组织下的所有应用，但是有时候需要做一些限制，这里就要用到 权限(permission) 了。 那么 权限(permission) 的作用就是用于控制 用户 能否对 应用 进行某些 操作 最简单的方式就是在 权限(permission) 配置页面新建一个权限，如下图所示： 作为三个要素，用户，应用和操作，在这里是需要配置的： 包含用户 资源 动作 意义也比较简单，就是哪些 用户 可以对哪些 应用 进行哪些 操作 包含角色 也容易理解，一个角色对应多个人，所以这里就是用来控制一组人的。 那上面的模型是什么意思呢，Casdoor 是如何根据这个配置进行权限校验的呢？ ACL 权限控制模型ACL 权限控制模型应该很熟悉了吧，Linux 上就在使用，这里就不再赘述，参考： Access-control list Access Control List (ACL) Casbin 的权限控制Casbin 是一个开源的权限控制库，它支持了多种权限控制模型 Casbin 实施权限规则比较简单，管理员需要列出 主体(subject)，对象(object) 和期望允许的 操作(action) 即可： subject，主体，比如用户 object，对象，需要被权限控制的对象 action，动作，read，write，delete或者其他定义的动作（操作） 管理员需要定义 模型(model) 文件来确定校验条件，Casbin 提供了一个 执行器(Enforcer) 来根据规则定义和模型文件来校验请求。 也就是说 Casbin 权限校验需要三个部分：模型(Model), 校验规则(Policy)和执行器(Enforcer)。 执行器是 Casbin 自带的，可以不必特别关注，只需要知道这件事情就行。下来着重研究模型和校验规则。 哦，对了进行权限校验还需要一个 请求(request) 模型定义Casbin 里的权限控制模型被抽象成了一个 CONF 文件，基于 PERM metamodel (Policy, Effect, Request, Matchers)，这个 PERM metamodel 基于 4 个部分 Policy, Effect, Request, Matchers，其描述了 资源 和 用户 之间的关系。 Casbin 里最简单的一个模型，也是默认模型： 1234567891011[request_definition]r = sub, obj, act[policy_definition]p = permission, sub, obj, act[policy_effect]e = some(where (p.eft == allow))[matchers]m = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act Requestr = sub, obj, act 定义了请求参数，也就是说请求需要三个部分，subject，object 和 action，通俗点讲就是 访问的用户，访问的对象，访问的方法。 这里其实定义了我们应该提供给权限控制匹配函数的参数名和顺序。 Policyp = permission, sub, obj, act 定义了模型的访问策略，其实是定义了在策略规则文档中字段名和顺序 这里还有一种定义：p={sub, obj, act, eft} eft是可以被省略的，eft代表的是策略的结果，比如就是 allow 或者是 deny，如果没有定义的话，读取策略文件的时候就会被忽略，默认会返回 allow Matcherm = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act 请求和策略的匹配规则，这里 r 就是请求(request)，p 就是策略(policy) Effecte = some(where (p.eft == allow)) 就是对策略的结果再次进行条件判断，这里的意思就是只要有一条规则返回的是 allow，那么整个就是 allow 还有这样的定义：e = some(where (p.eft == allow)) &amp;&amp; !some(where (p.eft == deny)) 就是说有一条是 allow 而且 没有 deny 的情况，整个结果是 allow 这里主要是针对多条匹配规则都匹配上的情况做处理的 在 Casdoor 定义权限控制定义模型我们已经了解了模型的定义规则，那么就开始在 Casdoor 上面实际操作一番吧。 模型定义用来针对要控制的 object，访问的 subject 能允许怎样的 action 首先在页面顶部导航栏点击 模型(Model)，点击新增： 模型文本这里就填写上面介绍过的模型定义字符串，点击保存&amp;退出。 定义权限在页面顶部导航栏点击 权限(permission)，点击新增： permission 其实就是具体的控制权限设置，可以针对多个资源进行控制 其实这里的配置界面只是简化了规则的配置，这个页面的权限其实会转换成类似如下的数据： 12p alice data1 readp bob data2 write 代码上 permission 里定义的规则会先转换成 CasbinRule 对象，每一个对象就包含了 Policy 定义的每个字段，之后就会转成如下的字符串： p, built-in/permission-built-in, built-in/app-built-in/admin, app-built-in, read 执行校验模型和权限定义好之后，对应被控制的用户访问被控制的应用时，Casdoor 就会进行加载对应模型和权限进行校验，执行这一工作的叫做 Enforcer 关于 Enforcer 的文档：New a Casbin enforcer 代码分析流程已经分析差不多了，让我们看看代码上是怎么处理的 Casdoor 是在这个函数做权限校验的。用户登陆时候就会调用，当然在任何你想进行权限校验的地方，都可以进行调用。 12345678910111213141516171819202122232425func CheckAccessPermission(userId string, application *Application) (bool, error) { permissions := GetPermissions(application.Organization) allowed := true var err error for _, permission := range permissions { if !permission.IsEnabled || len(permission.Users) == 0 { continue } isHit := false for _, resource := range permission.Resources { if application.Name == resource { isHit = true break } } if isHit { enforcer := getEnforcer(permission) // v2.Enforcer allowed, err = enforcer.Enforce(userId, application.Name, &quot;read&quot;) break } } return allowed, err} 逻辑就是通过 organization 来获取所有的 permission 配置，接下来遍历 permission 中定义的 resource，如果跟当前的应用匹配，那么用这条权限去检查用户是否有对应的权限。 匹配成功之后，调用 getEnforcer 来获取一个执行权限校验的 enforcer。 1234567891011121314151617181920212223242526272829303132333435363738394041func getEnforcer(permission *Permission) *casbin.Enforcer { tableNamePrefix := conf.GetConfigString(&quot;tableNamePrefix&quot;) adapter, err := xormadapter.NewAdapterWithTableName(conf.GetConfigString(&quot;driverName&quot;), conf.GetBeegoConfDataSourceName()+conf.GetConfigString(&quot;dbName&quot;), &quot;permission_rule&quot;, tableNamePrefix, true) if err != nil { panic(err) } modelText := `[request_definition]r = sub, obj, act[policy_definition]p = permission, sub, obj, act[policy_effect]e = some(where (p.eft == allow))[matchers]m = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act` permissionModel := getModel(permission.Owner, permission.Model) if permissionModel != nil { modelText = permissionModel.ModelText } m, err := model.NewModelFromString(modelText) if err != nil { panic(err) } enforcer, err := casbin.NewEnforcer(m, adapter) if err != nil { panic(err) } err = enforcer.LoadFilteredPolicy(xormadapter.Filter{V0: []string{permission.GetId()}}) if err != nil { panic(err) } return enforcer} getEnforcer 做的工作就是根据 权限(permission) 数据去看有没有定义好的model，有的话使用定义好的模型文本来加载 enforcer，否则使用默认的模型文本： 1234567891011[request_definition]r = sub, obj, act[policy_definition]p = permission, sub, obj, act[policy_effect]e = some(where (p.eft == allow))[matchers]m = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act 加载模型文本之后，enforcer 就会加载对应 权限(permission) 所对应定义的规则，对应 LoadFilteredPolicy 函数。 这些数据加载完成之后，enforcer 会根据传入的 subject，entity，action，即 用户，应用，操作，来检查权限是否允许 allowed, err = enforcer.Enforce(userId, application.Name, &quot;read&quot;) 总结总结一下，主要有以下核心： 理解 Casdoor 的权限是做什么的 理解 模型(Model) 以及 模型文本 是如何定义的 理解 模型，权限是如何配置的，以及是如何对用户，应用进行控制的 理解代码上是如何调用的，可以扩展到其他需要进行权限校验的地方 注意在代码上新建或者编辑权限(permission) 之后，记得要重新生成一下规则(policy)，因为不论在界面上是怎样的表现形式，最后都是enforcer通过model text和policy来检查request的 代码如下： 12345678910// 更新permission之后需要调用if affected != 0 { removePolicies(oldPermission) addPolicies(permission)}// 新建permission之后需要调用if affected != 0 { addPolicies(permission)}","link":"/2022/09/30/Casdoor%E7%9A%84%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/"},{"title":"FIRE基金策略调整","text":"最近FIRE基金刷新了从2022年2月以来的最大回撤，目前为止为6.18%。 究其原因，并不是操作的问题，而是系统性原因，8月和9月市场行情不太行，导致每次上车都是白给，而中秋节后更是如此，在节后第一天上证50，深红利，银行等诸多标的提示买入信号，最后竟然买入到了满仓，其实那时候觉得应该也会继续上涨，没想到后面连续4天回撤了快3%！ 从9月份系统回测图可以看出来，确实有巨大的回撤。 但是我的目标是最小回撤，稳定复利，高达6%的回撤可是不能接受的，而且这个回撤还不一定会结束 orz… 但是我发现回撤的品种全是之前定位打野的品种，然后我依稀记得之前得出过一个结论，打野基本上不赚钱，赚了亏，亏了赚，对净值只会起波动作用，而不是起增长作用。于是我便去掉打野标的进行了回撤，从2021年3月1日开始： 我惊呆了，标准的上楼梯曲线，一直保持东北角的上升曲线，几乎没有回撤，这不就是我追求的完美资金曲线嘛！17个月的时间，快60%的收益率，一年大概40%的收益率。 再对比下有打野标的的曲线（从2021年12月1日开始） 而对应的2021年12月1日开始的去除打野标的的曲线 两相对比，含打野的在总收益率上略胜一筹，其实也差不多，但是不含打野的避免了大的回撤，减少了波动。最重要的是，省心省力，诸多打野来回操作也挺消耗精力，一直持仓总会不可避免的关注股市。 所以我决定，++以后FIRE基金的策略调整为不做打野标的，只做满仓标的。++ 其实可以想到，如果满仓标的有回撤，那么不论采用哪种都会有回撤，而根据打野的历史经验，打野基本不赚钱，那何必劳心费神呢。 现在基金只有20%的仓位，持仓有两个打野标的，这两个又是买入后就跌，目前亏损幅度还不小，= =!。下来就是等创业板转强，梭哈就完事了。","link":"/2022/09/17/FIRE%E5%9F%BA%E9%87%91%E7%AD%96%E7%95%A5%E8%B0%83%E6%95%B4/"},{"title":"Get新技能——换锁芯","text":"租了个新房子，这个房子之前住的人比较杂，所以需要换一个锁芯。 看了个视频觉得挺简单的，但是实际拆了之后出现了一些问题，因为不是很了解，所以小心翼翼的，现在想来也挺简单的。 首先是用螺丝刀将门锁内侧的两个螺丝拧开，把内侧把手拆掉，然后把门外侧把手拆掉。我这里内侧很好拆，但是外侧不好弄，刚开始以为有什么玄机，后来发现还是要大力出奇迹，来回扭一扭就拆掉了。其实外侧把手相当于一个螺母，内侧把手穿了一个螺丝，通过这种方式连接到一起了。 接下来是把门锁中间固定锁芯的螺丝拆掉，拆掉之后有的锁芯可以直接拔下来，我这边拔不掉，当时我就卡在这里了，后来在网上搜了一下说是插入钥匙拧一下，拧到合适的角度就能拔下来了。拔下来之后才发现，锁芯中间有个小塑料环，拧到一定角度才能和锁芯主体平齐，这样才能拔出来。 锁芯拔出来之后，量一下中间螺丝孔到锁芯两边的距离，然后网上下单，完了把旧锁芯再装回去。 新锁芯回来，按照上面的步骤把旧锁芯替换为新锁芯，装回去，万事大吉。","link":"/2022/09/15/Get%E6%96%B0%E6%8A%80%E8%83%BD%E2%80%94%E2%80%94%E6%8D%A2%E9%94%81%E8%8A%AF/"},{"title":"Get新技能——接网线","text":"学会新技能总是令人振奋，最近学会了如何给网线压水晶头以及如何将网线接到网线插座上。 基本知识首先一根网线里面有8根线，分别有不同颜色的外皮，如下图 一般来说有两种接线方法，即上图中的T568A和T568B。以前还需要区分这两种线序，其中网线两头都是T568B被称为直通线，用于不同设备的连接，比如电脑和路由器；网线两头一边是T568A接法，一边是T568B接法，这种被称为交叉线接法，常用于相同设备的连接，比如电脑连接电脑。 是不是觉得头大，哪个该接哪个呢，所幸的是现在的设备都已经具备了自动逆转的功能，所以我们只需要全部接一种接法就好了——通通按T568B接法进行连接。 我家的网络环境我家的户型图以及网络规划如下图： 红圈的地方是弱电箱，光猫在这里，然后蓝圈的地方是主路由器，绿圈的地方是网络插座。然后光猫往主路由器有一根网线，主路由器往两个网络插座各有一根网线。 在过道最里面这个网络插座附近将来如果需要会配置一个路由器，和主路由器形成一个mesh，以弥补主卧和卫生间区域网络信号的不足。 现在我需要做的工作就是： 网线和两个网络插座相连 弱电箱处有一根网线需要压水晶头 客厅主路由器处有三根网线需要压水晶头 接网线插座之所以先介绍如何接网线插座，因为网线插座接起来最简单，哈哈。 无论是网络插座已经装到墙上了还是没有，反正想办法把接线端子搞出来，接线端子上有A，B两种标识，然后对应有接线的颜色，我们就按B来接，如图： 接线就是将对应颜色的线压到每个对应端子里，然后用压线刀把线卡到里面，很简单，记得一定要卡严实了，当然也不要太大劲把端子整坏了。 线压好之后，先不要着急往墙上装，因为还有一步：检测线是否接好。 但是要进行检测，那么客厅区域的网线就需要将水晶头压好。 接水晶头重头戏来了，水晶头一开始因为知识掌握不牢固，操作不熟练，直接废了3根水晶头，中途陆续又接废了几个，到最后4根网线竟然用了10个水晶头才接好🤣 好了，废话不多说，开始正题 确认网线规格接水晶头第一步是要确认网线规格，可以粗略分为两类，六类之前和六类之后，为啥分为这两类，因为这两类使用的工具不一样，所以一定要先分清楚网线规格。其中六类之后目前就只有超六类和七类。 网线规格在网线外的包皮上可以找到，我家的是CAT6A，也就是超六类网线，超六类网线和七类网线工具是共用的，那么我就在京东上买了七类网线的压制工具。 压水晶头上二维码，这是一个视频教程： 我就总结下要点： 一定要确认好顺序 先按照橙白，橙色，绿白，蓝色，蓝白，绿色，棕白，棕色整理好线束，然后开始分层处理：橙白，绿白，蓝白，棕白放到下层，从下层穿过束线卡，然后橙色，蓝色，绿色，棕色，从上层穿过束线卡，留好足够的距离，将束线卡另一侧多余的线束剪掉。 注意怼到水晶头里的方向 这里非常重要，我就是没注意这块，弄反了，白给了好几个水晶头。 方向是：花色线束所在的位置靠近水晶头有塑料弹簧片的一侧，纯色线束所在位置靠近水晶头有金属针脚的一侧 怼进去 这里还需要注意，因为超六类和七类网线都比较粗，所以需要先把后面网线压扁，这样好怼进去。 怼进去，怼到头，这时候从水晶头往里面看，可以清晰看到各线束的金属触点，这样才算OK。 压燕尾夹 用网线钳可以压燕尾夹，但是注意力道，不要把网线压坏了。我就是虽然水晶头接好了，但是用力过猛把网线压坏了，又一次白给。。 好了，到这里水晶头已经接好了，下来就是测试部分。 网络联通测试工具箱里有网络测试仪，因为我需要测试的网线两端距离比较远，所以需要将网络测试仪分开。 然后分别插上网线，打开网络测试仪开关即可。 这里不论你看哪边的测试仪都可以，因为联通是亮灯，不通就不亮，所以只需要看一边即可。 总结好了，到这里就全部结束了。 为啥我要自己接，因为我们工长说电工不会接，请外面人接需要300块，那我一想还不如我在京东上买套工具200块，自己接，还能学会一个新技能，何乐而不为？哈哈。","link":"/2022/11/03/Get%E6%96%B0%E6%8A%80%E8%83%BD%E2%80%94%E2%80%94%E6%8E%A5%E7%BD%91%E7%BA%BF/"},{"title":"2022年5月","text":"时间流逝之快，超出我的想象。之前好像还能稍微抓住它，现在只能任其飘散。越是这样，我心里会越慌，然后越来越麻木，任其流逝，最终回过头来只能懊悔。我不太喜欢这样快节奏的生活，太空虚，整个人似乎只是为了工作，为了钱而活着，其他方面没有可以想象的空间。 我想去乡村生活，有一片自己的土地，可以种想种的东西，蔬菜瓜果，花草树木，养一些小动物，每天起来读书写字，远离焦虑，然后这样慢下来生活。 不扯这些了，说说这个月实际发生的事情 装修首先这个月开始收房装修了，五一假期的时候就把主材订了，差不多20W吧，然后收房补的面积差价，交的大修基金下来就有快3W了。收房之后等了一个周开始办装修手续，办装修手续又办了一个周，这物业实在是太差劲了，好不容易到5月29日才开工。 开工先搞的事情就是铲素灰，铲保温墙，砸墙，我们改了户型设计，将两个卫生间合并成一个卫生间了，所以砸了不少墙，砸墙就花了1600。这第一步铲砸和运垃圾一共花了4700。 5月整个在装修上做的事情就只有这些了，效率实在是太低了。截至今天，6月1日完成了新风和空调的安装，6月3日开始砌墙，这个砌墙其实就是改卫生间那块的设计，墙砸了还要按设计重新砌一下，估计就到6月4日完工，下来就是水电改造工程。 装修太花钱了，让人感觉就是一个千疮百孔的容器，里面的水（水就好比你的资金）止不住的流，但是你往进加水的速度又太慢了。而且本来以为装修仅仅是花钱的事情，没想到里面要操心的事情太多了，比如地暖会不会漏水，天花板上的下水管道会不会漏水，空调新风打的孔会不会有问题，这些都是之前没有遇到过的问题，心里容易慌。搞的现在花钱都是小问题了，只要顺利完成装修才是我现在心里着重希望的事情。 投资股市方面，本月收益率5%，主要还是两次创业板上车的盈利，其他打野标的也就是赚了亏，亏了赚，对收益率没有啥贡献，主要还是创业板。红利其实也有所表现，只不过当时上的仓位比较少，盈利不多，收益率的话也有2%。现在交易已经省心省力了，我的交易系统已经逐渐稳定成型了。 在市场里持续赚钱，就得去重复那些让自己能赚钱的事儿，避免那些让自己亏钱的事儿和运气主导的事儿。所以得总结，做对的事儿继续做，犯过的错不再犯，业绩就会逐渐提高。我觉得现在就已经走在这条正确的路上了。 现在有一个问题，就是按照交易系统操作，其实会漏掉一部分收益，因为现在的原则就是有收益就止盈，像5月30日到6月2日的这波创业板行情，我是5月30日上车的，5月31日上涨2%，这天的收益全部满仓吃上，然后6月1日挂止盈单清仓，但是6月1日又上涨了快1%，6月2日上涨了2.5%，相当于我少吃了至少3%的收益。 现在似乎确实没有什么解决办法，因为你并不知道一波趋势来了之后，会持续多久。像从2021年12月到现在的创业板走势，大多时候一波趋势也就两三天，我的系统就能完美处理这种情况。再从另外一个角度来看，我现在定的每个月收益率目标是5%，那只要达到我的目标，哪怕少挣点，其实没什么问题，毕竟你不可能把市场的收益吃干榨净。我觉得只要能够实现稳定盈利，慢慢积累就够了，人要是贪婪起来就没完没了了。 另外我除了创业板还会做红利，还有其他标的啊，在创业板转弱的时候，还能继续在红利上取得收益，综合来看其实比创业板的收益差不了多少。所以这个问题其实并不是问题，之所以这个会成为问题，还是人性贪婪。 将来的生活计划6-7月要娃，现在时间一步步接近，但是总是觉得忧心忡忡，比较担心将来有娃之后的生活怎么应对，谁来带娃？ 目前来说最佳方案就是我在家办公，然后请一个保姆仅工作日白天来做饭看娃，这样应该是最好的方案。但是找到一个在家办公的工作确实不易，也不知道我们公司能不能给我搞个特殊。此乃上上策。 如果不能搞特殊，那要么就是我去找个远程的工作，难度比较大。此乃中策。 要么就是我不工作了，我自己看娃，省一个保姆的钱，然后自己靠股市生存，这是下下策。因为没有工作的话，自己的交易心态就会有比较大的影响，具体有多大，没经历过，也不知道。 这仅仅是谁来带娃的问题，其他小问题我想肯定只会多不会少。现在压力真的很大，工作压力：各种被优化，被毕业，工作上还各种卷，上班一天已经筋疲力尽了。经济压力：房租房贷装修，三座大山，我现在房贷+房租一个月1W+。生活压力：很多琐碎的事情你也要去应付，因为没有人帮你做。 这样的情境下，既没心情，没时间消费，也没能力消费。一天天的发消费券，有个P用，能不能直接发钱，让我先把房贷还一下。","link":"/2022/06/03/2022%E5%B9%B45%E6%9C%88/"},{"title":"2022年4月","text":"之前的趋势梭哈系统每月总结决定不再更新了，其一是现在投资策略基本已成，变动不大，也不太需要专门记录了，其二是想在每月总结中加一点其他的内容，比如本月发生的事情，自己的思考等。所以就直接改成每月总结得了。 那首先还是记录一下投资方面的事情，本月收益率5.3%。四月行情非常差，但是没想到四月份是收益最高的一个月 果然危机，危中有机，收益主要来自4月的最后几天，真是柳暗花明又一村。 关于投资策略的一些思考，现在我觉得似乎可以考虑开始建一些长期仓位，但是也只能是非常小的仓位，因为我对当前世界经济形势还是有非常强的担忧的，毕竟现在没有破局之法，除非全球各国之间进行合作，但是这非常难。全球经济大国，中国和美国现在这种基本对立的情况，问题是没法解决的。所以保持长期仓位这个还是得慎之又慎，再继续看看吧，不着急，按照策略的短期操作在2月，3月，4月都取得了3+%的收益率，所以完全不用担心。 4月开始读围城这本书，以前一直在kindle上断断续续的看，一直没有看完，这次是之前凑单买的纸质书，发现看起来非常有感觉，而且感觉很好看。好看的一点原因是我有点浸入到书中的世界了，觉得他们的生活很有意思，估计是因为我自己的生活太乏味了～ 另外一点就是我觉得我挺像方鸿渐的，凡事糊里糊涂没有主见，主要还是内心有点脆弱不够强大，遇到事情第一个想到的可能是逃避。 现在在城市的生活，白天上班，晚上睡觉真的是有点枯燥，然后周末也不知道干啥，百无聊赖，无所事事。五一假期一回到农村，就感觉节奏就慢起来了，似乎大脑神经也放松起来了。说实话，我现在有点想去农村躺平了，种种花，养养动物啥的。一回到城市就感觉神经紧张，各种事情得面对，最近要面对的一个大事情就是装修，真太花钱了，随随便便几十万的花费，为啥一定要在城市高花费低生活质量呢？我现在在这个刚需盘的房子里已经花了200W了，我有这200W去农村生活不好吗？ 工作上，也许是我身体原因吧，反正每天上一天班我眼睛就很不舒服，现在甚至有时候会视野变花，然后等一会才会恢复，眼睛疲惫是常事，表现就是肿胀，酸疼，有时候会痒，飞蚊症越来越明显。去看医生，医生就说少看屏幕，可是现在工作怎么才能少看屏幕呢，之前下班回来还会看会书（电脑上看），或者看会视频，有时候会打游戏，现在晚上回来，一个屏幕都不想看，9点多早早就睡觉了，就这样，每天白天眼睛还依然很难受。我在想，这样的生活质量，我不知道在坚持什么？我真怕啥时候瞎了。 算了，不说这些负能量了，没有意义，抱怨解决不了问题，只有尝试解决才会。","link":"/2022/05/02/2022%E5%B9%B44%E6%9C%88/"},{"title":"Switch铁人三项","text":"Switch铁人三项就是：健身环大冒险，有氧拳击，舞力全开，这三个我都有，聊聊体验吧。 接触Switch就是从健身环大冒险开始的，而这一切又都是从疫情开始的，在疫情之前从来没有想过还会在家里健身，潜意识里都是健身房，而疫情改变了这一切，改变了人的认知。 健身环大冒险因为疫情爆火，而我也在2020年12月开始Switch铁人三项之旅。 首先是健身环大冒险，做的挺不错，也挺科学的，有氧运动+无氧运动结合，搭配闯关剧情，很容易让人坚持下来，也有趣味性。刚开始的时候因为在家办公，所以我经常玩，后来去办公室上班后，每天下班之后就感觉累成狗，基本上工作日晚上就没玩过几次了，基本上都是周末玩一会。 买了健身环大冒险一个多月后，出了舞力全开这款游戏，当时就是为了尝试体验一下，后来发现这个游戏打开的机会屈指可数，主要还是我没有节奏感，不会跳舞，玩这个游戏就是群魔乱舞，基本上毫无体验感和成就感可言。所以一般玩家可以跳过这个游戏，除非喜欢跳舞。 有氧拳击是最近买的一款游戏，主要特点就是专于有氧运动，一天的运动量在40分钟左右，消耗能量300大卡左右，平均心率在130左右，每次练完一身汗，非常舒服。这款游戏从强度来说没有健身环累，主要是健身环有更多的无氧运动，比如有时候持续深蹲，就非常累，而有氧拳击全程有氧运动，心率很均匀，所以不容易疲劳。 跑步也是一项持续的有氧运动，但是跑步这件事情对于大体重的选手来说非常容易损伤膝盖，所以有氧拳击就是一项非常好的替代品。 后面的健身计划： 第一步，继续有氧拳击，争取每天都能玩一次，加强心肺功能，提高基础代谢水平，然后让体重降下来。 第二步，逐渐开始健身环大冒险，适应一下更多的无氧运动，肌肉训练。 第三步，开始逐步恢复囚徒健身，增大肌肉训练。 至于囚徒健身，之前练过一段时间，后来有所懈怠，后面会再写篇文章介绍一下。","link":"/2022/07/30/Switch%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/"},{"title":"Python 里的 random 模块","text":"最近工作上遇到了一个比较有意思的问题：在生成邮箱验证码的时候，居然会出现重复，而且是可复现的重复，后来去另一个环境试了下，发现居然不同环境都会重复！ 这种情况，粗略判断，应该是随机数生成的问题，但是奇怪的是，代码也重置了 seed，这个 seed 也是个随机的： 12345678import randomrandom.seed(time.time() * 1000)def get_capture(length=6): all_letters = string.ascii_uppercase + string.digits return ''.join(random.sample(all_letters, length)) 经过调试，发现不论 seed 设置什么值，生成的随机字符串都是一样的，但是如果把 seed 设置放在函数内，就又都是随机的了。 最开始以为是 seed 设置会有作用域区分，但是经过查看代码，发现 random 居然是在内部生成了一个 Random 类的实例，从外部导入的 random.seed，random.sample 都是在这个实例上调用的 1234567891011121314151617181920212223242526272829# Create one instance, seeded from current time, and export its methods# as module-level functions. The functions share state across all uses#(both in the user's code and in the Python libraries), but that's fine# for most programs and is easier for the casual user than making them# instantiate their own Random() instance._inst = Random()seed = _inst.seedrandom = _inst.randomuniform = _inst.uniformtriangular = _inst.triangularrandint = _inst.randintchoice = _inst.choicerandrange = _inst.randrangesample = _inst.sampleshuffle = _inst.shufflechoices = _inst.choicesnormalvariate = _inst.normalvariatelognormvariate = _inst.lognormvariateexpovariate = _inst.expovariatevonmisesvariate = _inst.vonmisesvariategammavariate = _inst.gammavariategauss = _inst.gaussbetavariate = _inst.betavariateparetovariate = _inst.paretovariateweibullvariate = _inst.weibullvariategetstate = _inst.getstatesetstate = _inst.setstategetrandbits = _inst.getrandbits 那既然不论在全局 seed，还是在函数内 seed，都基于同一个实例，那应该都起作用才对。现在的状态是全局调用 seed 函数，不论传入什么值产生的结果都是一样的。而在函数内调用 seed，如果输入是随机值，那么输出也是随机的，如果输入是个固定的，那么输出也会是固定的随机字符串。 那么这样看来，似乎只有一种可能————有其他地方在这个全局实例上也调用了 seed，于是我把断点打到这个 seed 函数里，然后重启 web，果然发现有很多次调用。 顺藤摸瓜，找到了其他在全局调用 seed 的地方，案子终于破了：其他地方调用 seed 的时机比这个地方迟，而且又都是在一个实例上调用的，那肯定都覆盖了，而且其他地方都是以固定数字调用 seed 的，所以最后产生的随机字符串都是以固定的顺序生成的。 那么如何修改代码呢？ 在调试的时候，除了上面的那些全局调用 seed 的地方，还有一些其他写法，那就是新实例一个 Random 实例，让它和 random 模块里内置的那个默认实例区分开，然后后面调用 random 方法的地方，都基于这个新实例。妙啊！ 那么 random 库使用的最佳实践应该是 在用到 random 的时候，搞一个自己的 Random 实例，这样就分开了。 代码修改如下： 12345678import random_random = random.Random(time.time() * 1000)def get_capture(length=6): all_letters = string.ascii_uppercase + string.digits return ''.join(_random.sample(all_letters, length))","link":"/2022/11/03/Python-%E9%87%8C%E7%9A%84-random-%E6%A8%A1%E5%9D%97/"},{"title":"pip 最佳使用方法","text":"在激活的虚拟环境中使用 pip install 或者 python -m pip install 效果是完全相同的，但是有些场景下就有问题了，而 python -m pip 确保了想要安装的包会和当前解释器是一个环境。 可以设置个别名接着用： 1❯ echo 'alias pip=&quot;python -m pip&quot;' &gt;&gt; ~/.aliasrc","link":"/2022/08/05/pip-%E6%9C%80%E4%BD%B3%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"},{"title":"Using column alias in a WHERE clause doesn&#39;t work","text":"工作中需要写一个 SQL 进行查询，本来我是这样写的： 12345SELECT document.id, (COALESCE(CAST(document.internal_info-&gt;&gt;'proofread_time' AS int), 0) - p500_end.end_utc) / 60 AS proofread_timeFROM document JOIN p500_end ON p500_end.doc_id = document.id WHERE document.created_utc &gt; 1658592000 AND document.deleted = 0 AND proofread_time &gt; 60 ORDER BY id DESC 但是发现报这样的错误： ERROR: column &quot;proofread_time&quot; does not exist 然后我把 WHERE 条件里的 proofread_time 替换成 (COALESCE(CAST(document.internal_info-&gt;&gt;'proofread_time' AS int), 0) - p500_end.end_utc) / 60，就正常了。 咦，好奇怪，难道 alias 不能在 WHERE 条件里用吗，有点反直觉，于是我去查了下文档： An output column’s name can be used to refer to the column’s value in ORDER BY and GROUP BY clauses, but not in the WHERE or HAVING clauses; there you must write out the expression instead. 原因就是 WHERE 语句和 HAVING 语句是在 column aliases 之前做的，所以没法引用，而 ORDER BY 和 GROUP BY 是在其之后，所以可以使用 aliased column 很古怪吧，反直觉！ 但是把这么一长串的表达式写两遍真的很难受，所以我使用了 WITH 表达式来解决这个问题： 12345678WITH results AS ( SELECT document.id, (COALESCE(CAST(document.internal_info-&gt;&gt;'proofread_time' as int), 0) - p500_end.end_utc) / 60 AS proofread_time FROM document JOIN p500_end ON p500_end.doc_id = document.id WHERE document.created_utc &gt; 1658592000 AND document.deleted = 0 ORDER BY id DESC)SELECT id, proofread_time FROM results WHERE proofread_time &gt; 60; 这样看起来就清晰多了。","link":"/2022/10/26/Using-column-alias-in-a-WHERE-clause-doesn-t-work/"},{"title":"Tornado 实现的 WebSocket 简单例子","text":"Server 部分，主要就是继承 WebSocketHandler 实现了个 WebSocket Handler 1234567891011121314151617181920212223242526272829303132333435363738394041import loggingimport tornado.webimport tornado.websocketimport tornado.ioloopimport tornado.optionsfrom tornado.options import define, optionsdefine(&quot;port&quot;, default=3000, help=&quot;run on the given port&quot;, type=int)class Application(tornado.web.Application): def __init__(self): handlers = [(r&quot;/&quot;, MainHandler)] settings = dict(debug=True) tornado.web.Application.__init__(self, handlers, **settings)class MainHandler(tornado.websocket.WebSocketHandler): def check_origin(self, origin): return True def open(self): logging.info(&quot;A client connected.&quot;) def on_close(self): logging.info(&quot;A client disconnected&quot;) def on_message(self, message): logging.info(&quot;message: {}&quot;.format(message))def main(): tornado.options.parse_command_line() app = Application() app.listen(options.port) tornado.ioloop.IOLoop.instance().start()if __name__ == &quot;__main__&quot;: main() Client 部分 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#!/usr/bin/env python# -*- coding: utf-8 -*-from tornado.ioloop import IOLoop, PeriodicCallbackfrom tornado import genfrom tornado.websocket import websocket_connectclass Client(object): def __init__(self, url, timeout): self.url = url self.timeout = timeout self.ioloop = IOLoop.instance() self.ws = None self.connect() PeriodicCallback(self.keep_alive, 20000).start() self.ioloop.start() @gen.coroutine def connect(self): print(&quot;trying to connect&quot;) try: self.ws = yield websocket_connect(self.url) except Exception as e: print(&quot;connection error&quot;) else: print(&quot;connected&quot;) self.run() @gen.coroutine def run(self): while True: msg = yield self.ws.read_message() if msg is None: print(&quot;connection closed&quot;) self.ws = None break def keep_alive(self): if self.ws is None: self.connect() else: self.ws.write_message(&quot;keep alive&quot;)if __name__ == &quot;__main__&quot;: client = Client(&quot;ws://localhost:3000&quot;, 5) 运行 Server 和 Clinet 之后输出如下： Server 部分 12345[I 220805 10:49:12 server:27] A client connected.[I 220805 10:49:32 server:33] message: keep alive[I 220805 10:49:52 server:33] message: keep alive[I 220805 10:50:12 server:33] message: keep alive[I 220805 10:50:13 server:30] A client disconnected Client 部分 12trying to connectconnected","link":"/2022/08/05/Tornado-%E5%AE%9E%E7%8E%B0%E7%9A%84-WebSocket-%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90/"},{"title":"交易系统全标的收益率回测新高了","text":"交易系统全标的收益率回测新高了，目前总收益率27.47%，平均每个月2.6%！ 但是因为我是从2月份开始跟踪的，而且第三季度去玩了会股票，试了试其他策略，导致第三季度收益率-10%，而交易系统第三季度收益率是2%，这一下就差了12%。 哎，不能瞎搞了，管住手，按既定规则交易。 有人说，即使给你一个90%可能能盈利的交易系统，你也不一定能盈利，我深刻的体会到这句话是啥意思了。有人会觉得很简单，但是你实盘操作一下就知道有多困难了： 你自己执行力是否够？ 能够无条件的相信交易系统？特别是有回撤的时候 另外交易系统也需要经历实战检验。没经过实战检验的交易系统，只是理论上的，必须理论联系实际，才知道交易系统的效果。才清楚什么地方需要改进，什么地方需要完善等。只有经过实战的交易系统，才知道是否能持续稳定地获利。 加油吧！稳定复利，最小回撤，做时间的朋友。","link":"/2022/10/14/%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E5%85%A8%E6%A0%87%E7%9A%84%E6%94%B6%E7%9B%8A%E7%8E%87%E5%9B%9E%E6%B5%8B%E6%96%B0%E9%AB%98%E4%BA%86/"},{"title":"人生的松弛感","text":"最近看到这样一条微博，很有意思。 我想大多数人因为证件过期登不了机，都会生气懊恼大崩溃吧，毕竟从小到大，我们都习惯了掌控生活。 任何计划被打乱，没有按照原本的想象进行，我们都会表现出深深的失望和恐慌，整个人活得特别像刺猬，每根刺都竖立着蓄势待发。 与之相反，面对小孩证件过期的这个突发事故，这个家庭没有揪着不放，没有放大这件事情对行程的影响。 他们很从容地应对当下，没有急切，没有压力，非常轻松地接受着这突如其来的变故，放任其发展，好像一切的发生本应如此，没有什么好气愤，好纠缠。 那一家人的那种人生的松弛感，让博主感动到想哭，我想，这是因为它是这个时代所稀缺的状态，怎能不让人羡慕呢？！ 那到底什么是人生的松弛感呢？ 人生的松弛感，就是面对世界的任何变化和不如意，你都完全接受的状态，爱咋样咋样！ 这个世界的真相，就是所有事情都不是你能控制的。 每一次发生在你身上的事情，有时候在你的预期内，有时候出乎你的意料，但本质上，它的发生都有很多的偶然性和随机性，有很多的影响因素是大脑意识感知不到的。 如果你时刻紧张兮兮地面对生活，期待生活按照你所期望的那样在你眼前展开，那你注定要失望，而当你持续地因此而不开心，患得患失智只会让你的人生走下坡路。 相反，那种人生的松弛感，不是摆烂，不是无所谓，而是与世界的变化和解，跟自己的执念和解，不浪费心力与它纠缠，潇洒转身继续轻松地迎接人生的下一站。 所以，你要转变思路，我们来到这个世界，是来玩的，不设预期，不过多地计划，而是随着变化调整自己，用心体验生活，不急不躁地顺着生命之流而下。 拿工作来说，工作重要吗？当然重要，但是更重要的是我自己开心，所以你不用过度在意别人是怎么看你，不用忧心自己能不能升职加薪，不用过度思考自己怎样才能脱颖而出。 你真正要做的，是追求那种人生的松弛感，让自己用一个放松的心态去工作，不用跟别人比较，不用纠缠于当下的不顺，不用计较付出和回报，而是投入到当下真正该做的事情中去。 很神奇的是，当你的心态彻底转变之后，一切开始变得顺利起来，你在工作中更游刃有余，成就感暴增，瞎逼逼的同事也不常出现在你面前，连老板对你也开始赞赏有加，认可度提升。 这些都是我的亲身体验—— 当你松弛了，你就没有太多得失心，也没有太多的焦虑内耗，你所有的能量都集中在你最需要实现的价值上。 人生的松弛感太难得了，它来自于你对自我的认可，对世界的不期待，以及对人生的负责。 底层的逻辑可能就是“爱谁谁，爱咋地咋地，我只要能自洽通透地过好自己的人生就好！” 为了获得人生的松弛感，我有如下建议： 临在当下，专注事情本身 你需要建立“成长型思维”和“体验者思维”。 “成长型思维”让你在面对过去的事情时认识到自己的不足，看到自身改进的契机，进而不断迭代精进自己。 “体验者思维”则让我们面对未来的生活时，不抱期待，不设预期，而是抱有更多的好奇和探索欲，让自己沉浸在那些该做的事情中。 抱持人生松弛感的人，总是能在过去的坏事中看到好的一面，也不会因为未来的预期而作茧自缚，相反，他们总是可以但行好事，莫问前程。 臣服生活，接纳一切 不拧巴，不较劲，生活不过就是见招拆招。 在《清醒地活》这本书中，作者指出，那些引发我们的执念的人事物，都是束缚在我们心灵的能量。这股被束缚的能量，因为我们的不接纳不臣服，而淤积于我们内心，成为阻挡我们成长的力量。 我们之所以有纠结有内耗，都是因为我们不去放手那些执着的人事物。 如果你放手了，臣服生活，接纳一切，这股被束缚的能量才能被释放。反过来，这股被释放的能量会重新流经你，成为支撑你往上走的意志力。 这时候，你就找到了人生的松弛感。 换句话说，当你不再执着，而是臣服生活，接纳一切，你会有更多的意志力去做好当下该做的事情。 很多人抱怨自己没有意志力去早起，去健身，不妨去审视你是否有太多对生活的执念，以至于你时刻恐慌焦虑，意志力缺失。 了解自己，接纳自己 回归到自身，为了获得人生的松弛感，你需要去了解自己，探索自己。 只有了解自己的人，才会真正地接纳自己，获得人生的松弛感。 你可以看看那些具有松弛感的明星，比如王菲，她应该很清楚自己要什么，很清楚什么对自己最重要，所以当她接纳自己真实的样子的时候，她就可以不惧外界的评判而真实地表达自己，所以我们总是可以看到她呈现给我们的那种淡定从容和那种“爱谁谁”的坦然。 我们对自己人生的定义，不来自于外界的评价体系，而是深深地来自于对自我的了解和接纳，那我们就不会过度地焦虑迷茫，就不会急于自证，不会操之过急，因为只有耐得住漫长的时间线，水到渠成才会是一件非常自然的事情。 人生的松弛感，是生活方式和人生态度由内而外地发散。 它应该成为我们人生的底色，让我们从容淡定地历经岁月的洗礼，并对于所有的体验都保持开放而随性的态度。 人生漫长，一路上会有高潮，也会有低谷。 慢慢地，你会发现，松弛感才是人生的王炸。 共勉～","link":"/2022/08/29/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%9D%BE%E5%BC%9B%E6%84%9F/"},{"title":"以前的hexo博客源码没了","text":"以前的hexo博客源码没了，只能重新开一个了～ 之前搭建的博客服务器到期了，也没有动力继续维护了，算了，然后过期就被收回了 输出其实是个挺耗精力的事情，可能得很久才能攒出一篇正儿八经的文章或者视频 可能还是执行力不太够，现在挖的坑越来越大 想做的事情太多了～ 一件一件来吧 不过博客这个东西最好还是保持持续性吧 后面会把之前的精选文章挪进来 不太喜欢用类似博客网站的东西，觉得太不够私人了 那就从github这个pages重新开始吧 现在有一个宏大的设想，正在一步一步实现，这个过程也会记在这里 慢慢来搞吧","link":"/2022/01/13/%E4%BB%A5%E5%89%8D%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E6%B2%A1%E4%BA%86/"},{"title":"一个子查询优化","text":"问题背景同事写了一个接口，这个接口涉及到下面三个表： 1234567891011121314151617User: - id - username - created_utc - ...UserLoginInfo - id - user_id - created_utc - ...Project - id - user_id - name - ... 需求是查询出：用户，最近用户登录时间，以及创建的项目数。这里的一条UserLoginInfo记录，代表一次登录，Project就是用户创建的项目记录，可能有多条。 同事实现是用子查询，Python里实现大概如下： 1234567891011121314151617181920212223user_projects_query = ( db_session.query(func.count(Project.id).label(&quot;cnt&quot;)) .filter( Project.user_id == User.id, Project.deleted == 0, ) .label(&quot;user_projects_cnt&quot;))login_utc_query = ( db_session.query(UserLoginInfo.created_utc) .filter(UserLoginInfo.user_id == User.id) .order_by(UserLoginInfo.id.desc()) .limit(1) .label(&quot;latest_login_time&quot;))default_login_query = func.COALESCE(login_utc_query, User.created_utc).label(&quot;default_login_time&quot;)order_mapping = { &quot;login_time&quot;: lambda desc: (default_login_query.desc(), User.id.desc()) if desc else (default_login_query, User.id), &quot;user_projects&quot;: lambda desc: (user_projects_query.desc(), User.id.desc()) if desc else (user_projects_query, User.id), &quot;created_utc&quot;: lambda desc: (User.created_utc.desc(), User.id.desc()) if desc else (User.created_utc, User.id)}query = db_session.query(User, user_projects_query, default_login_query).filter_by(deleted=0).order_by(*condition) 这里的condition是在order_mapping中根据desc的值进行选择的 上面用Python写的代码翻译成raw sql就是 1234567SELECT &quot;user&quot;.id as user_id, &quot;user&quot;.username as user_name, (SELECT count(project.id) AS cnt FROM project WHERE project.user_id = &quot;user&quot;.id AND project.deleted = 0) AS user_projects_cnt, coalesce((SELECT user_login_info.created_utc FROM user_login_info WHERE user_login_info.user_id = &quot;user&quot;.id ORDER BY user_login_info.id DESC LIMIT 1), &quot;user&quot;.id) AS default_login_time FROM &quot;user&quot; WHERE &quot;user&quot;.deleted = 0 ORDER BY default_login_time DESC, &quot;user&quot;.ext_id DESC LIMIT 10 OFFSET 0 分析这一实现一打眼就知道肯定会有问题，因为有很多关联子查询，在数据集小的情况下体现不出来，一旦数据集稍有增大，速度就会大幅下降。因为一般来说，关联子查询在查询优化器里是不好进行优化的，最后出来的算法大概率是Nested loop 下面是在测试环境用explain执行后的结果，果然是Nested Loop占了相当长的时间 12345678910111213141516171819202122232425262728Sort (cost=750000347885.10..750000347885.29 rows=75 width=566) Sort Key: ((SubPlan 2)) DESC, &quot;user&quot;.id DESC -&gt; Bitmap Heap Scan on &quot;user&quot; (cost=8.75..750000347882.77 rows=75 width=566) Recheck Cond: (ext_sys = 1) Filter: (deleted = 0) -&gt; Bitmap Index Scan on idx_user_ext_sys (cost=0.00..8.73 rows=78 width=0) Index Cond: (ext_sys = 1) SubPlan 1 -&gt; Aggregate (cost=19.27..19.28 rows=1 width=8) -&gt; Bitmap Heap Scan on document (cost=4.21..19.25 rows=5 width=4) Recheck Cond: (user_id = &quot;user&quot;.ext_id) Filter: ((user_sys = 1) AND (deleted = 0)) -&gt; Bitmap Index Scan on idx_user_id (cost=0.00..4.21 rows=8 width=0) Index Cond: (user_id = &quot;user&quot;.ext_id) SubPlan 2 -&gt; Limit (cost=10000004618.93..10000004618.94 rows=1 width=4) -&gt; Sort (cost=10000004618.93..10000005141.43 rows=209000 width=4) Sort Key: user_login_info.created_utc DESC -&gt; Nested Loop (cost=10000000000.15..10000003573.93 rows=209000 width=4) -&gt; Seq Scan on user_login_info (cost=10000000000.00..10000000942.95 rows=1045 width=4) Filter: (user_id = &quot;user&quot;.id) -&gt; Materialize (cost=0.15..18.98 rows=200 width=0) -&gt; Index Only Scan using idx_document_user_sys on document document_1 (cost=0.15..17.98 rows=200 width=$) Index Cond: (user_sys = 1)Planning time: 0.212 msExecution time: 229.674 ms 解决那么现在首要问题就是如何避免子查询，可以看到需求里是需要最近用户登录时间和用户的项目数，那么一个很自然的思路就是先把这两个数据查出来，然后再和 User Join到一起进行分页即可，这样就可以避免子查询嵌套到父查询里了，这里涉及到一个子查询的优化方法，尽量将关联子查询上推，上推到和父查询一个层级以避免 Nested Loop。 要实现先查出来某些数据，然后在后面的查询中使用，那么就是 CTE(公用表表达式) 了！公用表表达式，本质是允许用户通过一个子查询语句定义出一个临时表，然后在各个地方都可以使用这个临时表。 实现如下： 12345678910111213141516171819202122232425262728user_projects_query = db_session.query( Project.user_id, func.count(Project.id).label(&quot;cnt&quot;)).filter( Project.user_id == User.id, Project.deleted == 0,).group_by(Project.user_id).cte('user_projects_query')project_count = func.COALESCE(user_projects_query.c.cnt, 0)login_utc_query = db_session.query( UserLoginInfo.user_id, func.max(UserLoginInfo.created_utc).label('login_utc')).group_by(UserLoginInfo.user_id).cte('login_utc_query')login_utc = func.COALESCE(login_utc_query.c.login_utc, User.created_utc).label('login_utc')order_mapping = { &quot;login_time&quot;: lambda desc: (login_utc.desc(), User.id.desc()) if desc else (login_utc, User.id), &quot;user_docs&quot;: lambda desc: (document_count.desc(), User.id.desc()) if desc else (document_count, User.id), &quot;created_utc&quot;: lambda desc: (User.created_utc.desc(), User.id.desc()) if desc else (User.created_utc, User.id)}query = db_session.query( User, document_count, login_utc).join( user_projects_query, user_projects_query.c.user_id == User.id, isouter=True).join( login_utc_query, login_utc_query.c.user_id == User.id, isouter=True).filter( User.deleted == 0,).order_by(*condition) 对应的raw sql如下： 1234567891011121314WITH user_projects_query AS (SELECT project.user_id AS user_id, count(project.id) AS cnt FROM project WHERE project.deleted = 0 GROUP BY document.user_id ), login_utc_query AS (SELECT user_login_info.user_id AS user_id, max(user_login_info.created_utc) AS login_utc FROM user_login_info GROUP BY user_login_info.user_id )SELECT &quot;user&quot;.id AS user_id, &quot;user&quot;.username AS username, user_projects_query.cnt AS user_projects_query_cnt, coalesce(login_utc_query.login_utc, &quot;user&quot;.created_utc) AS login_utc FROM &quot;user&quot; LEFT OUTER JOIN user_projects_query ON user_projects_query.user_id = &quot;user&quot;.id LEFT OUTER JOIN login_utc_query ON login_utc_query.user_id = &quot;user&quot;.id WHERE &quot;user&quot;.deleted = 0 ORDER BY login_utc DESC, &quot;user&quot;.ext_id DESC LIMIT 20 OFFSET 0 在测试环境跑一下 EXPLAIN ANALYSE: 123456789101112131415161718192021222324252627282930313233343536 Limit (cost=2832.33..2832.38 rows=20 width=28) (actual time=11.156..11.162 rows=20 loops=1) CTE user_projects_query -&gt; HashAggregate (cost=31.53..31.88 rows=35 width=12) (actual time=0.103..0.108 rows=26 loops=1) Group Key: document.user_id -&gt; Bitmap Heap Scan on document (cost=9.69..30.69 rows=168 width=8) (actual time=0.018..0.074 rows=181 loops=1) Recheck Cond: (user_sys = 1) Filter: (deleted = 0) Rows Removed by Filter: 29 Heap Blocks: exact=18 -&gt; Bitmap Index Scan on idx_document_user_sys (cost=0.00..9.65 rows=200 width=0) (actual time=0.013..0.013 rows=211 loops=1) Index Cond: (user_sys = 1) CTE login_utc_query -&gt; GroupAggregate (cost=0.29..2760.73 rows=46 width=8) (actual time=1.135..10.853 rows=70 loops=1) Group Key: user_login_info.user_id -&gt; Index Scan using idx_user_login_info_user_id on user_login_info (cost=0.29..2515.61 rows=48932 width=8) (actual time=0.005..5.915 rows=48804 loops=1) -&gt; Sort (cost=39.73..39.99 rows=107 width=28) (actual time=11.155..11.158 rows=20 loops=1) Sort Key: (COALESCE(login_utc_query.login_utc, &quot;user&quot;.created_utc)) DESC, &quot;user&quot;.ext_id DESC Sort Method: top-N heapsort Memory: 27kB -&gt; Hash Left Join (cost=2.78..36.88 rows=107 width=28) (actual time=11.028..11.130 rows=107 loops=1) Hash Cond: (&quot;user&quot;.id = login_utc_query.user_id) -&gt; Hash Left Join (cost=1.28..34.54 rows=107 width=28) (actual time=0.137..0.210 rows=107 loops=1) Hash Cond: (&quot;user&quot;.id = user_projects_query.user_id) -&gt; Index Scan using user_pkey on &quot;user&quot; (cost=0.14..32.67 rows=107 width=20) (actual time=0.014..0.066 rows=107 loops=1) Filter: (deleted = 0) Rows Removed by Filter: 5 -&gt; Hash (cost=0.70..0.70 rows=35 width=12) (actual time=0.119..0.119 rows=26 loops=1) Buckets: 1024 Batches: 1 Memory Usage: 10kB -&gt; CTE Scan on user_projects_query (cost=0.00..0.70 rows=35 width=12) (actual time=0.104..0.115 rows=26 loops=1) -&gt; Hash (cost=0.92..0.92 rows=46 width=8) (actual time=10.887..10.887 rows=70 loops=1) Buckets: 1024 Batches: 1 Memory Usage: 11kB -&gt; CTE Scan on login_utc_query (cost=0.00..0.92 rows=46 width=8) (actual time=1.136..10.875 rows=70 loops=1) Planning time: 0.218 ms Execution time: 11.211 ms 可以看到相比之前的子查询的229ms，使用cte的sql已经降到了11ms了 总结不要在SELECT语句中滥用子查询 子查询只有必要的时候再用，使用时候应该注意考虑如何将子查询与SQL语句的主干进行融合，子查询不是独立的黑盒数据块，应该与主语句通盘考虑后再结合使用。 在使用子查询的地方，往往可以通过CTE表达式进行优化，核心思路就是将子查询提升到和父查询一样的层级，避免Nested Loop，而且CTE表达式可读性更好。 总之在一个SQL有比较多的子查询时候一定要小心，记得 EXPLAIN ANALYSE","link":"/2022/08/24/%E4%B8%80%E4%B8%AA%E5%AD%90%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"title":"不断的正反馈","text":"炒股嘛，需要不断正反馈才能更有信心 这里就需要高胜率，也就是说干一次成一次，大部分都能成，这样才敢继续干，干了之后心态才能好，才有信心，这是第一步。 保证能成的同时，还需要保证干不成的那次亏损不能太多，不能干成很多次，但是一次干不成就把前面很多次干成的利润全吞掉了，这样肯定不行，因为这样就挣不着钱了。所以光胜率高也没用，需要回撤也低。这里相当于赔率，赔率其实没有明确的定义，而在投资里面可以这样理解，比如盈利可获利40%，反之则亏损20%，那么它的赔率就是40/20=2，所以我们需要保证低回撤其实就是需要保证高赔率。 评价一个策略是否能成就要看它是否是盈利正期望的，而决定是否盈利正期望的就是高胜率，低回撤（高赔率）。 上图是趋势梭哈系统使用组合模式的历史收益曲线，很明显它就是一个高胜率，低回撤（高赔率）的交易系统。这段时间经过实践也能体会到这一点，现在已经执行6次了，每次都是盈利的。 星辰大海，岂不是就在眼前～","link":"/2022/02/09/%E4%B8%8D%E6%96%AD%E7%9A%84%E6%AD%A3%E5%8F%8D%E9%A6%88/"},{"title":"写hexo博客的绝佳工具——hexo-client","text":"最近逛Github，发现了一款写hexo博客的绝佳工具——hexo-client，非常好用，在这安利一下。 以前写hexo博客都是用IDE加载整个项目文件夹，在其中编辑，然后利用hexo命令在终端进行操作。有几个地方不是很方便： 上传图片的时候的操作很繁琐，首先需要把图片挪到对应文件夹下，然后在文章里面用markdown语法插入对应的图片地址。 没有markdown的编辑器，有时候一些语法还得现查 没法按照分类和标签来展示文章 IDE编辑完成后，还得在终端去执行发布命令 现在这款hexo-client工具完美解决了上面的问题，它提供了一个很好用的markdown编辑器，如下图： 然后上传图片的时候也很方便，点击编辑器里面的图片按钮，上传即可，工具会自动帮你上传到指定的图片文件夹下，并且会重命名，比如上面这张图片的地址是这样的： ![WX202207301024142x.png](/images/2022/07/30/66ef87ce-a338-4597-9de5-2f3b73084553.png) 很方便有木有，另外首页界面的文章也可以按照分类，标签展示，一目了然： 最后最牛的一点，工具可以一键发布，太爽了有木有： 太好用了，又激起我写博客的热情了，感谢 gaoyoubo！","link":"/2022/07/30/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%9D%E4%BD%B3%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94hexo-client/"},{"title":"准备开始分红","text":"这个月真的是太难了，FIRE 基金回测截止今天已经亏损 0.7% 了，而 FIRE 基金由于月初使用半仓格局了一把，现在还有快 3 个点的收益，但是也扛不住大幅回撤了。 哎。。。 鉴于目前行情的这种情况，而且也快到年底了，FIRE 基金准备开始逐渐分红，分红出来的资金一部分补充生活所需，一部分打算投入到 FIRE 基金养老版 中进行抄底。 分红策略就是固定一个资金额，每个月末只要比这个资金多，就分红，分红数额就是多余的部分。如果少于这个资金额，那就等超过的那个月末再分红吧。 截至目前还有 3 个点的收益额可以进行分红。 目前还在车上，满仓创业板，唉，生死有命，富贵在天。 就这样吧～ P.S. 目前 FIRE 基金已经有了两项比较重要的调整了： 只操作宽基，创业板50 ETF，创成长 ETF，双创 ETF，上证50 ETF，科创50 ETF 每月进行分红 2022.11.29 更新每月分红改为，每次上车之后只要有盈利以及大于固定资金额就进行分红。","link":"/2022/11/22/%E5%87%86%E5%A4%87%E5%BC%80%E5%A7%8B%E5%88%86%E7%BA%A2/"},{"title":"初识 Casdoor","text":"最近工作需要研究了下Casdoor： Casdoor is a UI-first Identity Access Management (IAM) / Single-Sign-On (SSO) platform based on OAuth 2.0, OIDC, SAML and CAS. 简介Casdoor 是一个开源的单点登录系统，单点登录系统的好处就是集中管理用户，使的我们开发的应用只需要关心业务逻辑而不用每个应用都是去实现一套用户系统。 Casdoor 使用了 OAuth2 的方式来完成单点认证，大概逻辑如下图： 总结一下就是： 第一步 获取code 第二步 用code获取access_token 第三步 用access_token获取所需要的资源 安装服务安装文档 文档说的很明白，我这里是下载源码使用的，因为我用的PostgreSQL，所以需要改一下app.conf和adapter.go。 然后后端启动：go run main.go 后端启动： 123cd webyarn installyarn start 非常简单 界面配置这里我是用最小的改动来完成对接demo的，首先需要添加一个组织，组织就是一堆资源，应用的的集合： 后面的用户，角色，权限，模型，提供商都可以先不管，需要了解的可以看文档 然后需要添加一个新的应用，主要就是下图这些 客户端ID和客户端密钥，都是后面对接时候需要的 还有一个就是证书，这个不需要改，只需要点编辑进入将公钥拿到 上面就是在界面上需要完成的事情和完成一个对接demo所需要的数据了 web 对接下面是和 Casdoor 对接的 web 接口代码，主要有两部分，第一部分是获取 code，第二部分是通过 code 获取 access_token，而这个 access_token 已经包含了用户信息，用对应的公钥进行解密，即可得到一个用户的 json 数据。 123456789101112131415161718192021222324252627282930313233343536373839404142434445import loggingfrom urllib.parse import urljoinfrom casdoor import CasdoorSDK@route(r'/casdoor/sso-login')class CASDoorSSOLoginHandler(BaseHandler): def save_user(self, user_data): user = User.make_user(uid=user_data['id'], ext_uname=user_data['name'], username=user_data['name'], _from='casdoor') return user def get(self, *args, **kwargs): code = self.get_argument('code', None) target_uri = self.get_argument('target_uri') subpath = config.get_config(&quot;webif.redirect_subpath&quot;, '') trident_base = urljoin(self.origin_host, subpath.lstrip('/')) endpoint = config.get_config('casdoor_auth.endpoint') client_id = config.get_config('casdoor_auth.client_id') client_secret = config.get_config('casdoor_auth.secret') org_name = config.get_config('casdoor_auth.org_name') certificate = config.get_config('casdoor_auth.cert') sdk = CasdoorSDK( endpoint, client_id, client_secret, certificate, org_name, ) if code: access_token = sdk.get_oauth_token(code) user_data = sdk.parse_jwt_token(access_token) user = self.save_user(user_data) self.session['proxy_user_id'] = str(user.id) redirect_url = urljoin(trident_base, target_uri) else: origin_url = '{}/api/v1/casdoor/sso-login?target_uri={}'.format(trident_base, target_uri) redirect_url = sdk.get_auth_link(origin_url, state='casdoor') logging.info('redirect to %s', redirect_url) return self.redirect(redirect_url) 配置也比较简单： 这里需要特别注意的是，endpoint 配的是 Casdoor 访问的首页地址，也就是这里是前端地址，而不是后端地址。前端地址是：http://localhost:7001/，后端地址是：http://localhost:8000/，这里很有迷惑性，让我折腾了半天。","link":"/2022/08/04/%E5%88%9D%E8%AF%86-Casdoor/"},{"title":"WINTER IS COMING","text":"疫情以来的世界，慢慢变的有点失控。 首先疫情已经给世界带来诸多的负面影响了，旅游业受到重创，很多新建景点已经人流稀少，甚至关门大吉，这是最直接可以感受到的。其次每次疫情的爆发都需要大量的社会资源来进行检测，隔离，而且每一次封控都会造成经济活动的停滞，这又反过来减少了社会资源的产出。 最近，上海疫情持续恶化，每天都是几万例，上次听到这个级别的数字也还是疫情初始的武汉，但是过去了这么长时间了，经历了多少次疫情在各个城市的爆发，现在上海依然是防控不住，而且还造成这样的爆发性传染，实在是让人咂舌。从新闻来看，似乎上海就是从0开始防疫，防疫中出现的问题，之前的城市比如西安也都出现过。 国家是时候得发挥中央的优势了，比如组建国家级别的防疫小组，在各地积累经验，然后在爆发疫情的城市指导抗疫工作。另外一码通我觉得也有必要实行全国统一，不能让这些城市各自为战，而是全局统筹规划才行。 刚才看了下高德地图，东部很多地方都出现了因为疫情封路的情况，广州可能又要开始一轮疫情爆发，而西安听说今天已经封了好几个地方。看这架势，今年的经济可能真的没法保住了。 而全球局势也是动荡不安，俄罗斯乌克兰战事依然持续，北约势力还在继续拱火……看看最近的汽油价格，92#都已经快9块了，我也已经一个多月没有加过油了。 如果真这么持续下去，今年下半年或者明年发生金融危机的可能性就非常大了。 那么作为个人，我觉得无非就是想办法增加收入，增加存款，减少开支，减少负债。工作上好好工作，不要轻易辞职，生活上保护好自己的家人。投资上减少股票类型投资，主要做保本的货币类理财。","link":"/2022/04/09/Winter-is-coming/"},{"title":"向往的生活","text":"现在是越来越厌烦城市的生活了，疲惫，无趣，感觉就是为了那点生计而不断耗费自己的精力和时间，但其实什么也没得到，有点浑浑噩噩的感觉。 这种感觉就是自己慢慢远离自己内心的感觉，两者都在一片荒漠中越走越远，所以，身心疲惫。 向往的生活，就是寻一处农家小院 种花种草种些蔬菜， 读诗读史读遍人间， 在一片宁静中探寻自己的内心，探寻宇宙的浩瀚 我不想说等到我FIRE之后，我就去实现这个心愿，真的很无力 但是我也很羡慕那些现在已经实现了的人儿 2023年，新的一年，我希望有所改变 至少可以踏出去一步， 让一直疲惫的身心有所缓解 让一直紧绷的神经松一松 让自己长舒一口气先～ P.S. 最近的一部剧，去有风的地方，正是我向往的。","link":"/2023/01/08/%E5%90%91%E5%BE%80%E7%9A%84%E7%94%9F%E6%B4%BB/"},{"title":"在 Hexo 博客里插入图表","text":"用到了 Chartjs 的插件：hexo-tag-chart 用法总结如下： 首先在 hexo 博客的目录里运行：npm install hexo-tag-chart --save 然后在文章中就可以使用 chart 的 tag 了 123{% chart 90% 300 %}\\\\TODO option goes here{% endchart %} 其中 chart 是标签名，endchart 是结束标签，不需要更改，90% 是图表容器的相对宽度，默认是 100%，300 是图表容器的高度，默认是按正常比例缩放的，你可以通过设置 options 里面的 aspectRatio 属性来调整宽高比例，另外还有许多属性可以自定义，你可以查看 官方文档。在标签之间的部分，需要自己填充的图表数据和属性。 我自己使用图表的页面：FIRE 基金 参考： 在 Hexo 中插入 Chart 动态图表","link":"/2022/08/13/%E5%9C%A8-Hexo-%E5%8D%9A%E5%AE%A2%E9%87%8C%E6%8F%92%E5%85%A5%E5%9B%BE%E8%A1%A8/"},{"title":"如何去除数学表达式中的无用括号","text":"最近工作上遇到了这个问题，挺有意思，终于遇到了一些有点意思的东西，于是深入研究了下。 问题背景问题大概背景是 系统中会展示数学公式，公式是用树来表达的，以运算符号为节点，比如 3=1+2，首先根节点是=，然后左子节点为3，右子节点是+，接下来+的左子节点是1，右子节点是2，就是以这种方式来表示一个数学公式。 然后展示的时候并不知道哪些地方要加括号，因为括号这个信息隐藏在树里了，展示的时候只能是每个操作符的两边都加上括号，这样展示出来就非常繁琐，那么就得想一个算法来将这些无用括号去除掉。 算法描述算法大概是这样的，只要括号内的非括号部分的数学符号的最小优先级小于括号任意一边数学符号的优先级，那么括号就是必须的，否则就是无用的括号。 比如q * (a * b + c * d) + c，括号内部的+和*，最小优先级是+，括号两边是*和+，小于其中一个*的优先级，那么这个括号就是必须的。 同理，q * (a * b * c * d) + c，这个括号就是无用的。 原理就是括号里面的优先级如果都是高于括号两边，那么不加括号，也是会先计算括号里面的运算。 另外为啥是非括号部分，因为内部如果已经有括号了，那么子括号肯定是先运算了，可以把这个子括号当一个整体对待。 当然目前还有一个问题，就是遇到/和-的时候会有一些问题，比如a/(b/c)或者a-(b-c)，主要原因是/和-有取反的作用，所以需要特殊处理：也就是如果/和-右侧的括号需要保留。 代码实现回到问题背景，按照这样的数据结构，其实算是简化了。结点都是运算符，那么如果把结点左侧作为括号包裹的内容，只需要比较结点左侧的非括号部分最小优先级和结点符号优先级就可以了。同理，右侧也是一样的。 而且针对/和-的特殊处理也更简单了，只需要判断结点运算符是不是/和-，如果是，那么右侧部分需要加括号，当然如果需要的话。 另外代码还实现了一个功能：小括号，中括号，大括号的嵌套。主要原理就是如果某个结点需要加括号，那么递归的去找一下左节点和右节点目前使用的最大括号，在此基础上再用更高一级的括号。 实现代码大概如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115class BracketProcessor: small_bracket = 'small' middle_bracket = 'middle' big_bracket = 'big' priority_default = 3 operator_priority = { '+': 1, '-': 1, '*': 2, '/': 2, } def __init__(self, formula_items, expression): self.formula_items = formula_items self.expression = expression self.formula_dict = self.get_formula_dict(formula_items) self.start_node = self.get_start_node(self.formula_dict) self.brackets = { self.small_bracket: 0, self.middle_bracket: 1, self.big_bracket: 2 } @classmethod def get_formula_dict(cls, formula_items): formula_dict = {} for item in formula_items: origin = item.data['origin'] if 'left' not in origin and 'node' in origin: origin.update(origin['node']) if 'name' not in origin: origin['name'] = origin['operator'] formula_dict[origin['index']] = item return formula_dict @classmethod def get_start_node(cls, formula_dict): for key, value in formula_dict.items(): if value.data['origin']['name'] == '=': left_node = formula_dict.get(value.data['origin']['left']) right_node = formula_dict.get(value.data['origin']['right']) return left_node if left_node.data['origin'].get('operator') else right_node return None def process(self): if self.expression and '(' not in self.expression: return # 搜索 left 和 right 的最低优先级 X，Y， # 如果 X 优先级小于 start_node 的优先级，那么 X 需要括号 # 否则，不需要括号 # 对于 Y 同理 # 只在一个分支上检查level # 特例 / - 右边分支如果有同级的 需要带括号 # 括号内部 非括号部分的优先级 self.fill_node_bracket(self.start_node) def ensure_bracket(self, child_bracket): if not child_bracket: return self.small_bracket child_bracket_order = self.brackets[child_bracket] for bracket, order in self.brackets.items(): if order &gt; child_bracket_order: return bracket return None def find_child_bracket(self, node): if not node: return bracket = node.data['origin'].get('bracket') if node.data['origin']['left'] != -1: left_bracket = self.find_child_bracket(self.formula_dict.get(node.data['origin']['left'])) if left_bracket: if not bracket: bracket = left_bracket else: bracket = left_bracket if self.brackets[left_bracket] &gt; self.brackets[bracket] else bracket if node.data['origin']['right'] != -1: right_bracket = self.find_child_bracket(self.formula_dict.get(node.data['origin']['right'])) if right_bracket: if not bracket: bracket = right_bracket else: bracket = right_bracket if self.brackets[right_bracket] &gt; self.brackets[bracket] else bracket return bracket def fill_node_bracket(self, start_node, level=1): start_node_priority = self.operator_priority.get(start_node.data['origin']['name'], self.priority_default) left = self.formula_dict.get(start_node.data['origin']['left']) if left: self.fill_node_bracket(left, level=level + 1) left_lowest_priority = self.get_lowest_priority(left) if left_lowest_priority &lt; start_node_priority: child_bracket = self.find_child_bracket(left) left.data['origin']['bracket'] = self.ensure_bracket(child_bracket) right = self.formula_dict.get(start_node.data['origin']['right']) if right: self.fill_node_bracket(right, level=level + 1) right_lowest_priority = self.get_lowest_priority(right) if right_lowest_priority &lt; start_node_priority or (start_node.data['origin']['name'] in ['/', '-'] and right_lowest_priority == start_node_priority): child_bracket = self.find_child_bracket(right) right.data['origin']['bracket'] = self.ensure_bracket(child_bracket) def get_lowest_priority(self, start_node): if not start_node or start_node.data['origin'].get('bracket'): return self.priority_default node_priority = self.operator_priority.get(start_node.data['origin']['name'], self.priority_default) if start_node.data['origin']['left'] != -1: left_priority = self.get_lowest_priority(self.formula_dict.get(start_node.data['origin']['left'])) node_priority = min(node_priority, left_priority) if start_node.data['origin']['right'] != -1: right_priority = self.get_lowest_priority(self.formula_dict.get(start_node.data['origin']['right'])) node_priority = min(node_priority, right_priority) return node_priority","link":"/2022/09/16/%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84%E6%97%A0%E7%94%A8%E6%8B%AC%E5%8F%B7/"},{"title":"在这个社会上没有信任可言","text":"2020年的时候我租下了这个房子，本来就是作为新房的过渡期居住，当时就想签三年合同，但是房东说最多只签两年，两年就两年吧，到时候再说。 转眼间到2022年了，房东当时是这么说的 当时我觉得： 签合同房东还得到房子来，我不喜欢被打扰 今年我的房子就装修好了，刚好到明年租房到期住进去，也就一年时间。 现在看来在这个社会上没有信任可言，一切嘴上说的都不可信，落实到文件上才是最真的事情 今天，房东给我下逐客令了，虽然比较委婉，但是就是那个意思。那现在这样对我的损害就是： 本来3200的房租，现在新租房要3500，一个月损失300，6个月损失1800 新找房要半个月中介费，损失1750 还要再搬家，劳心费神 所以我主张房东承担这个损失，但是他不行，他的意思就是他不可能承担这个损失。 我就说当初是你说的因为找中介麻烦，所以没有签合同，我们是基于基本的信任以及租房惯例（默认续期一年）来达成共识的。 但是我也知道，没有合同，我没法主张这个损失，在法理上站不住，因为：根据《合同法》第二百三十六条：“租赁期间届满，承租人继续使用租赁物，出租人没有提出异议的，原租赁合同继续有效，但租赁期限为不定期。“ 不定期的意思就是房东随时可以不租，但是需要提前一个月通知，租客随时可以退租。 当然如果合同里有特殊规定的除外，比如到期后如果没有异议继续续一个合同期。 那现在我的这个情况就是之前合同找不到了，大概率是到期后重新签订合同。现在没有合同，所以就是不定期合同，房东现在的这个要求合法。 那我这里跟他沟通的重点就是 当初是你提出不签合同，我表示信任，也不想让你跑一趟，所以没签。用道德绑架房东，毕竟房东是银行工作人员，还是有一些羞耻感的。 最后达成的结果就是：房东补偿我1000元。 那我也只能见好就收了，然后尽快搬走，省的木乱了。 最后再强调一遍：在这个社会上没有信任可言，一切嘴上说的都不可信，落实到文件上才是最真的事情","link":"/2022/08/17/%E5%9C%A8%E8%BF%99%E4%B8%AA%E7%A4%BE%E4%BC%9A%E4%B8%8A%E6%B2%A1%E6%9C%89%E4%BF%A1%E4%BB%BB%E5%8F%AF%E8%A8%80/"},{"title":"封控在家的生活","text":"自从上周五被封控以来，宅在家的生活就是：做饭，吃饭，上班，做饭，吃饭，睡觉。 什么时候疫情才能消失啊，炒鸡想出去玩，自驾新疆，西藏。。。","link":"/2022/10/18/%E5%B0%81%E6%8E%A7%E5%9C%A8%E5%AE%B6%E7%9A%84%E7%94%9F%E6%B4%BB/"},{"title":"尘埃落定","text":"生活逐渐回归正轨，一切都开始尘埃落定。这两个月事情实在是太多，而且很多事情不受自己控制，我又是那种想的很多，容易焦虑的人，所以搞的很疲惫。现在终于清净下来了。 换了个新房子住，和之前的房东和房子彻底Say Goodbye，新房子设施出的各种问题都已妥善解决。 装修也基本上快要到尾声了，也顺利通过物业验收，现在还差开关，灯具，厨电，门锁，开荒保洁，窗帘，家具。只要柜子进场就行，可以开始散味，其他的也不是很着急。 除了这两件长时间困扰人的事情，中间还穿插了车在车库被撞，修了2个星期。。 现在慢慢觉得越长大，要处理的事情，要担的事情就越多，为什么不想长大，不就是因为小孩子无忧无虑，不需要扛这些事情，有父母大人护着你。 说起父母，家庭，我还是不知道怎么解决，从今年3月到现在，我没回过老家，也没有跟父母联系过，感觉像是3月份之后，大家不约而同的有一点不好意思联系对方一样，另外我也不知道怎么面对，我想起来就头脑如麻，真的是没有办法。 算了，还是先不想这些事情了，因为想也没有办法解决，还是先把眼前的事情解决好吧。","link":"/2022/09/26/%E5%B0%98%E5%9F%83%E8%90%BD%E5%AE%9A/"},{"title":"感染新冠两个星期后","text":"感染新冠病毒后 第二天基本上就退烧了 第五天基本上鼻塞，咽痛，打喷嚏这些症状基本就消失 但是咳嗽真的是，到现在已经1个星期了 仍然是没有缓解，而且晚上睡觉的时候反而加重 2021年年初开始咳嗽，咳了半年，最后查出来是变应性咳嗽，也就是过敏性咳嗽，对冷空气过敏 所以现在不知道到底是因为新冠咳嗽，还是因为新冠导致的变应性咳嗽 咳嗽真的是有点影响生活体验了 另外新冠对我来说还有一些后遗症 比如容易困，以前也容易疲惫，但是不像现在这么容易困 嗜睡，一天睡差不多12个小时 然后还没有精力，做什么也集中不了精神 刚才打开一本书，打开看了几句就觉得头晕，想睡觉 也不想打游戏，总之就是觉得疲惫 以前也热衷于搞年度总结，来年展望 现在我没啥想总结的，对于2023年，我只想说活着 唉～","link":"/2023/01/01/%E6%84%9F%E6%9F%93%E6%96%B0%E5%86%A0%E4%B8%A4%E4%B8%AA%E6%98%9F%E6%9C%9F%E5%90%8E/"},{"title":"克服中年危机","text":"中产阶级的底座是「假设一切顺利」——这是小概率事件，从风控的角度看，底裤漏风。 现在能取得得高收入，应该多赚一年是一年，保持高储蓄，努力维持，而不是主动打破这种状态。 那么在40岁以前，主要做好三件事： 第一，大幅提高自己的“工资收入”； 第二，对投资有兴趣，开户越早越好，提升自己的投资能力，形成自己的盈利模式； 第三，要有一个好身体，不三高，不熬夜，吃得下，睡得着。 有此三项，保住中产阶级，克服中年危机应该也会有更强的底气了。","link":"/2022/08/19/%E5%85%8B%E6%9C%8D%E4%B8%AD%E5%B9%B4%E5%8D%B1%E6%9C%BA/"},{"title":"我在伊朗长大","text":"这几天疫情又开始蔓延了，所以还是尽量宅在家里吧，宅在家里能做的就是看书，看电视，打游戏，偶尔健个身，虽然看着无聊，但是能看书，看电视，能去了解别人的世界，就已经非常有趣了。 今天又看完了一本书——《我在伊朗长大》，这是一本漫画书，讲的是作者从10岁到24岁，即1980年至1994年间的生活记录。这期间，伊朗在伊斯兰革命之后建立了伊朗伊斯兰共和国，随后与邻国伊拉克打了八年战争，大量戴着天堂钥匙的年轻男孩被送到战场上。作者在1984年14岁时离开伊朗求学奥地利，此时两伊战争正酣。1988年作者回到伊朗，在一度消沉之后，通过国家考试进入大学，1994年毕业后再次离开伊朗。本书虽是作者十四年间的个人成长史或者说是私人生活小史，但透过一个儿童、以及一个离开祖国四年后又重回伊朗并在那里度过四年大学时光的年轻女孩的眼睛来观察伊朗，对于了解伊朗这个政教合一的意识形态国家还是别有一番启示。 伊朗跟朝鲜一样都是一个让人觉得神秘的国家，而伊朗比朝鲜更多的有一种恐怖主义的印象，人们一提起那个波斯古国，真的就是原教旨主义、狂热主义和恐怖主义。宗教并没有错，错的只是人们的利用方式。看这本书让人感觉到是当局一小部分人而非普通民众有这种狂热，想通过这些方式来控制民众，但是这只属于少数极端分子的行为，仍然有一大批为了捍卫自由的斗士，以及受到迫害的普通伊朗民众。 看完这本书，对伊朗有了更进一步的了解。 下面摘录一些觉得有意思的语句： 只有当灾难还能承受的时候我们才会自怨自艾，一旦超越了这个限度，忍受无法忍受的痛苦的唯一办法就是一笑置之。 我的爸爸他们在哪里？为什么他们不能把我搂在怀里安慰我？ 其实我没有什么可哭的。 我只是挽回了自己的尊严。 一年里我第一次感到自豪。我终于明白了外婆的意思，如果我自己不能感到内心的平静，我就永远平静不下来。 人必须教育自己。 生命只有一次，你有责任把它过得精彩。 人可以原谅，但绝不应该忘记。","link":"/2021/08/01/%E6%88%91%E5%9C%A8%E4%BC%8A%E6%9C%97%E9%95%BF%E5%A4%A7/"},{"title":"我的新冠感染经历","text":"终于，2022年12月20日早晨，我也开始了新冠肺炎的典型症状——发烧，前一天也就是12月19日，应该算是发病的第一天吧，当天早晨起床后我在电脑前工作的时候就觉得全身有点冷，然后逐渐开始咽喉干，全身有点乏力，当天晚上睡觉有点发冷。 但是目前还是不清楚究竟是在哪里感染的，我是在12月14日早上盒马买的菜，自此之后再也没有出过门，如果不是这次买菜中的毒，那只有说是下水道的气溶胶了。 现在关心怎么感染其实意义不大，毕竟身处羊群，总要沾一点羊毛的，重要的还是放下幻想，准备抵抗吧。 下来我先介绍一下我这几天的症状，以及服用了哪些药物： 2022年12月19日 当天以为只是受冷，并没有意识到自己感染新冠，心想着很久没出门了，应该不至于，所以没有量体温，也没有服药。 2022年12月20日 晚上睡觉觉得发冷，觉得有点奇怪了，所以早晨的时候量了下提问，果然有点发烧，37.6度，媳妇38.2度，普通着凉最多是嗓子疼，不可能发烧的，于是大概猜到了应该就是感染病毒了。 给父母知会了这一消息，父母让我跟媳妇赶紧回来，我本来是不太想回老家的，一个是怕传染给二老，另一个是我真的是不太喜欢他俩的脾气和家里的氛围，但是最终还是回去了。一个原因是在此之前父亲给我打了好几个电话，让我回家，自从今年3月份之后就再也没有回去，我一再拒绝感觉也不太好，另一个就是我自觉免疫力不太好，万一真的病倒了，媳妇怀孕中，没人照顾，所以最终还是选择回去了。 回去路上，全身已经开始发疼，特别是屁股，腰和膝盖。回去了之后本来想睡一会，但是疼的真的是睡不着，疼痛程度不高，但是就是会影响入睡。 当天晚上，体温升到了39度，于是服用了复方对乙酰氨基酚进行退烧。 2022年12月21日 这几天真是烧糊涂了，这天发生啥我都有点记不起来了。应该没有啥特殊的，就是服用药物退烧，大量喝水。 然后在网上看到大家说复方氨酚烷胺片比较有效，刚好家里也有这个，看了下配料表，发现这个里面的对乙酰氨基酚含量和之前服用的复方对乙酰氨基酚片居然是一样多的，晚上开始改服用这个。这个药里面的金刚烷胺有抗病毒的作用，然后还可以缓解打喷嚏，鼻塞，咽痛的症状，比单独服用复方对乙酰氨基酚要效果好一点。 2022年12月22日 当天就已经退烧了，我似乎感觉已经好了。 之前为了产检买的隔离面罩配送了，另外媳妇一直抱怨房间太干了，床有味道，于是我这一天开车跑到西安去取快递，加上搬家里的加湿器和空气净化器去了，后来发现东西太多，就只拿了加湿器（其实应该只拿空气净化器。。。） 出去这一趟我就发现其实我没好，反而是很虚弱的，稍微一动就一身细汗。。。 因为23日要陪媳妇去医院产检，所以当天晚上虽然没有发烧，我还是选择喝一粒复方氨酚烷胺片来预防一下，但是没想到喝错药了，喝成了对乙酰氨基酚片。。。罢了罢了，睡吧。 2022年12月23日 当天8点要赶到西北妇幼，于是我们得6点起床，不到7点出门，然后驱车一个多小时。 反正在家你觉得好像好了，一出门你就感觉到不太对劲，就是你会觉得又热又冷，外面是冷的，但是贴身衣物都已经热湿了，身体一层细汗，稍微动一下就有点气喘。 回家路上就觉得不太美气，当天回到家一测体温又开始低烧，最高到了38度，得，开始服药吧，中午和晚上各喝了一片复方氨酚烷胺片，这才控制住。 2022年12月24日 这一天体温都是正常的，开始了病情的下一阶段，咳嗽，鼻塞，打喷嚏。 因为卧室不能通风，感觉空气质量很差，而我也没精力也不敢再往出跑了，所以当天早上索性新买一台空气净化器，小米4 pro，带了病毒细菌涂层，可以灭火细菌病毒，顺便增加下房间的空气流通。京东物流也恢复正常了，早上买，晚上就到货了，很不错！ 晚上父母出去帮我买了克咳片和川贝消肺糖浆，晚上服用后睡觉。 2022年12月25日 早上起来就感觉好多了，各种症状都已经明显缓解。但是在网上看发现说是很多人都有肺炎的症状，要通过测血氧及时发现和治疗，突然想起自己的智能手表可以测血氧，但是回家没有带。当天早上就在京东抢了一台血氧仪，比平时贵一倍。。。没办法，晚上能到，只要家里人都正常那就放心了。 今天喝药还是克咳片和川贝消肺糖浆。 我只想说我们的政府真是不太擅长做预期管理，不论是之前股市上，还是最近的疫情管控。前一天还是坚持动态清零不动摇，TMD 下一天就是放开。我就想问，这其中180度的转弯，谁能做好准备，所以就出现了各种抢，各种坐地起价，老百姓只能做鱼肉，被人宰割，抢不到的只能自生自灭。 我就想问问，封控的时候你哪怕给老百姓科普一下，将来放开都需要准备什么东西，这个病究竟会怎么发展，好让人准备下。现在tm全都是在骗人的舆论：比如放开后说是哦90%都是无症状，大号感冒不会感染肺部。真的你要是信这些专家说的话，你tm就是傻逼，从新冠病毒第一天为公众所知就一直愚弄民众：什么不会人传人。 我真不知道他们怕什么，说实话在怕什么？？？","link":"/2022/12/25/%E6%88%91%E7%9A%84%E6%96%B0%E5%86%A0%E6%84%9F%E6%9F%93%E7%BB%8F%E5%8E%86/"},{"title":"房子基础装修好了","text":"基础装修：水电木瓦油，也就是房屋水电，吊顶，墙地砖，腻子刷漆 下来是等成品，柜子安装 期待完工的那一天","link":"/2022/07/29/%E6%88%BF%E5%AD%90%E5%9F%BA%E7%A1%80%E8%A3%85%E4%BF%AE%E5%A5%BD%E4%BA%86/"},{"title":"围城","text":"花了大概一个多星期，读完了围城这本书。 其实在我看来，围城只不过是人的天生逃避罢了，遇到问题就会觉得之前的境况能好一点，其实只要有想逃避的念头，哪里都是围城。 书中有一段话我觉得很有意思： 天下只有两种人。比如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留到最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。不过事实却适得其反，缘故是第二种人还有希望，第一种人只有回忆。 以前我用kindle尝试读过一次，但是没读下去，主要是一开始的内容有点乏味。不过这次反倒觉得越读越有意思，我想了想原因，可能是我觉得里面任意一个人物的生活都比我的生活有意思，我有点浸入的感觉了。。就好像进入了别人的世界，忘记了自己现在枯燥的生活。 另外我感觉我有点像方鸿渐，啥事糊里糊涂没有主见，生活呢也是一塌糊涂，混沌度日，然后自尊心还强。。 有人说，每个人都能从《围城》中找到自己的影子，也许他就是我在本书中找到的影子。","link":"/2022/05/09/%E5%9B%B4%E5%9F%8E/"},{"title":"把自己当做一家公司：使用 beancount 记账","text":"之前一直用挖财记账，从大学开始，断断续续的记账，到现在差不多快 10 年了。是什么让我放弃挖财转向 beancount 了呢： 隐私问题，这是一直比较担心的问题 挖财数据导出现在得 VIP 会员才行 看到关注的一个博主介绍 beancount 的文章，感觉很有意思 beancount 是开源的，数据都在本地，比较安全 为什么要用 beancount 记账为什么要记账首先是为什么要记账，以我个人这快 10 年的记账经验来讲，记账可以让你更好的把控你的财务能力，在我断断续续记账的时间里，记账的时候对自己财务非常清晰，该怎么花钱，花多少钱心里都会有数；而不记账的时候，就感觉没有把控力，对自己财务也非常模糊，花钱花的也有点失控。 通过记账不仅可以加深对自己的财务的了解，也可以根据支出的数据针对性的进行优化。如果要达到财务自由，需要达到三点要求，对支出的预期，对资产和收入的了解，和对寿命的期望。而记账可以解决前两点。 当你开始记账，你就会发现自己离自己的财务自由目标就更近了。 试想一下，假设把你作为一家公司，如果对自己的财务状况和自己的财务能力都不了解，谈何发展？ 为什么要用 beancount 项目开源优先，数据隐私得到保障 跨平台，可以用 git 进行管理，随处可用 数据可以导出或自行管理，因为数据是记录在文本文件里的，所以怎么用就非常灵活了，还可以自己写脚本玩出不一样的花子🤣 复式记账，更加强大。复式记账会记录每笔交易的资金流动，各账户变化「有正有负，正负相等」。这便是复式记账的基本原理，称之为「会计恒等式」。这种方式能够保证记账准确无误，也能提供更详细的财务分析。 嗯，大概就是这么些点，说服了我从挖财转向了 beancount。 beancount 安装昨晚上搞了一晚上，搞清楚了 beancount 怎么安装，怎么配置，最终搞好了自己的一套 beancount： 在这里我不会记录怎么安装，配置的细节，而是介绍一些我自己实际搭建的时候遇到的一些坑，以及其他一些教程中没有写的但是又比较关键的点 参考教程 记账神器 Beancount 教程：主要参考的是这篇文章 Beancount —— 命令行复式簿记：另外一篇比较全面的入门教程 Beancount复式记账：进阶教程 实际遇到的坑项目结构不用纠结，直接用我已经配好的这个，这是我看了好多教程，整理出来比较合理的项目结构了： 主入口是 main.bean accounts 下是各个账户的初始化 2022 下是 2022 年的记账流水 VSCode 插件第一个坑就是配置 VSCode 插件，beancount 就像编程语言一样，这个插件主要完成了高亮，自动补全。 这些教程里推荐的是这个插件： 但是不是说下载安装就可以用了，安装完成了需要配置，点击插件配置，需要配置一下三个地方： Fava Path：如果没有特殊改动，可以保持不动 Main Bean File：填入你的 main.bean 文件地址 Python3 Path：填入使用的 Python 解释器地址 这样配置完成之后，在 VSCode 里编辑就可以正常高亮和补全了。 如何初始化账户因为挖财的数据没法导出来，而且导出来再导入 beancount 也挺麻烦的，还不如重新开始。 重新开始就遇到一个问题，如何新建账户，并且初始化各个账户的初始金额呢？昨天搞了半天，终于弄明白了，有几个关键点昨天一直没弄明白，所以一直有问题： 配好上一节的 VSCode 插件，我就是因为没有把插件配置好，所以编辑器一直提醒导入错误，但是其实没有问题。。。 初始化账户的时间一定要是最早的，至少是比你用这个账户的时间要早，要不然就会报错。比如今天 11 月 11 号，那么我可以把账户初始化时间放到月初 然后 accounts 文件夹下的这几个文件分别代表以下含义： assets.bean：包含你所有的资产，比如银行卡，证券账户，基金账户等等 liabilities.bean：包含你所有的负债，比如房贷，信用卡，白条等等 income.bean：这个类似于手机记账软件里的收入分类 expenses.bean：这个类似于手机记账软件里的支出分类 equity.bean：目前我就是在这里做了一个账户初始化 下来就是将你的各个资产和负债记录到 assets.bean 和 liabilities.bean，格式其他教程有讲，我就不赘述了，但是有个小坑，就比如下面的这条，中间的 Card 必须是英文，而且首字母需要大写。。。 2022-11-01 open Assets:Card:中信银行 CNY 定义好资产和负债之后，开始在 equity.bean 初始化，大概就是这样： 123452022-11-01 open Equity:OpenBalance ;用于账户初始化，支持任意货币;初始化资产2022-11-01 pad Assets:Card:中信银行 Equity:OpenBalance2022-11-10 balance Assets:Card:中信银行 5.00 CNY 其他账户照这个写就完事了，注意第一列的时间哦，不要写错了。负债的金额写负数就可以啦。 下来是 收入和支出 定义，这个比较随意，按自己的需求来定义即可，比如我的 income.bean: 123452022-11-01 open Income:Salary CNY2022-11-01 open Income:PnL:Fund CNY2022-11-01 note Income:PnL:Fund &quot;基金盈亏&quot;2022-11-01 open Income:PnL:Stock CNY2022-11-01 note Income:PnL:Stock &quot;股票盈亏&quot; 支出 expenses.bean: 123452022-11-01 open Expenses:Shopping:京东 CNY2022-11-01 open Expenses:Traffic:加油 CNY2022-11-01 open Expenses:Traffic:停车费 CNY2022-11-01 open Expenses:Traffic:过路费 CNY 这样基本配置就 OK 了，是不是很简单。 开始记账在项目结构的 2022 文件夹下的 11-expenses.bean 定义的就是 11 月份的支出，第一笔： 123452022-11-11 * &quot;高速过路费&quot; Expenses:Traffic:过路费 3.80 CNY Expenses:Traffic:过路费 4.75 CNY Assets:Card:邮政储蓄 -3.80 CNY Assets:Card:邮政储蓄 -4.75 CNY 注意，会计恒等式，支出了什么就要从资产中减掉什么，收入了什么就需要在资产里加上什么。那么这里的支出就是用正数记录，收入是用负数记录。 结语记账的目标不在于记录一个流水账，而应该能帮助我们分析诊断家庭财务的健康度，最终实现家庭的理财规划目标。 在开始记账之后，我们就要逐渐开始思考如何把自己当成一家公司在运营，如何提升自己资产负债表的健康度～","link":"/2022/11/11/%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%BD%93%E5%81%9A%E4%B8%80%E5%AE%B6%E5%85%AC%E5%8F%B8%EF%BC%9A%E4%BD%BF%E7%94%A8-beancount-%E8%AE%B0%E8%B4%A6/"},{"title":"投资就像在种树","text":"突然觉得自己的账户就像是精心维护的果园，每一个标的就是一株树，建仓就是埋下种子，凡是要将树种高种大，必须有一套方法，加以耐心，毅力和时间，此后经受无数次风雨，依然坚持不懈，最终才能将树养大，养大之后便可以坐享果实了，正所谓前人栽树，后人乘凉。 对应投资一样，在建仓之后，悉心呵护等待其脱离成本区，有时候会接受大跌的洗礼，但是坚持投资策略，不断的给它输送养分，最终慢慢长大，积累利润垫，等积累足够的利润垫，市值也越来越大的时候，每年分红就够了，没有分红的就需要自己把握高点和低点，高点卖出，低点买入，类似于分红了，这时候就是乘凉的时候。 播种和收获都非常容易，但是用科学的方法呵护并陪伴其长大是一个漫长的过程，这不仅是一个技术活，也是一个考验耐心的体力活，期间不能着急，否则树折腾来折腾去，肯定就折腾死了。 立下种树这个观念，在投资中就不会急躁，不会被各种诱惑吸引，只要老老实实按自己方法种自己的树就可以了，保持耐心，相信将来的某一天终将可以品尝到收获的果实。把投资当成种树，也就是接受投资需要比较长的一段时间来发育，而不是一夜暴富，建立了这个心态，就不会一惊一乍，就会宠辱偕忘，波澜不惊。 我的果园现在有十三棵树，现在都在慢慢长大。树呢分为两类，一种是不太用打理的，它会自己慢慢长大；另一种是短期经常打理的，当然长期的也需要短期打理，但是总体上是省心的。现在大部分都还处于发芽期，而且很多处在风雨飘摇，因为自从种下之后经常都是暴风雨。希望以后情况能好一点，让我的树苗们茁壮成长。目前的目标是树苗们都可以长到10%的利润垫。","link":"/2022/08/14/%E6%8A%95%E8%B5%84%E5%B0%B1%E5%83%8F%E5%9C%A8%E7%A7%8D%E6%A0%91/"},{"title":"投资切记不要贪婪","text":"曾经的贪婪以我自身来说，很早就定下来了决定要一以贯之的投资策略，但是中间随着时间的发展，来自人天生的原始力量——贪婪，针对这最初的投资策略，做了好几次优化。 但是结果呢，每次优化每次坑，最终还是回到了之前的投资策略上，这中间的资金成本，时间成本，没法算了。 第一次，想能多上几次车，修改了策略的上车和下车条件。巧的是，修改之后第一次执行就遇到亏损情况，这次影响最为深远，亏损幅度也是最大。 第二次，想着能快速的盈利，将不要买股票这条原则忘的一干二净，买了不少股票，而且还是地产银行相关的，随后的事情——保交楼事件，让银行地产相关的股票大幅下挫，但是还好动用的仓位不多，这次亏损幅度较小。 第三次，再一次的修改了策略的上车，下车条件，按道理这次改变其实不算很大，但是恰巧的是，刚一改就遇到不相容的情况，造成了损失，亏损幅度也较小。 综上，三次都是为了多挣点钱，不满足于既定策略的收益情况，做了一些贪婪的决策，最终导致了亏钱，亏时间的事情发生。 这三次比较巧的事情是，每次都是刚修改完，立马就会步入坑中，其实这三个修改，也是多多少少做了些回测的，但是很奇怪，每次修改完，不相容的情况立马就会出现，立马就会造成亏损。 还好的是，每次跳坑之后，切换到原始策略上，很快就又都能回血，但是失去的时间已经一去不复返了。 还有一种贪婪就是不按策略既定的止盈条件来操作，自己觉得还要涨，所以就不卖了，导致本来还能盈利的，后来给亏损了。这种情况的贪婪伤害幅度虽然不大，但是侮辱性极强，很气人。 总结首先如果真的要做优化，最好还是： 第一，使用模拟盘或者小仓位去测试 第二，要经历一个跨度比较长的时间 第三，要严格做出回测 否则，脑袋一拍，就动用大仓位去试错，后果可想而知。 其次严格按策略的止盈止损来操作，既然已经有策略，不按策略来，反而去拍脑袋决策，孰优孰劣可想而知。 最后投资要记的一点：慢就是快，能不断的滚雪球，就是最好的方式。切记不要贪婪","link":"/2022/08/06/%E6%8A%95%E8%B5%84%E5%88%87%E8%AE%B0%E4%B8%8D%E8%A6%81%E8%B4%AA%E5%A9%AA/"},{"title":"投资往往是知易行难","text":"投资说起来简单，但是做起来确实不容易。最大的一个障碍就是如何做到知行合一。 在股市里，知易行难的原因是人们通常低估了赚钱和亏钱时候的心理波动。上涨赚钱的时候高歌猛进，觉得未来一定是涨涨涨，也更加容易发现所谓的利多，所以也容易高位加仓，一把亏光；下跌亏钱的时候，觉得未来前景黯淡，周围也全是利空，所以也容易低位割肉，割完就涨。 而且纵然是你有投资策略，也可能架不住这种心理波动，感觉就像是有个杠杆极度的放大了这个波动，所以很容易出现情绪性的梭哈买入和恐慌割肉。 从另一个角度来看，股市是反人性的，在大家情绪热烈的时候，就需要开始减仓了，在大家情绪低迷的时候，就需要开始加仓了。如果天生可以理性的做到这一点，那么活该你赚钱。但是大部分人都是普通人，都做不到，你可能现在想这么简单，怎么可能做不到，但是事实是，在你真正实盘的时候，在盈亏都是实际的钱的时候，面临这些情况的时候可能真的是做不到的。 所以需要投资策略，还需要对投资策略的信仰。 此外，浸淫在股市这个欲望场里，诱惑很多，欲望也很多，所以另一个很重要的是自己的定力，如何能看到诱惑还能坚持自己的策略，也是一个很值得修炼的品质。","link":"/2022/07/29/%E6%8A%95%E8%B5%84%E5%BE%80%E5%BE%80%E6%98%AF%E7%9F%A5%E6%98%93%E8%A1%8C%E9%9A%BE/"},{"title":"搬家了","text":"中秋节那天开始打包搬家，我真是低估了家里的东西多少，高估了自己的搬运能力。 幸亏把好朋友官哥叫来帮忙了，否则我中秋节三天累死都不可能搬完。 当天打包完成，吃个火锅喝个小酒，吃饱喝足之后晚上干活！ 从晚上8点开始，搬到晚上12点多。 第二天从早上9点搬到中午12点。 真的太累了。 搬完家，开始新生活，加油～","link":"/2022/09/13/%E6%90%AC%E5%AE%B6%E4%BA%86/"},{"title":"战船已固 前方即是星辰大海","text":"2021 年 1 月灵光乍现，开始构建交易系统，只做 ETF 1 月底初成，2 月初在上证 50 小试牛刀，赚了一把 随后 3 月市场大跌，也跟着亏损一波，然后收紧投资 此时心态还很稚嫩，当然主要还是缺乏盈利信心 根基还是交易系统没有完善 后来 4 到 6 月市场上涨，随即账户创新高，但是因为收紧投资，所以总收益并没有太多 在这段时间，也修复了不少系统 bug 是真 bug 的那种，数值计算错误的那种 随后 7 月市场开始震荡，又开始水土不服了 因为这时候还是人工确定什么时候该买入，什么时候卖出 具体什么时候，仍然不得其法，亏损扩大 一度让我有点放弃，甚至我已经转向买股票，又亏损一波 幸好坚持下来，在 7-10 月里积累数据和经验 10 月底确定了何时判断为强，何时判断为弱 也确定了买入和卖出的分时点 同时推出了程序自动决策功能 但是这仍然不能保证我稳定盈利 特别是 12 月初开始的这波下跌 又让我损失惨重 于是再次灵光一闪：止盈 在 2022 年 1 月份开发出了回测系统和止盈系统 确定出了最佳止盈参数，同时也优化了强弱判断策略 回测效果很 OK 2022 年 2 月年后，开始按此运行 果然最小回撤，稳定盈利 平稳度过 3，4 月份的股灾， 也没有错过 5，6 月份的反弹 4 个月收益率 20+% 于是我开始有点飘了 7，8 月份想快速赚一波，买股票，当然还是出于谨慎，买了银行和地产 那你知道的，保交楼，我又亏大了 9 月份啧啧，股灾又来了 这次虽然已经下决心坚持策略，只做 ETF 但是打野标的让我亏损严重 打野的都是行业标的，行业情绪化更严重，跌起来就不是人 虽然确实也能做，但是极端行情回撤就会很大 与我目前的目标相去甚远 10月痛定思痛，才明白多不一定是多，少才是多（less is more） 那目前交易系统只做这 5 个标的：创成长，创业板50，科创创业50，上证50，科创50 这几个回测都是往东北角走的，回撤也不大 同时也都是宽基，行业风险小，稳定 按照策略回测从2021年3月份到现在（不完全统计） 这5个收益率总计60%。。。 好了，现在战船已固，前方即是星辰大海！ 11 月，现在策略，操作，资金，心态都已处于稳定期了 截至目前，11 月收益率已经快 5%，很稳 那么 乘风破浪会有时，直挂云帆济沧海～","link":"/2022/11/12/%E6%88%98%E8%88%B9%E5%B7%B2%E5%9B%BA-%E5%89%8D%E6%96%B9%E5%8D%B3%E6%98%AF%E6%98%9F%E8%BE%B0%E5%A4%A7%E6%B5%B7/"},{"title":"学习 React","text":"以前也写过一些前端，比如我自己的博客，就是用 JQuery+HTML+CSS 实现的，但是大部分都是抄的，特别是 CSS 样式，真让人头大。至于 JS 部分，也是现学现撸，很不成体系，更不用说更深入的语言细节了，那就是一塌糊涂。 最近浏览博客，发现之前关注的博主 miguelgrinberg.com 开始在写 React 的教程，所以打算跟进学习一下，正好了解一下现代的 JS 框架是怎么样的，学习下前端工程是怎么构建的。 听说成为全栈工程师能更容易拿到远程工作的 offer，嗯不错不错，开始搞吧，学习使我快乐～ 教程地址：Introducing the React Mega-Tutorial 我会在博客里记录一下有意思和对我来说重要的点，主要就是个笔记吧。 ES5 vs. ES6ECMA, ECMAScript transpiling：which converts modern JavaScript source code into functionally equivalent ES5 code that runs everywhere. Summary of Recent JavaScript FeaturesTrailing Commas很有帮助的观点： 12345const myArray = [ 1, 3, 5,]; 在最后面一个元素加上逗号有两点好处，一个是上下挪动比较方便，另一个是新加元素比较方便。 Imports and Exports这里其实没有完全理解，default export到底和其他export有什么意思，文中说了一句话：When using default exports, the name of the exported symbol does not really matter. 后面举的例子，说 import myReallyCoolFunction from './cool'; 也是有效的，那和 import myCoolFunction from './cool'; 是一个意思？ 也就是说 default export 的东西，因为一个模块只能有一个，所以在其他模块引用的时候可以随便用任何名字？ 先保留这个疑惑，继续往下看。 另外导入 non-default export 也有一点不一样，需要加大括号 import { SQRT2 } from './cool'; Variables and Constants使用 let 来声明变量，const 来声明常量。 12let a = 1;const c = 3; 常量就是赋值之后不能有新的赋值了，而且也必须是在声明的时候赋值。 Equality and Inequality Comparisons=== 和 !== String Interpolation12const name = 'susan';let greeting = `Hello, ${name}!`; // &quot;Hello, susan!&quot; For-Of Loops1234const allTheNames = ['susan', 'john', 'alice'];for (name of allTheNames) { console.log(name);} Arrow Functions之前 code review 的时候看过这种写法，觉得很神秘，现在详细了解之后，其实也没啥，正如 Python 里的匿名函数，lambda 表达式一样。 12345678910111213141516171819function mult(x, y) { const result = x * y; return result;}// 函数用箭头函数可以这样写const mult = (x, y) =&gt; { const result = x * y; return result;};// 可以这样const mult = (x, y) =&gt; x * y;// 如果没有 y 参数 可以这样const square = x =&gt; x * x;// 回调函数longTask(result =&gt; console.log(result)); 在 Python 里就会这么写 1lambda x, y: x * y Promises1234fetch('http://example.com/data.json') .then(r =&gt; r.json()) .then(data =&gt; console.log(data)) .catch(error =&gt; console.log(`Error: ${error}`)); Async and Await上面的写法可以改成这样，更易读 12345async function f() { const r = await fetch('https://example.com/data.json'); const data = await r.json(); console.log(data);} 加上 async 的函数会自动返回一个 promise 箭头函数也可以使用 async 1234const g = async () =&gt; { await f(); console.log('done!');}; Spread Operator","link":"/2022/10/27/%E5%AD%A6%E4%B9%A0-React/"},{"title":"斯通纳","text":"这段时间读完了一本书——《斯通纳》，这本书是之前看完《我脑袋里的怪东西》后，在豆瓣上看书评时候发现的。感谢豆瓣，一个让你能发现更多有意思东西的地方，很多书电影都是在通过豆瓣发现的。 《我脑袋里的怪东西》这本书看完后让人有一种力量，一种可以直面惨淡人生的力量，有时候读着读着，就放佛自己就是主人公麦夫鲁特，自己在经历那些生活的坎坷，但是从不放弃。“在这个世界上，我最爱拉伊哈”——麦夫鲁特和拉伊哈的爱情，婚姻也让人觉得感动，幸运的是，在这个世界上，我也有最爱的人。 我喜欢阅读，是因为从中你可以汲取力量，从中可以感受到生命力，感受到别人的世界，感受到那些平凡的伟大，给人前进的动力。 《斯通纳》就是这样一本书，走到斯通纳的世界里，你会觉得一切都是那么平凡且不如意，但是你会感受到斯通纳的坚持，他在平凡里的坚持。 斯通纳自一堂选修文学课为起点， 他的一生就此悄然改变。未来的斯通纳成为了一名大学老师，结婚、生子、教学、退休、衰老、死亡。在他生命的尽头，或许他可以坦然面对这个问题：你的一生，还要期望别的什么吗？ 的确，这就是平凡的生活，但是能从中汲取到面对平凡可能又失意的生活时的力量。 你还期望什么呢？ P.S. 这本书的翻译有点差","link":"/2021/07/26/%E6%96%AF%E9%80%9A%E7%BA%B3/"},{"title":"搬去一个温暖的地方","text":"小时候最喜欢冬天 因为冬天可以玩雪 冬天显的很静谧 窝在家里烤火，烤包子 睡热炕，把被子一裹 真的很幸福 现在真的很不喜欢冬天 雾霾严重，干燥的冷空气 对我的呼吸道来说就是一种折磨 2021年的过敏性咳嗽，咳了半年 最后查出来说可能对冷空气过敏 医生说无法根治，只能自己注意 从此之后，即使不咳嗽，胸口也会隐约不舒服 就算夏日的下雨天，也会觉得快要复发 更何况冬日 今年冬天，我已经很久没有出门了 特别是新冠之后，出去一趟 又冷又热 冷的是呼吸道 热的是身体出汗 真的很不舒服 所以，我想搬去一个温暖一点的地方 海口，昆明，珠海 这三个地方是我的备选 有机会去那里走走 看看是不是适合我","link":"/2023/01/16/%E6%90%AC%E5%8E%BB%E4%B8%80%E4%B8%AA%E6%B8%A9%E6%9A%96%E7%9A%84%E5%9C%B0%E6%96%B9/"},{"title":"最近的失误操作","text":"最近操作失误了很多： 创成长低卖，本来长期仓位，由于自己心理原因：怕跌，给卖掉了，卖了之后一直涨。 上证50，深红利低卖高买，也是本来说好的长期持有仓位，却想着做个T，没想到白白把成本T高。 还没有出信号的时候，提前买入上证50，但是当天却没有信号，买后就跌。但是当天有信号的两个标的，没钱买，这两个标的反而大涨。一来一回损失不少。 总结一下原因： 第一、划定为长期仓位的，自己没有信仰，在看盘的时候就想去操作一把，就导致反向操作的发生。以后长期仓位的平时不操作，只在有买入信号和卖出信号的时候操作。 第二、坚定执行策略，按信号买卖，把自己当成机器人即可，减少甚至做到不看盘，减少突发奇想的操作。 以后计划： 补齐上证50，红利，深红利，创成长，双创的长期持有仓位，做股权现金平衡，只在策略信号发生时候操作 坚定执行策略，按照信号买卖 2022年8月23日更新截至今天，昨天错误买入的上证50，已经亏损1%，而如果买入新能车则盈利2.3%，一来一回损失3.3%收益率，啧啧。 2022年8月24日更新今天在-0.29%的时候认亏服输卖掉了，这一波总共损失3.59%的收益率，好吧，也不算太惨重，及时止损。今天幸亏卖掉了，收盘的时候上证50跌1.01%。 2022年8月25日更新MD今天早上也不知道哪里犯抽把红利在1%处给清仓了，后来涨了2.21%，我吐了，而且这个是长期仓位，为啥我要卖呢？？ 以后上面总结的两个原因和计划，切记切记。","link":"/2022/08/22/%E6%9C%80%E8%BF%91%E7%9A%84%E5%A4%B1%E8%AF%AF%E6%93%8D%E4%BD%9C/"},{"title":"有些东西真是违反直觉，实践方能出真知","text":"虽然这个道理很早就知道了，但是知道一个道理远不如你真正遇到的时候震撼 去年年初的时候搞了一套股票交易的趋势系统，截至到现在，这套系统有一些参数需要设定 而这些参数的设定一直都是我脑子里臆想出来的，并没有实际验证过 这次是我前天吃晚饭的时候，突然想到既然现在该有的数据都有，那为什么不去写份代码验证一下呢？ 所以花了一晚上写了一份回测代码，其实也不多，也就100行，不过组织测试数据比较麻烦，因为也有一年的数据了 搞定这些之后，开始运行，然后很快就发现我目前的参数设置和不设置基本没有区别，这让我有点吃惊，于是赶紧修改代码，准备把各种情况测试一下，找一下最优解是什么 跑完之后，我惊讶的下巴都要掉了，以前我觉得不可能赚到钱的参数组合，却在程序中得到的几乎就是最优解，而且广泛适合各种情况，甚至在12月到1月的这波快速下跌中还能挣到钱 我有点恍惚了，我以为是代码写错了，所以一遍一遍的逐句调试，发现它就是实际情况，它就是事实 我不禁感叹到：有些东西真是违反直觉，实践方能出真知！ 那个晚上，我半夜就醒了，心想既然睡不着了，那干脆起来把整个过程完整详细的过一遍，确定一下将来使用的最优参数组合。从凌晨4点多，一直搞到早上8点，我憋出了一篇类似毕业论文一样的文章，详细的记录了我是如何做参数选择的，有图有数据，可谓有理有据 终于，我要找的真相，我要找的东西就在这样的实践中找到了，要是我一直保持我的固有思想，只是用拍脑袋去做决定，一直不去用实践检验，那我可能永远都只能在真相附近兜兜转转了","link":"/2022/01/15/%E6%9C%89%E4%BA%9B%E4%B8%9C%E8%A5%BF%E7%9C%9F%E6%98%AF%E8%BF%9D%E5%8F%8D%E7%9B%B4%E8%A7%89%EF%BC%8C%E5%AE%9E%E8%B7%B5%E6%96%B9%E8%83%BD%E5%87%BA%E7%9C%9F%E7%9F%A5/"},{"title":"更稳定更小回撤的策略优化","text":"昨天晚上突发灵感，给策略加上了一条非常简单的优化，发现对于某些标的提升十分明显： 图中蓝线代表之前策略回测结果，红线代表最新的回测结果 可以看出在某些标的上提升非常明显，其他标的或者是略有提升，或者是略有下降，但是总体上这条优化属于可以纳入的范围。 优化做了什么其实非常简单，就是一个点：只要挣钱了，能卖就卖。 组合回测在各标的组合回测中: 主线标的组合仅做主线组合里，收益率似乎差异不大，但是就最近一次来说避免了大幅度的回撤 全标的组合全标的组合两者最终收益率也是差不多，但是优化后曲线更平滑，收益更稳定，回撤更小 对比以前的曲线： 拉长时间的主线标的组合从更长时间（18个月）跨度来看，收益率也是差不多的，主要差异还是在避免了最后一次回撤 总结总的来说，新的优化可以平滑波动，减少回撤。主要差异在于之前策略会博一个高开，这个高开经常会有比较大的幅度，体现在收益率曲线上就是突然的大幅提升。但是如果博失败的话，就容易有大幅度的回撤。所以在行情好的时候用以前策略会拿到更好的收益，在行情不行的情况下使用这个优化能取得更稳定的收益。 那么行情好坏有一个最容易判断的方法：买入就赚还是买入就亏，买入就赚，说明行情好，可以去博弈一下，买入就亏说明行情不行，保本出。 然后提升明显的标的，那就直接应用新优化，提升不明显的标的可以应用变通的策略，行情好去博弈，行情不好保本出。 按这一思路修改之后，果然有所提升，看来以后需要灵活判断了 整体而言应用新优化可以更好的做到稳定盈利，最小回撤。在目前这个初始积累阶段，还是更需要资金的稳定增长。","link":"/2022/10/09/%E6%9B%B4%E7%A8%B3%E5%AE%9A%E6%9B%B4%E5%B0%8F%E5%9B%9E%E6%92%A4%E7%9A%84%E7%AD%96%E7%95%A5%E4%BC%98%E5%8C%96/"},{"title":"构建你的投资体系","text":"作为一个普通人，最开始的时候需要通过工作不断的积累本金，应付结婚买房生子等等诸多事情，而这些事情都是相当耗费钱的。一旦度过这些所谓的“坎”，工作上也有了不断进步，收入逐渐提高，财富也慢慢的积累起来的时候，就是时候考虑如何用这些积累的财富去创造价值了。 使用资本去创造额外价值就是一种投资，但是投资是有巨大风险的，在没有清楚认识到这些风险之前，不要投资！你要做的就是构建属于你的投资体系！ 这篇文章我先介绍一下自己的投资体系，至于我是怎么一步一步的构建出来的，以后再说。 建立在股票基金上投资体系这件事情范围很大，涉及整个家庭的资金分配，最为人熟知的就是，标准普尔家庭资产象限图 我这里指的是狭义上的投资体系：股票基金这种高风险投资标的上建立的投资体系 基本原则首先我的投资体系里有几个原则： 不买股票，只买基金。其实对于我来说，我的投资体系是建立在基金上的。 建立自己的交易系统并且坚定执行。 体系结构我的投资体系分为 趋势梭哈 和 长期持有 两个部分，但是这两个部分共同点是基于一套交易系统。 这个交易系统是我花了一年时间打造的量化决策交易系统。 趋势梭哈趋势梭哈部分的主要理念就是利用交易系统的信号进行高抛低吸 分为 梭哈标的 和 打野标的 梭哈标的目前就是创业板相关基金，创成长，创业板50，双创，在买入的时候全仓买入。 打野标的就是其他一些宽基和行业基金：上证50，红利，深红利，科创50，能源，新能车，银行，农业，军工，旅游，有色金属。买入的时候只买20%比例。 如何做呢？就是在交易系统提示弱转强的时候买入，在提示强转弱的时候卖出，或者是根据交易系统的止盈条件进行卖出。 长期持有长期持有部分就是长期持有一部分宽基，在低位加仓，在高位减仓，其实总体上就是一个大波段的高抛低吸。 目前持有标的：上证50，红利，深红利，创成长 另外长期持有的一个目标就是积累足够的份额，足够的利润垫，每年赚取分红，红利ETF的分红大概在3%-5%之间，还是可以的。 总结我的投资体系大概就是如此，不必盯盘，因为有量化交易系统。不必焦虑，因为有投资体系。靠时间的力量，慢慢积累。","link":"/2022/08/08/%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84%E6%8A%95%E8%B5%84%E4%BD%93%E7%B3%BB/"},{"title":"明天大阳线","text":"有两个标的已经拿了9个交易日了，但是一直亏，真的今天我都想把他俩卖了，好来个解脱，但是交易系统说不卖，好吧，我忍住了。 我还是选择相信交易系统！ 现在情绪已经到最极端的时候了，所以我觉得明天大概率大阳线反转！ 不论这次结果如何，我都认了。 就这样。 —————————————— 2022.10.26更新 已经全部割肉卖出，失败了。辣鸡！","link":"/2022/10/20/%E6%98%8E%E5%A4%A9%E5%A4%A7%E9%98%B3%E7%BA%BF/"},{"title":"正念冥想","text":"最近看到一个关于冥想有意思的观点，让我有一种茅塞顿开的感觉。 众所周知，冥想一般都是打坐，然后集中注意力到我们自己的呼吸上，摒弃其他无关的想法，由此来帮助我们提升专注力。 但是想达到这样的条件似乎不太容易，比如家里没有安静的地方，没有充分的整块时间，可能一会有这个干扰，一会有那个干扰，让人很难集中注意力来做冥想。 但是这位up主提出了一个观点就是，所谓冥想，不一定就一定是要静坐二三十分钟，然后集中注意力到自己的呼吸上。在做任何事情都可以开始“冥想”，正所谓专注于当下，也就是专注于当下你正在做的事情上就足够了，比如： 你在路上走路的时候，就专注于走路本身，感受脚和土地接触的力量，感受自己的呼吸和心跳，感受自己出汗的过程，感受空气的流动和变化，排斥掉其他无关想法，这就是一种冥想。 你在做家务的时候，专注于家务本身。 你在倾听别人说话的时候，专注于别人说的话。 也就是说，在做任何一件事情的时候，专注于这件事情本身。 像古代的大僧大儒，为何喜欢扫地，为何喜欢园艺，他们其实就是通过这些事情来提升自己的专注力。 所以不一定非得形式化的静坐二三十分钟进行冥想，随时随地都可以“冥想”，因为我们的目的只是为了提升专注力，而不是冥想这一个形式。 P.S. 视频链接：没时间没条件冥想？都市忙人提升专注力必看","link":"/2022/03/14/%E6%AD%A3%E5%BF%B5%E5%86%A5%E6%83%B3/"},{"title":"构建基于 Python 的单元测试","text":"这篇文章记录了如何基于 Python 构建一个 Web 系统的单元测试，涉及一些基本和高级用法。 测试分类 单元测试：单个模块的测试 集成测试：多个模块的测试 功能测试：项目的功能测试 其实就是范围不同，单元测试仅是系统特定一部分的测试，功能测试是将系统作为整体进行测试，集成测试介于两者之间。 单元测试库最常用的是 unittest 和 pytest 继承 unittest 的 TestCase 类来组织单元测试 assert 语句用来检测是否符合预期，而 pytest 提供了一些更强大的 assert 方法 pytest 用来运行测试，它可以使用加强版的 assert，并且它完全支持 unittest 一个简单的单元测试123456789import unittestfrom fizzbuzz import fizzbuzzclass TestFizzBuzz(unittest.TestCase): def test_fizz(self): for i in [3, 6, 9, 18]: print('testing', i) assert fizzbuzz(i) == 'Fizz' 运行： 123456789(venv) $ pytest========================== test session starts ===========================platform darwin -- Python 3.8.6, pytest-6.1.2, py-1.9.0, pluggy-0.13.1rootdir: /Users/miguel/testingcollected 1 itemstest_fizzbuzz.py . [100%]=========================== 1 passed in 0.03s ============================ pytest命令比较智能，它会自动识别单元测试，它假定以这样的名字：test_[something].py 或者 [something]_test.py 命名的模块都包含单元测试。同时它也会搜索子目录。 一般来说，单元测试统一放到 tests 目录下，和应用目录隔离开。 测试覆盖率安装：pip install pytest-cov 运行 pytest --cov=fizzbuzz，可以针对 fizzbuzz 模块运行单元测试以及覆盖率 123456789101112131415161718(venv) $ pytest --cov=fizzbuzz========================== test session starts ===========================platform darwin -- Python 3.8.6, pytest-6.2.2, py-1.10.0, pluggy-0.13.1rootdir: /Users/miguel/testingplugins: cov-2.11.1collected 3 itemstest_fizzbuzz.py ... [100%]---------- coverage: platform darwin, python 3.8.6-final-0 -----------Name Stmts Miss Cover---------------------------------fizzbuzz.py 13 4 69%---------------------------------TOTAL 13 4 69%=========================== 3 passed in 0.07s ============================ 还有以下参数： --cov-branch 针对分支处理，有多少个分支就统计多少次 --cov-report=term-missing 表示以何种方式展示报告，term-missing表示在terminal上展示，并且会额外加上缺少测试覆盖的代码行数，另外一个常用选项是html 在html上展示报告，很清晰，常用。 可以添加注释 pragma: no cover 来跳过该块代码的覆盖率检测 测试参数化使用库 parameterized： pip install parameterized 12345678910111213141516from parameterized import parameterized# ...class TestLife(unittest.TestCase): # ... @parameterized.expand([('pattern1.txt',), ('pattern2.txt',)]) def test_load(self, pattern): life = Life() life.load(pattern) assert life.survival == [2, 3] assert life.birth == [3] assert set(life.living_cells()) == { (10, 10), (11, 11), (15, 10), (17, 10)} assert life.bounding_box() == (10, 10, 17, 11) 也可以使用列表推导式： 12345class TestLife(unittest.TestCase): # ... @parameterized.expand([(n,) for n in range(9)]) def test_advance_cell(self, num_neighbors): 支持多参数： 1234567import itertoolsclass TestLife(unittest.TestCase): # ... @parameterized.expand(itertools.product([True, False], range(9))) def test_advance_cell(self, alive, num_neighbors): 测试异常1234567891011import pytest# ...class TestLife(unittest.TestCase): # ... def test_load_invalid(self): life = Life() with pytest.raises(RuntimeError): life.load('pattern4.txt') Mockingmocking 就是劫持函数或者功能，可以控制返回值或者其他东西的一种功能。在测试中如果对某个函数已经有了详尽的测试，那么在这个函数被调用的地方，就可以用mocking功能，节约资源。 unittest 里的 mock 模块，可以使用 mock.patch_object() 来替换函数或者方法 123456789from unittest import mockclass TestLife(unittest.TestCase): # ... @mock.patch.object(Life, '_advance_cell') def test_advance_false(self, mock_advance_cell): mock_advance_cell.return_value = False # ... 测试 Web 应用最好将测试归集到一个继承 unittest.TestCase 的类里，这样可以公用 setUp 和 tearDown 方法，会有更好的性能，以及更方便。 WSGI 和 ASGI 都有特定的规则用于服务器如何传递到应用的请求。所以我们可以注入假的请求到应用上来模拟，而不用启动真正的服务器。这些 Web 框架都有所谓的测试客户端（test clients）来帮助实现单元测试，不需要任何网络，会向应用传递假的请求。如果 Web 框架没有提供的话，WSGI 应用可以使用 Werkzeug 库，ASGI 应用可以使用 async-asgi-testclient。 比如，Flask 框架可以直接使用自带的 test client: 1234567891011121314class TestWebApp(unittest.TestCase): def setUp(self): self.app = create_app() self.appctx = self.app.app_context() self.appctx.push() db.create_all() self.client = self.app.test_client() def tearDown(self): db.drop_all() self.appctx.pop() self.app = None self.appctx = None self.client = None Tornado 框架可以继承 HTTPTestCase or AsyncHTTPTestCase 类来实现，其中它自带了 HTTPClient 和 AsyncHTTPClient，可以直接使用： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475class BaseTestCase(AsyncHTTPTestCase): def setUp(self): super(BaseTestCase, self).setUp() self.db_session = test_session self.db_session.commit() self.cookie = SimpleCookie() def get_app(self): test_app = Application() return test_app def get_new_ioloop(self): return IOLoop.current() def get_url(self, path): full_path = super(BaseTestCase, self).get_url('/api/v1{}'.format(path)) return full_path def _update_cookies(self, headers): try: cookies = escape.native_str(headers['Set-Cookie']) self.cookie.update(SimpleCookie(cookies)) except KeyError: return def make_response(self, req, resp): response = Response() response.status_code = getattr(resp, 'code', None) response.headers = {k: v for k, v in list(resp.headers.items())} response.encoding = get_encoding_from_headers(response.headers) response.raw = resp response.reason = response.raw.reason response._content = resp.body if isinstance(req.url, bytes): response.url = req.url.decode('utf-8') else: response.url = req.url extract_cookies_to_jar(response.cookies, req, resp) response.request = req return response def send(self, url, method='GET', data=None, json_data=None, files=None, headers=None, **kwargs): if 'follow_redirects' not in kwargs: kwargs['follow_redirects'] = False request = Request(url=self.get_url(url), files=files, data=data, json=json_data) request_data = request.prepare() if headers is None: headers = {} headers.update(request_data.headers) cookie_sting = '; '.join([f'{key}={morsel.value}' for key, morsel in self.cookie.items()]) if cookie_sting != '': headers.update({'Cookie': cookie_sting}) resp = self.fetch(url, method=method, headers=headers, body=request_data.body, allow_nonstandard_methods=True, **kwargs) self._update_cookies(resp.headers) response = self.make_response(request, resp) self.db_session.rollback() return response def get(self, url, **kwargs): response = self.send(url, method='GET', **kwargs) return response def patch(self, url, files=None, data=None, json_data=None): response = self.send(url, method='PATCH', files=files, data=data, json_data=json_data) return response def post(self, url, files=None, data=None, json_data=None, **kwargs): response = self.send(url, method='POST', files=files, data=data, json_data=json_data, **kwargs) return response def put(self, url, files=None, data=None, json_data=None): response = self.send(url, method='PUT', files=files, data=data, json_data=json_data) return response 测试 html 内容没必要全部 match 去做测试，而是可以检查一部分内容是否存在，比如提交按钮是否存在于 html 中，而忽略其顺序等无关信息。 1234567891011def test_registration_form(self): response = self.client.get('/auth/register') assert response.status_code == 200 html = response.get_data(as_text=True) # make sure all the fields are included assert 'name=&quot;username&quot;' in html assert 'name=&quot;email&quot;' in html assert 'name=&quot;password&quot;' in html assert 'name=&quot;password2&quot;' in html assert 'name=&quot;submit&quot;' in html 这样的方式也适合于其他数据量比较大的测试，只需要测试关键部分即可。 提交表单主要问题在于 CSRF token 怎么处理，可以先发一个 GET 请求，然后拿到 token，再去提交表单，这是一种方法。另一种方法就是在测试中禁掉 CSRF 的保护。 1234567def setUp(self): self.app = create_app() self.app.config['WTF_CSRF_ENABLED'] = False # no CSRF during tests self.appctx = self.app.app_context() self.appctx.push() db.create_all() self.client = self.app.test_client() 测试表单验证根据表单验证失败返回的语句进行判断 12345678910def test_register_user_mismatched_passwords(self): response = self.client.post('/auth/register', data={ 'username': 'alice', 'email': 'alice@example.com', 'password': 'foo', 'password2': 'bar', }) assert response.status_code == 200 html = response.get_data(as_text=True) assert 'Field must be equal to password.' in html 测试需要登陆验证的页面有以下几点： setUp 方法初始化用户 login 方法 完成对应测试 Example: 123456789101112131415161718192021222324252627282930313233343536373839# ...import reclass TestWebApp(unittest.TestCase): # ... def setUp(self): self.app = create_app() self.app.config['WTF_CSRF_ENABLED'] = False # no CSRF during tests self.appctx = self.app.app_context() self.appctx.push() db.create_all() self.populate_db() self.client = self.app.test_client() def populate_db(self): user = User(username='susan', email='susan@example.com') user.set_password('foo') db.session.add(user) db.session.commit() def login(self): self.client.post('/auth/login', data={ 'username': 'susan', 'password': 'foo', }) def test_write_post(self): self.login() response = self.client.post('/', data={'post': 'Hello, world!'}, follow_redirects=True) assert response.status_code == 200 html = response.get_data(as_text=True) assert 'Your post is now live!' in html assert 'Hello, world!' in html assert re.search(r'&lt;span class=&quot;user_popup&quot;&gt;\\s*' r'&lt;a href=&quot;/user/susan&quot;&gt;\\s*' r'susan\\s*&lt;/a&gt;\\s*&lt;/span&gt;\\s*said', html) is not None 测试 API 服务器比较简单，因为 API 接口第一涉及范围小，第二返回基本上都是 JSON，容易解析。 123456789101112def test_api_register_user(self): response = self.client.post('/api/users', json={ 'username': 'bob', 'email': 'bob@example.com', 'password': 'bar' }) assert response.status_code == 201 # make sure the user is in the database user = User.query.filter_by(username='bob').first() assert user is not None assert user.email == 'bob@example.com' 参考 How to Write Unit Tests in Python, Part 1: Fizz Buzz How to Write Unit Tests in Python, Part 2: Game of Life How to Write Unit Tests in Python, Part 3: Web Applications","link":"/2022/08/10/%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8E-Python-%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"title":"用cookiecutter来创建一个自己的代码模板","text":"最近工作上要新建一个项目，又要搬运一些重复代码，这件事情想想都让人有点sick，于是想到搞一个代码模板多好，以后新建项目直接把相关信息一填，直接生成出新的项目，所以想到了cookiecutter。 cookiecutter以前很早就用过了，比如cookiecutter-tornado，cookiecutter-flask 用这些模板生成出来的项目你就会感觉到什么叫做最佳范式，想必大家都读过最佳实践之类的书或者文章吧，这种最佳实践的确会让人感觉很舒服。 Github上其实有很多模板项目，比如上面的tornado，flask，最新的fastapi也有，但是这些都不太满足我的需求，因为我们公司有很多自己定制化的代码，而且我们是前后端分离的，项目也不需要那些前端模板项目。 因此是时候搞一个自己的模板项目了，其实搞一个模板项目很简单，只是个体力劳动。 cookiecutter其实就是利用模板渲染，把需要替换的字符串写成jinja2的形式：{{ project }}，然后cookiecutter执行的时候就是把你在cookiecutter.json预定义的变量在代码里替换一下。非常简单是不是？ 首先随便在Github上找一个现成的模板项目：full-stack-fastapi-postgresql 把这个里面除了{{cookiecutter.project_slug}}目录，都拷贝到你自己的项目里 然后开始修改里面的cookiecutter.json，这里面的变量需要的可以保留，不需要的删掉即可，也可以新加上自己需要的。 然后就是从一个已有的项目把代码复制到{{cookiecutter.project_slug}}目录里，复制完成之后就开始最累人的部分，将在cookiecutter.json定义的变量替换到代码对应地方，比如这样： 123456789import hashlibimport uuidimport peeweefrom fastapi_permissions import Allowfrom playhouse.postgres_ext import BinaryJSONFieldfrom {{ cookiecutter.project_slug }}.common.enums import Rolefrom {{ cookiecutter.project_slug }}.models import BaseModel 所有需要变量替换的地方都写成{{ variable }}的形式，替换完成之后，利用模板生成一个项目，看是否有问题，直到修改的没有问题，大功告成。","link":"/2022/07/29/%E7%94%A8cookiecutter%E6%9D%A5%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"},{"title":"牛市来了？","text":"最近这段时间，股市特别是沪深300，上证50这些白马股比较多的指数，已经上涨了很多了，俨然一股牛市的气氛。而且创业板指数在2023年开年第一个月就上涨了快10%，叠加港股的连续逼空上涨，真的让人们有点心潮澎湃了。 不过我自己的FIRE基金却没有跟上涨幅，11月，12月表现平平无奇，上涨不到1%，1月份表现稍好，但也是跑输指数。 这对于我这个策略来说，非常正常，因为策略的超额收益并不是来源于牛市，而是来源于熊市。这其实很好理解，因为我买的就是这些指数，所以在牛市连续上涨的时候，大概率是跑输大盘，跑输指数的。而超额收益来源于熊市的原因是在熊市下跌的时候，我能保持少跌甚至不跌。这样假以时日，肯定是可以实现最小回撤，稳定复利的目标的。 上图是从8月到现在的收益曲线对比图，可以看到实盘和策略表现出现差异就是在9月份和10月份的时候，这两个月没办法，打野把人打残了，总之是没有完全按照策略来走。而11月，12月又没有收益，所以实盘整体上是跑输策略，跑输大盘的。 嗯，确实投资不是一件简单的事情，也不会存在所谓的投资圣杯，只能说是在战斗中不断打磨。从也许能成，到基本能成，再到稳定能成。这一过程都是需要去经历，去不断总结的。 春节假期快过完了，股市也即将开盘，我又加仓了40%的仓位，因为我相信现在已经进入了稳定能成的阶段，获取收益已经是手到擒来。 春节后，将会每日更新净值，每季度出报告来总结，来思考是否有提升和改变的地方。 Go! For FIRE Life!","link":"/2023/01/26/%E7%89%9B%E5%B8%82%E6%9D%A5%E4%BA%86%EF%BC%9F/"},{"title":"能否武统","text":"不管今晚怎样，反正白天先吃了一记闷棍——亏损2% 😨 目前看到各路消息，似乎一副马上开战的样子 但是我觉得吧，打应该打不起来，那么就有两个分支： 佩洛西不敢去台湾，那双方都当无事发生，不过这也说明美国影响力在下降，但是最开始美国没说要访问台湾，只是台湾媒体渲染起来的，那最终输家就是台湾。 佩洛西前往台湾，我国战机伴飞，飞跃台湾本土，这是另一个突破，输家也在台湾。 总之，我们都是赢了。 那么明天能不能阳包阴，来个大涨！","link":"/2022/08/02/%E8%83%BD%E5%90%A6%E6%AD%A6%E7%BB%9F/"},{"title":"要当爸爸了","text":"媳妇怀孕现在快5周了，之前早孕试纸已经测出来了，今天去医院做了个B超，显示宫内孕，但是还属于比较早的时期，医生让2周后复查。 今年可算是事情比较多的一年了： 交房装修，花钱费力（主要还是精力） 房子租不成了，又得换 怀孕 而这些都得一个人扛着，现在周末我就下厨房给媳妇做饭，还有考虑各种营养搭配，饮食也要健康。今天食谱：早上燕麦杂粮粥+饼+煎鸡蛋+生菜，下午面条+西兰花+胡萝卜+青菜+荷包蛋，晚上蒸了红薯和小南瓜。 目前还未决的事情有： 装修：卡到柜子这里了，等柜子来一装，门一装，插座灯装好，基本就差不多了。不过现在家具还没买，抽空还得去看看。 租房，确定了一家，130平一月4000块，但是家具简单，床是铁艺床，主要是考虑怀孕期间家里通风得好，然后家具少甲醛等有害物质也少。不过得等到9月10日才能搬，最近就先在这里继续狗着吧。 怀孕，最主要是保证媳妇的饮食健康，营养全面，至少得自己做饭吧，做一顿两顿好说，一直做饭洗碗，啧啧，是个挑战。最近疫情又开始肆虐，不知道什么时候是个头，疫情在平时倒也没啥，现在媳妇怀孕期间，就得特别小心了。 将来孩子出生了，就要做抉择了，如果公司能让我在家办公，就可以请一个保姆帮忙打理，要是不行，只能自己上了。经济问题只能期待A股了，希望FIRE基金能够稳定收益才行。哎，走着看吧。","link":"/2022/08/21/%E8%A6%81%E5%BD%93%E7%88%B8%E7%88%B8%E4%BA%86/"},{"title":"该去医院了","text":"不仅仅是之前的早醒以及早醒后睡不着，最近这两天连续两天做噩梦，第一天的梦是回老家了，真的无论是现实还是梦中回老家，我都是精神紧张，非常疲惫。 而昨天晚上的梦更加严重，直接开始鬼压床了。 昨晚上大概10点钟开始睡觉，睡着我估计10点半，到1点15的时候第一次醒来，去上了个厕所，排量比平时多一倍，也许是水喝多了，哦对晚餐喝了一大碗小米南瓜粥，然后好像还喝了一杯水。 然后回来继续睡觉，这一次就开始做噩梦了，还是一个嵌套梦，梦中梦，梦见我躺在床上做梦，梦见我躺在床上，然后有各种类人类鬼的东西在客厅，然后我就起来去打架，后来发现是一场梦，然后嵌套的第一层的我，也发现了客厅有类人类鬼的东西，然后出去干架，发现是自己跟自己打架，然后现实的我特别想起来，睁开眼睛看一看，客厅到底有没有东西，有没有危险向我靠近，但是睁不开眼睛，也动不了，在挣扎了很久之后，终于逃脱出来，睁开了眼睛，这时候3点钟左右。 下来就不像之前那么容易睡着了，我估计挨了三四十分钟，睡着了，当然也是浅睡眠，这个时段的梦大概就是老家的事情，让我焦心，这个梦现在没啥印象了，主要还是前一个梦太吓人，太费脑子，太令人印象深刻了，这次睡着醒来大概是6点40分。 真的，这一觉睡的我真的很累，这两天的觉睡的我都很累，真的有点扛不住了，现在都能感受到心跳声，整个身体都很沉重。 不行了，真的该去医院了，好怀念能一觉睡到天亮的时候。 唉。","link":"/2022/10/12/%E8%AF%A5%E5%8E%BB%E5%8C%BB%E9%99%A2%E4%BA%86/"},{"title":"清醒地活","text":"2022.11.17 日 真正的个人成长应该超越你自身存在问题且需要保护的那部分。 一个人内心的成长完全取决于他能否认识到，获得平静和满足的唯一途径就是停止考虑自己。 必须要打破一种思维习惯，即认为解决问题的办法在于重新安排外部事物，要永久性的解决你的问题，唯一的办法就是深入你的内心，让似乎总是与现实格格不入的那一部分的你得到解脱。 2023.2.7 日更新 看了第二部分 体验能量，感触良多 的确，我从小就是一个比较封闭内心的人，记得小时候如果我觉得不高兴，不开心，我就会把自己锁到一个房间里，关闭门窗，任谁来叫我都不开门，我就呆在这个房子里，一呆好几个小时。 到了后来上班，当有人走到我跟前，我就神经紧张，这也是封闭内心的表现。 所以我非常疲惫，非常累，就是因为我把能量都用来保护自己了。 书中写道，如果你一味的保护自己，你将永远不会自由。 如果你关闭了自己，你就会把这个恐惧而没有安全感的你锁在自己的心里。这样做，你将永远不会自由。 2023.2.9 日更新 最开始是在去年11月开始读这本书的，但是中途断了，这次辞职在家就开始读书，不到一个星期，就读完了，受益匪浅。 而且这本书里阐述的观点和我以前看到有些东西也是有异曲同工之妙，比如之前的文章：人生的松弛感 这篇文章就是说不论遇到什么事，都要保持松弛，没有什么大不了的。这就和书中的所说要做一个观察者，让思想能量从内心流过，而不是阻碍它，要放手一个意思。 这本书最后一章还提到了道德经，这让我感到惊喜，果然智慧都是互通的。我爸现在就在研究这些，没事还会跟我聊一聊道德经，有时间我也得去读一读。 清醒地活：放手，让一切经过你，不管是想法还是情绪。以高度觉知为基础，不做抵抗，开放内心，常常放手，以此走上超越自我的生命之旅。 很好的一本书，值得一读。","link":"/2022/11/17/%E6%B8%85%E9%86%92%E5%9C%B0%E6%B4%BB/"},{"title":"节假日策略","text":"其实一直很疑惑，有的节假日只有三天，也没有调休，也就是比正常周末多了一天，但是处理上还就是跟周末不太一样，不知道什么原因。 目前策略执行上，遇到节假日就清仓，到节假日结束后再决策上车，其实就相当于节假日将之前的所有状态推倒重来。 节前节后均有买入信号在积累了快2年的数据后，发现有一些不一样的地方： 有时候标的会在节假日前一天发买入信号，这就和节假日策略冲突了，按节假日策略这一天是要卖出的，所以就忽略了这一天的买入信号。 到了节假日结束的第一天交易日，按照策略也发了买入信号。 问题就出在这里，我发现在这种情况之后几天跌的概率更大一些，执行这样的买入信号，大概率是要亏损的，止盈也没法做。 也就是说，我们不能简单的忽略节假日前一天的买入信号，它跟节假日后的表现是有联系的，节假日策略简单的推倒重来可能是有问题的 所以我们对策略做一个简单的修复：如果节假日前一天出现买入信号，那么忽略节假日后第一个交易日的买入信号 回测如下，蓝色是修复前的曲线，黄色是修复后的曲线 可以看到在仅有的数据里，这个修复还是奏效的，可以避免回撤。 虽然数据不多，但是至少没有起副作用，我觉得这个修复可以应用到目前正在运行的策略之中。 很巧的是，今天光伏ETF发了买入信号，那让我们拭目以待假期后光伏ETF的表现吧。 执行节前一天的买入信号？那如果是我们执行了节假日前这一天的买入信号呢？ 回测如下，蓝色是修复前的曲线，黄色是修复后的曲线 可以得到以下结论： 第一，可以抑制节前节后一天都有买入信号的这种情况带来的回撤。这也是很显然的，因为节前一天有买入信号，节后一天也有买入信号，那肯定是节前一天买入更好，然后节后一天止盈卖出，没毛病。 第二，在其他标的上，明显可以看出修改后的收益曲线落后修改前的收益曲线。这种情况是因为节前一天有买入信号，但是一般经过一个假期，基本上都是要推倒重来的，所以节后表现可能不太行，也没法做止盈，导致亏损。 所以呢，这个改动不会加入现有策略。 假期长短有没有影响？继续做修改，如果假期长度大于3天，那么就忽略节前一天的这个买入信号（也就是3天假期，节前买入信号可以执行），回测如下 如果假期长度大于4天，忽略节前一天的买入信号（也就是如果假期长度为4天就会导致节前的买入信号是个假信号，容易造成回撤），回测如下： 可以看到，如果假期是3天，节前一天有买入信号，执行的话也没啥问题。可以抑制节前节后一天都有买入信号的这种情况带来的回撤，而且也不会影响其他标的，不会出现第二种情况修改导致的回撤。 那么可以得出一个结论，假期长短是有影响的，也许3天的假期约等于周末，这样的节前一天买入信号是可以执行的。 另外相应可以得出的结论就是，如果假期大于3天，那么节后一天的买入信号就可以执行。 总结上面的结论怎么说呢，其实不是特别可靠，毕竟数据太少，但是由此我们可以隐约的感受到节假日和股市的一些关系。 具体如果要执行到现有策略的话，激进的可以采取假期小于等于3天，那么节前一天的买入信号可以执行。保守的话就是，假期小于等于3天，那么节后一天的买入信号直接忽略。","link":"/2023/01/20/%E8%8A%82%E5%81%87%E6%97%A5%E7%AD%96%E7%95%A5/"},{"title":"车水马龙才是国泰民安","text":"楼下的街道一片萧瑟，偶尔会有几辆车经过，行人基本上见不到，因为都已经静默在家了。 有句话说的好啊：车水马龙才是国泰民安，什么时候能恢复往日的热闹，什么时候这个国家才算正常。 新冠疫情三年，现在愈演愈烈，并不是说病毒变得更厉害，而是现在有一种态势：为了防疫而防疫，除了新冠，其他都不是病 这很可怕，因为其中就会产生各种病态，疯狂 我们能做点什么呢，除了照顾好自己的家人之外什么也做不了","link":"/2022/11/26/%E8%BD%A6%E6%B0%B4%E9%A9%AC%E9%BE%99%E6%89%8D%E6%98%AF%E5%9B%BD%E6%B3%B0%E6%B0%91%E5%AE%89/"},{"title":"这世上没有救世主","text":"回老家呆了一个星期，前天灰溜溜的回来了，每次剧本都是一样，最终都是我妈开始发飙，然后大吵一架，然后我离开老家回西安。 这次当然略有不同，还不等最终大吵一架，就在我妈开始发飙的时候，我就已经准备好走了。至于她为什么发飙，我不知道。 家里真的是非常压抑，从小到大都是，至于说是我爸的原因还是我妈的原因，我觉得可能都有，相辅相成吧，但是最终受害的是我。 我觉得一个家里不应该因言获罪，也就是说你不能因为说了什么就突然生气，大发脾气，要不然没人敢说话了。说话只要不涉及原则问题，想说什么就说什么，畅所欲言，这样才能更好的沟通。 我家呢，我从小就不敢说话，所以我跟父母之间严重缺少沟通，但是当我鼓起勇气尝试交流的时候，我发现其中的沟壑已经很深了。 小时候我很羡慕我表妹，因为她想说啥就说啥，想干啥就干啥，我父母还夸人家开朗，我当时心里就想你咋没看家庭氛围有多么大的差异呢。 另外，一个人的表现应该是可以预期的，这样才能有一个和谐的氛围。 可预期就是指，我说了什么话，做了什么事对方的反应是我能猜到的。否则，我本来好好说一句话，你突然发脾气了，我都懵逼了。 在我家呢，我觉得是没办法预期的，比如我不知道说什么，做什么就会突然让我妈发飙，让我爸生气。所以回到家我得谨慎小心，小心翼翼，心理压力非常大。 以前呢，我还妄想去改变这一切，最后我身心俱疲，才发现我根本无能为力，所以现在，我只有逃避。 前几天我妈发飙的时候，问了我一句话，问我下来生活该怎么过，我本来想说，你和我爸好好生活，我呢也自己生活，这样才是最好的。但是我没能说出来，感觉有点伤人。 其实，有时候一想，我爸妈也很可怜，但是我真的没办法，能力有限，连自己生活都没法过好，我怎么办。 也许这就是命运，唉。 这世上没有救世主，只有自己才能救自己。","link":"/2022/12/29/%E8%BF%99%E4%B8%96%E4%B8%8A%E6%B2%A1%E6%9C%89%E6%95%91%E4%B8%96%E4%B8%BB/"},{"title":"进度条 40%","text":"宝宝 18 周了，媳妇说能感受到宝宝胎动了，真的有点神奇啊。 但是在期待的情绪之外，还有一点点担心，担心能不能好好照顾媳妇和宝宝，能不能教育好宝宝，能不能做一个好爸爸。 离十字路口越来越近，很快就要作出决定了。 加油。","link":"/2022/11/15/%E8%BF%9B%E5%BA%A6%E6%9D%A1-40/"},{"title":"雨天漫游","text":"周日无事，跟媳妇开着车随便逛 我们老家的洋芋片夹馍，香太太。 馍中有乾坤，一馍一世界～","link":"/2022/08/29/%E9%9B%A8%E5%A4%A9%E6%BC%AB%E6%B8%B8/"},{"title":"赚钱模式","text":"昨晚上跟我媳妇讨论了一下这个问题，感觉挺有趣的，所以记录一下。 首先我们赚钱模式归因为三个变量，时间，赚钱次数，钱的规模。 所谓时间，很好理解，就是你为了赚这个钱自己实际付出的时间。 赚钱次数，就是你花这一份时间能赚多少次钱，比如打工的人一份时间就只能赚一份钱，而写书的一份时间创作一次就能赚多份钱 钱的规模，打工人或者是写书的赚钱规模都是固定的，因为工资是固定的，每本书的价格也是固定的，虽然随着时间都会增长，但是幅度相比起来其实很小，所以可以忽略掉。而对于做投资的这种，钱的规模变大的速率会更高。 由此我们总结了大概五种赚钱模式，以下一一列举 一份时间一份钱的零售模式 时间: 1 赚钱次数: 0~1 钱的规模: 1 这种是最基础的，也是最赚不到钱的赚钱模式。 你花了一份时间，只能赚到一份钱，而这份时间的出卖是没有保证的。类比于实际，就是打零工，你的这份时间只能按一段一段的去零售，有人买你才有钱赚，没人买你就没钱赚，饱了这顿没了下顿。 所以这种模式累积钱的速度是非常慢的，因为不仅单位时间的钱比较少，而且单位时间也可能是无效的，积累不到任何钱。 一份时间一份钱的批发模式 时间: 1 赚钱次数: 1 钱的规模: 1 这种模式是对应于大部分普通打工人的赚钱模式。 不同于上面的零售模式，批发模式相当于你把时间批发卖给了公司，老板，然后公司按照月来给你发工资，这不就相当于把时间打包批发卖出去了。 这种模式相对于零售模式就是避免了无效时间的产生，你的每一段时间都会创造价值，只不过一份时间还是只对应一份钱。相比于零售模式，积累钱的速度有了明显提升。 一份时间多份钱 时间: 1 赚钱次数: n 钱的规模: 1","link":"/2022/02/10/%E8%B5%9A%E9%92%B1%E6%A8%A1%E5%BC%8F/"},{"title":"睡眠问题寻踪","text":"我现在怀疑身体上的诸多问题都是源自睡眠问题，而不是说睡眠问题最开始是来源自身体问题，因为身体每年都在体检，而且也没有什么不适，我觉得睡眠问题最开始的来源应该是压力（工作压力，家庭压力）？所以找到最开始出现睡眠问题的时候是一个重要的提示点。 关于睡眠，现在的状态就是入睡没啥问题，肯定能睡着，但是中途会醒来，最开始的时候大概率是在晚上3点钟，晚上只醒一次。但是现在频率越来越高，甚至一晚上醒来两三次，而且每次醒来后入睡非常困难。 2020，2021，2022年这三年因为离的比较近，所以记得比较清楚，这时候已经有明确的，经常性甚至每天的早醒了，集中在3点钟。 2022年感染新冠后，早醒次数甚至到2-3次，每次醒来后更加难以入睡。 2019年19年12月10日的一篇文章中记载了我 “昨晚3点醒来，好久一段时间却没有睡着，脑子里在回忆以前的种种” 确实后面大部分早醒都是集中在3点钟，据说人的睡眠周期是1.5小时，我那时候一般是22～23点睡觉吧，按这个推算，我大概是22:30入睡，22点上床。 嗯，差不多，因为我跟我媳妇聊过，我俩的睡觉时间算是挺早的了。 所以19年的时候应该已经开始睡眠出现问题了，再看看是否有更多的证据。 《我是怎么锻炼我的腰的》这篇文章中写道：“这样一直持续到了2019年6月检查出腰椎间盘突出。”，那看来19年主要是在自己治疗腰椎间盘突出，我记得当时每天下午下班之后都会做一些康复运动。这篇文章是19年10月写的。 在旅行游记《关山草原》里面写道：“第二天早晨我起了个大早，雾气还未散去，一股朦胧美袭来”，那时候是搭帐篷，厕所离的老远，我肯定没有半夜醒来，要不然就得上厕所去了，不过那天晚上睡觉都1点钟了，而且是在外面，可能不太有说服力。这时候是19年7月。 在《杂谈一》里面写道：“目前的状态就是完成工作，剩下的时间就是磨洋工，等待下班，下班之后也没法继续学习，因为身体疲惫，进而引发了恶性循环。”，这时候我工作上已经出现问题了，每天在办公室都很疲惫，腰不舒服，眼睛不舒服，脑子也不舒服，下班回家还非常疲惫。当时已经在计划远程工作去一个小镇生活了。这时候是19年5月。 19年的时候因为媳妇对工作也不甚满意，我也觉得相当疲惫，所以产生了我找一个远程工作，然后到小镇上生活，称为小镇计划。本来打算2020年年后就找远程工作的，没想到一场疫情，让这个事情拖了3年，甚至我已经忘了。 所以说明，那时候其实身体已经亚健康，甚至已经出问题了。 在旅行游记《汉中油菜花》里面写道：“早上5点半起床，老婆平时都是赖床的，这天早上貌似有点激动比我起的还早，闹钟还没响就起来了🤣。” 那说明我当时能睡到闹钟响？不过我印象里我那时候也挺激动的，其实我只是装睡，实际上没睡着，等闹钟响呢。这时候是19年4月。 2018年18年7月10日我在在v2ex发表的一篇帖子，我说：“非一线城市程序员，965，但是感觉每天上完班身体都被掏空了，眼睛疲劳，腰疲劳，脑子疲劳，感觉就想像一滩烂泥一样躺在床上，不是工作压力，而是坐在那里就累。。。” 那看来工作出现问题的时间还能再往前推，我是17年12月入职的，那是因为公司整体给我带来的压力太大？ 对我想起来了，当时还是和媳妇约会，每天晚上下班后我都特别累，就想回家睡觉，但是那时候睡觉肯定太早了，而且也睡不着，所以就回家打游戏，媳妇还因为这跟我吵过架。 另外18年刚入职的时候有一些有挑战的任务，我回家之后晚上还在研究，说明当时精力还算充沛？ 18年当时还有一个朋友和我一起合租，据他现在所说，当时有起夜，但是只是偶尔。 那说明睡眠障碍这个问题也许就是从18年开始的。 18年下半年的时候当时主要的问题在于腰的问题，当时开车哪怕10分钟，腰右侧也会有酸疼，直到9月底拖了一次地，直接就瘫到那里了，整个18年国庆就是在恢复腰。 2017年17年的时候有一段时间是骑自行车上下班，记得下班和白肖拥一起骑车回家，晚上我们还在外面撸串。而且当时租的房子两个卧室只有一个卫生间，离每个房子都比较远，我想当时应该没有半夜醒来的情况。周末早晨我都是定的闹钟七八点起床，然后去学习看书的，以这种精力要是晚上睡眠不好，那肯定坚持不下来的。不过还是得找一下证据？ 对，印象中还有过迟到的情景，当时因为坐公交车早上太挤，而且有时候还坐不上，所以我当时是骑自行车上班，按理说通勤时间都是固定的，但是我还是有时候会迟到，说明就是起来迟了。那时候还需要定闹钟，说明睡眠还行。 当时上班，开早会的时候，我就在门外等着，不让他们看到我迟到。。当时上班比较轻松，我基本都是在看书学习，中午还能在床上睡一觉，那时候压力应该很小。 2016年我在想最开始肯定是没有出现中途醒来睡不着的情况的，比如16年的时候，那时候我还有印象的一次是从下午四五点睡到了第二天早上九十点，这一觉差不多20个小时。 16年的文章里还写道：“手机绝对不能带上床，闹钟的话手机放在下面闹钟响了就下床，不要睡懒觉。”，那时候还在学校住，上床下桌，那时候还针对睡懒觉做了要求，哈哈哈，这时是16年1月。 2015年翻以前的文章，其中写道：“今天早上去上课又睡过头了，最近是疲惫还是怎么滴，反正闹钟响了以后，又给睡着了。”，这时候是15年9月14日，读研究生期间。看来以前我也是需要定闹钟的呀。 而且15年的文章里没有“醒”这个关键词，说明那时候没有出现过半夜醒来的情况，否则肯定会记下来。 家庭压力？我想应该不是家庭压力导致的，要说瞬时压力大小，我想莫过于2015年末-2016年了，那时候要博士退学，我记得跟家里吵了很多架，而且自己也想了很多，但是我还是能保证精力和时间来学习编程，努力转行。而且家庭压力不是说突然来的，从我记事起，它一直存在，我小时候甚至想过自杀。 所以家庭压力应该不是关键因素，否则我在2016，2017年就应该已经开始失眠了。 而在工作的这段时间，带来的是持续压力，每天都会有的，所以每天都很累。 家庭压力其实只是在面对家庭的时候才会有，包括退学也是一样，虽然持续时间挺长的，但是做决定和面对只是那几天的事情，甚至就是那一天和导师坦白的时候，只要说出来了，就没有那么多压力了。 猜想压力也会导致内分泌失调，激素分泌紊乱，比如肾上腺疲劳，这是我每天都很疲劳的原因。 压力导致的睡眠问题进而导致免疫力紊乱，也许这就是我2021年咳嗽半年，而且一直没有痊愈，2022年12月感染新冠后再次复发。说的是身体处于高敏状态，其实就是免疫力紊乱了。 而激素和免疫力又有不可分割的关系。 看来破局就在工作这件事情上了。","link":"/2023/01/30/%E7%9D%A1%E7%9C%A0%E9%97%AE%E9%A2%98%E5%AF%BB%E8%B8%AA/"},{"title":"我辞职了","text":"昨天去公司正式确定了辞职这件事，但是公司还挺好的，给我了停薪留职的机会，6-9个月的时间，如果还不想工作的话，那就办离职手续，正式离职。 这让我想起了当初选择不读博士的时候，也是先申请了半年的休学，去外面工作了半年，休学期满后，我又回去读博了，但是没过1个月，我就呆不下去了，所以就正式退学了。 辞职原因关于辞职这件事情，我是做了不少准备的，无论从经济上，心理上。但是最直接导致下定辞职决心的还是最近的身体状况，咳嗽+失眠+整日的疲惫，以及没有精神和动力。 整日疲惫在2018年，也就是刚入职公司不到半年时间就已经出现了，一直到现在，每天都很累是我的常态。最近在看《免疫功能90天复原方案》这本书，里面提到压力可能会导致肾上腺疲劳，从而导致对应的皮质醇激素分泌异常，分泌减少之后会导致免疫系统的杀手T细胞过分活跃，从而导致免疫问题。而肾上腺疲劳也会导致整个人很累。 而我的睡眠早醒问题，估计也是因为压力导致的，因为在2018年之前应该是没有遇到过的。 那么问题来了，工作上有什么压力呢？ 关于工作现在我就职的这家公司是我毕业后工作的第三家公司，但是是我第一家正经上班的公司。 第一家是一家主要业务在美国的远程工作，所以你想在哪里工作就在哪里工作，曾经有段时间，我还会去咖啡馆工作，主要就是为了体验。在这家公司工作的主要压力来源于自己太菜了，所以要想办法提高自己；另外一个压力来源就是你得时刻盯着手机，以防别人找你，毕竟远程工作。 第二家是一家刚刚创业的小公司，公司是在居民楼里租了一户，两室一厅吧。小公司嘛，各项都很随意，而且我们西安的主要就是技术人员，也没有人管，而我呢，找了一个房子自己独自呆着，每天除了工作之外，就是读书学习。 而现在这家公司就是我第一家正经上班的公司，早10晚7，坐班，正经办公室，正经（技术良好，操作规范）的同事。所以呢，从一开始，我就有一定的心理压力。首先就是我要确保不能被开掉，因为我不够自信，我觉得自己太菜了，所以入职之后，我很用功，当然表现也不错，提前转正。 虽然如此，我仍然小心谨慎，兢兢业业，工作上依旧很努力，很用心，所以这些方面就消耗了很多心力。当然了，工作也不是无穷无尽的，当我完成任务后，没有新任务的时候，我就不知道该干嘛了，这时候我反而觉得压力比有工作任务的时候更大。因为我想看点别的，划水摸鱼，那我还得抽出精力查看我周围是否有人来，这样就会让我非常累，甚至比工作时候还累。 就这样的工作持续了仅仅半年之后，我就在文章写道整个人非常累，非常疲惫，就像一滩烂泥一样。所以可以想象得到，这样的状态持续5年之后，身体会是什么样子。 改变？在我自己网站的记载中，19年的时候，也就是工作一年后，我就考虑换工作了，想换一份远程工作，因为我觉得远程工作更自由，想干啥就干啥，而我又是一个很自律，效率比较高的人，这样高效完成工作之后，剩下的时间想干嘛就干嘛，学习提高，划水摸鱼都不在话下，心理压力自然小很多，这种心理压力其实就是内耗，无谓的内耗——消耗自己。 但是我没有勇气辞职，第一我觉得自己水平依然太菜，找不到一个合适的远程工作。第二，当下就职的这家公司其实也蛮好的，主要的问题还是我的心理问题，我的自卑心理。 所以一直拖，从计划的19年年后，到20年年后，但是意想不到的事情发生了，那就是19年年底的新冠，直接就实现了我的远程工作愿望。 远程工作能否拯救我？答案是没有太大的用处，我想可能有以下几方面的原因。 第一，远程工作并不是救命神药，因为远程工作之后还会有新的内耗产生，就是我需要时刻带着手机，时刻操心着是不是有人来找我，我要及时回复。 第二，我升职了，我需要带项目组，不仅要操心自己的代码产出，还要操心别人的代码产出以及负责公司的后端招聘，而我又是一个社恐，这些工作内容都在加剧我内心的心理内耗。每次要面试前的几天，我都觉得很难受。 所以呢，远程办公的方式只能说缓解了之前的在办公室没事干时候的内耗，但是又有新的内耗产生。 要小孩2022年我跟媳妇决定要小孩了，其实之前想过，但一直没有要，原因是要小孩之后担心没有人照顾。我的原生家庭对我心理上造成了不少的伤害，当然了我父母是爱我的，这没办法，我只能接受，也没有什么是完美的。而且直到现在，原生家庭给我带来的神经紧张，还时常让我做噩梦，回到老家也是战战兢兢，神经紧张的。 这样的状态，我肯定是不可能让我父母来帮忙带小孩的，如果来了，我不知道会发生什么，也许我的精神就崩溃掉了。 但是2022年为啥决定要了呢，第一个就是现在不要就来不及了，我跟媳妇都快30岁了。第二个是我开发了一套稳定盈利的交易系统，有底气了，哪怕我辞职当全职奶爸，也能够有经济收入。 这就是第一次有了辞职的念头，说白了不敢辞职就是因为那碎银几两。 辞职的直接原因敢辞职了，即使有可以稳定盈利的交易系统，但是我也没想过立马就辞职，首先毕竟工作收入还是挺高的而且稳定，其次是交易本金还是不够，即使最佳情况的投资收入也比不上工作收入。所以最开始的打算是最早也是到媳妇休完产假后再辞职。 但是22年12月国家突然放开了防疫政策，导致了一波感染高峰，我家也没躲过。感染之后，发热，鼻塞头晕，这些症状4天左右就都消失了，而咳嗽，身体虚弱这些症状一直都在，失眠早醒这些症状比之前更加严重。到了最近，咳嗽加重，身体疲惫累，晚上睡不着早醒三四次，白天的时候沉重的心脏跳动声。 而我要做的事情一点没少，工作，照顾媳妇。照顾人可真不是一件简单的事情，仅仅负责一日三餐，就真的挺累，买菜（买什么菜，做什么饭要想好），做饭（备菜很花时间，也挺累），洗碗。最关键的是，孕妇，你并不能随随便便做个饭搞一搞就可以的，搭配合理，营养丰富，那就得花更多的心思。 所以啊，身体生病，工作压力，生活压力，有点让我透不过气来，所以我就想这也许就是个不可能三角，我不可能在照顾好自己身体的同时，还能做好工作，并且能把媳妇照顾好。 那我觉得现在这个时候，是该做决定了，否则三者都做不好。 于是，我选择辞职了。 辞职感觉如何今天是辞职后的第一天，要问什么感觉，最大的感觉就是头脑轻松了！ 工作的软件卸载了，工作群全部屏蔽了，也不用再想工作的事情了，不用再担心做饭的时候有人找我了，真的就是脑子放空了。一个字：爽！ 记一下今天的流水账： 起来买菜，盒马上有1000元的礼品卡，所以在盒马上买了不少肉，买了一袋虾。 早餐，做了煎鸡蛋，豆浆，加上之前买的切片面包。 早餐吃完之后，开始第一次做吐司面包。 午餐，做了芥末大虾，炒莲藕，米饭。 吃完饭，在等吐司发酵的时候，睡了一觉，平时根本没有时间睡午觉，上班的时候坐在椅子上睡不着，在家的时候基本上吃完饭洗完碗，就快下午上班了。 起床，把吐司送到烤箱里烘烤，30分钟后，就烤好了，还是有那个味道的。😃 然后和媳妇下楼散步，由于风太大，没散成，去门口菜店买了些蔬菜就回家了。 回家之后，泡茶，边喝茶边看电视，最近在看B站上的一个up主的《再读西游》，还蛮有意思的，推荐看看 然后开始准备晚饭，玉米糁，白菜炒香菇，还放了几个鹌鹑蛋。 虽然今天一天都基本上是在厨房，但是真的，脑子是放松的，这样的感觉真好。","link":"/2023/02/01/%E6%88%91%E8%BE%9E%E8%81%8C%E4%BA%86/"},{"title":"2023年计划和目标","text":"工作之后我都不会写什么计划和目标的，因为没有精力去做这件事，每天都很疲惫，周末和假期时间很短，还没休息就又要投入紧张压力的工作中了。谈计划和目标都是徒劳，空谈。 而2月1日正式辞职了，现在我有大把的时间，做什么怎么做，就值得好好计划一番。 其实我是一个对世界充满好奇的，充满探索欲望的人，但是这几年的工作确实让我有点抑郁了，那些有意思的事情真的是没有精力去做，时常感到没有动力，让我错以为我是对世界没有兴趣的人。从2月1日到今天短短几天，我就恢复过来了，我才发现我要做的事情那么多，要看的书那么多，真是令人兴奋。 而且这几天我感受到身体正在恢复，咳嗽没那么严重了，睡眠也在变好，当然了可能有心理因素在内，也可能是药物因素，反正不管了，变好就行了！ 人确实需要在持续奔跑的路上，稍微停下来，休息休息，放松一下自己，人生是一个马拉松，又不是短跑比赛，着急什么！停下来好好思考下，好好看看自己到底想要什么，探寻自己的内心和身体。 好了，废话不多说，关于2023年我是这么计划的： 身体方面 控制饮食，比如麸质，动物奶，玉米，大豆，精制糖，有害脂肪，减少其摄入 学习冥想，释放压力 坚持锻炼身体，控制体重，减肥5-10kg 坚持规律作息，电子设备拒绝带入卧室 想读的书 杀死一只知更鸟 免疫功能90天复原方案 美国儿科学会 育儿百科 怀孕圣经 非理性繁荣 清醒地活 超越感觉 批判性思考指南 西游记（最近看再说西游，看到了西游记很多不一样的东西，所以希望读一下原著） 4.16 更新 被讨厌的勇气 当下的力量 焦虑症的自救 禅与摩托车维修艺术 自卑与超越 梦的解析 乌合之众 经济方面 股票账户严格执行既定交易系统，跟踪FIRE策略（其他的只能听天由命了，毕竟看天吃饭） 持续记账，控制支出，掌握经济情况 探索稳定现金流的方式？ 学习更多经济学，投资等金融学的知识 当前经济状况2月份正式辞职后，那么收入就得靠FIRE基金了。所谓FIRE就是在不工作的情况下，收支达到平衡，而且收入&gt;=支出才行。 从22年11月份转入使用beancount之后，到现在也有3个月的数据了。这三个月总支出为1.7W，平均下来一个月6K就是我们家的支出，再叠加上一个月3.5K的房贷支出，差不多1月要花掉1W元。 对于FIRE基金来说，希望今年股市行情能好一点，不仅可以覆盖所有开销，还能让市值增长起来。 2023年1月FIRE基金收入是1.2W，差不多刚好覆盖支出。 当然了，股市的收益是不稳定的，这样给人有一种不确定感，所以如果要稳定的FIRE，除了股市的收益，还需要增加稳定的收益才行。 构建一个稳定的FIRE体系当然也不是那么容易的，首先需要积累本金，探索建立持久稳定收入的方式，然后达到收支平衡，最后就可以FIRE了。 目前我处的状态只能说是初级FIRE，甚至还不到初级，所以经济方面要走的路还很长。对于现在来说FIRE基金是一个可靠的方式，但是有点靠天吃饭的意思，所以这方面还会继续探索，看有没有更稳定的获得现金流的方式。 也就是稳定的现金流保证基本生活，FIRE基金等高风险高收益股权投资负责更进一步。 未完待续。。。","link":"/2023/02/04/2023%E5%B9%B4%E8%AE%A1%E5%88%92%E5%92%8C%E7%9B%AE%E6%A0%87/"},{"title":"免疫系统90天复原方案","text":"最近这段时间身体出现了各种问题，比如变应性咳嗽，睡眠早醒，白天疲惫，感觉到很累。咳嗽了一个月还没有好转，让我实在是有点焦心，而且这病是过敏性疾病，也就是说免疫系统可能出了问题。再加上睡眠问题，再回想了这几年的生活，我感觉是不是首先是因为睡眠不行，导致激素分泌失调，免疫系统紊乱所以导致了白天疲惫，累，以至于的上了过敏性疾病？ 鉴于这些，我在网上就搜索如何提升免疫系统，找到了这本书，不到一个星期吧，看完了这本书。整体上是不错的，特别是有些观点让我对免疫系统有了新的认识。 比如，书中提到，临床医学有个很大的问题，在指标都正常但是人就是不舒服的时候，它无可奈何，只能等到你真正出现疾病的时候它才能治疗，但是这时候就为时过晚了。而预防医学和功能医学则相反，是通过调养的方式来构建一个更强大的身体来避免出现疾病。说实话，这有点像中医，养生了，也许殊途同归吧。 还有谈到转基因食物的时候，我以前一直以为转基因蛋白质在经过消化道不是都消化成氨基酸了嘛，怎么还可能有问题。在这本书里，我了解到，不一定能消化完全，有可能人的消化系统有问题，导致蛋白质没有被消化分解成氨基酸，而且同时伴有肠漏症，那么蛋白质就可能进入到血液里引起免疫反应，而有的蛋白质可能与人体组织蛋白结构相似，这时候就会引起分子拟态反应，导致免疫系统攻击自身组织。 影响免疫系统的四个事情书中主要阐述了四个可能影响免疫系统的事情： 食物 压力 消化系统 肝脏 这几个部分我想可能对我影响最大的就是压力了，食物吧我没对啥食物过敏过，消化系统也非常好，每天早上都会排便，没有出现过腹泻，腹胀气之类的事情，肝脏的话看了书中的一些评估表格，应该是没有重金属暴露史，所以也应该没有问题。 压力长期的慢性压力会引发肾上腺分泌皮质醇，皮质醇水平不断升高，可能损害免疫系统并阻碍其修复。慢性压力还会导致肾上腺疲劳，肾上腺因此无法分泌身体正常运转所需要的激素，如肾上腺素，脱氢表雄酮和睾酮。常见表现有： 毫无缘由的感到疲乏 睡一整夜之后第二天还困乏 下午4-6点精力充沛 心中负担感很重 特别想吃过甜或者过咸的食物 血压低 血糖低 易怒 按照书中的自测评估表，我的当前压力水平处于中等水平和严重水平的临界点，自我照顾情况处于不够好和很差的临界点，肾上腺疲劳程度处于极度疲劳。 按照书中所说的有以下的治疗方案： 管理生活压力 从各个方面改善自我照顾情况 治疗肾上腺疲劳 管理生活压力大概有以下方式：自行改变压力环境（比如我的辞职，其他的比如培养新兴趣），各种类型的冥想，参加一下静修课，瑜伽课或者太极课，按摩，针灸等让自己放松 改善自我照顾情况，主要集中在睡眠，包括睡前调整，和补充剂。调整饮食，无压力进食。运动等。 治疗肾上腺疲劳，食疗，控制血糖波动，减少白面粉，白糖的摄入量，B族维生素。服用补充剂。去医院。 大概就是这样，我现在做的事情第一个改变压力环境，然后是想办法提升睡眠质量，最后控制饮食。 其他三个因素也不能说其他三个因素不重要，现在就开始重视起来，预防比治病要好多了。 所以如何控制饮食，防止出现过敏情况，如何保养消化道，如何避免重金属污染，都是值得一读，并且付诸行动的。 虽然说不可能完全避免麸质（小麦）的摄入，但是我们可以降低麸质，动物奶，玉米和大豆等这些容易导致免疫系统问题的食物摄入。完全避免精制糖的摄入等等。 总结总之，这本书值得一读，而且值得反复的读，并且按照书中的建议来付诸行动。 2023.4.19更新休息了快3个月，身体已经恢复了大半：过敏性咳嗽没有用药却几乎痊愈，21年的时候可是连续用药半年也才将将好。情绪压力-&gt;睡眠障碍-&gt;免疫力紊乱-&gt;过敏-&gt;睡眠障碍的恶性循环已被打破，控制了压力和过敏，睡眠从之前稀碎慢慢拼成了大块，走向了良性循环，白天的精力也变得充沛起来了。 去医院过敏给开的激素，抗过敏药，几乎没有作用；睡眠障碍给开的抗抑郁药，太上头了，两天时间都昏昏沉沉的，听说有严重的副作用和戒断反应，吃了一次不敢吃了。真是头痛医头，脚痛医脚，这不行啊，还是得自己做自己的主治医生。 感谢这本书让我有了方向，调控压力，修复消化道，控制饮食。消化道是人体最大的免疫器官，诚不欺我也。","link":"/2023/02/05/%E5%85%8D%E7%96%AB%E7%B3%BB%E7%BB%9F90%E5%A4%A9%E5%A4%8D%E5%8E%9F%E6%96%B9%E6%A1%88/"},{"title":"小岛经济学","text":"书中用大洋中的小岛的成长来举例说明经济社会的一步步发展，说实话，前面刚开始的时候还挺契合的，因为比较简单，到后面的话就有点牵强了，所以越看越不想看。 书中大力吹捧奥地利经济学派，即自由经济主义，大力贬低凯恩斯主义。我倒是觉得没必要这么极端，所谓道，就是均衡，哪个好用就用哪个，哪个更适合就用哪个，没必要二元对立。 自由经济主义是挺好的，但是太慢了，等见效黄花菜都凉了，这就是最大的弊端。人民能等得起吗。 不过吧，适合经济学启蒙，以后这本书给小孩看也是可以的😄但是要注意取舍，不能陷入极端。","link":"/2023/02/13/%E5%B0%8F%E5%B2%9B%E7%BB%8F%E6%B5%8E%E5%AD%A6/"},{"title":"螨虫过敏","text":"今天再去医院看了下医生，本来想查查IgE指标，再让医生给开点药。不过给医生描述了一通之后，医生给开的药居然和21年的时候一模一样，医生告诉我对于过敏，药物只能起到缓解，控制的作用，没法做到除根。 她让我平时注意看对什么过敏，比如总是冬天开始咳嗽，那就注意避免接触冷空气啥的，最后给我开了一个吸入食入物变应原定量检测，说不一定准，但是可以查查。然后另一个就是提升免疫力，但是比较难。 本来不想做这个吸入食入物变应原定量检测的，价格680，但是一想这次来岂不是啥都没干，药和之前的一样，IgE也看不出来啥名堂，就只知道是过敏，所以一咬牙，做吧，惊喜的是，医保报销了一半的钱🤑 做出来结果就是对屋尘螨，粉尘螨，无爪螨高度过敏，对鸡蛋白，花生轻微过敏 擦，突然发现，电脑桌子上全是灰尘，其他地方更不必说了。。。 哎，还是要多搞卫生啊 😅 接下来的计划就是，先把过敏这个事情有针对性的控制一下，然后开始逐渐恢复健身。 另外饮食上要多注意了，鸡蛋白和花生肯定是要戒除掉了，然后健康饮食，控糖控盐控油。","link":"/2023/02/14/%E8%9E%A8%E8%99%AB%E8%BF%87%E6%95%8F/"},{"title":"FIRE基金策略——格局版","text":"最近这几次买入，当天看着很舒服，涨幅喜人，但是第二天总出现卖不出去，然后导致亏损的情况。比如上次买入，当天收获涨幅1%，第二天直接跌1.5%，而且第二天系统发出卖出信号，不得不清仓。。。 除了这个问题，目前的FIRE基金策略还有一个问题就是：在单边上涨的时候很容易大幅跑输指数。最近股市关于牛市的传言甚嚣尘上，让我也有点沉不住气了。 FIRE基金策略可以在单边下跌的时候大幅跑赢指数，在震荡期可以跑赢指数，但是单边上涨时候就会大幅跑输指数，这就是策略的缺点，无可避免，鱼与熊掌岂可兼得。但是请注意，这里只是跑输，但是也是盈利的呀，只不过赚的比指数少罢了。 理论为了解决上面两个问题，我思考出了一个新策略——格局版 第一个问题，其实就是目前中国股市的T+1规则，规避这个规则的方法其实很简单，就是账户上一直保留仓位，然后当天买入的仓位可以在尾盘卖出，其实就相当于做了个T嘛。在我这里，那就可以在账户上一直保持半仓，然后发出买入信号的时候买入另外半仓，到当天尾盘可以选择卖出半仓，就相当于T+0了。 第二个问题，那其实如果应用上面的保持半仓，自然就解决这个问题了，一直保持的仓位当然不会错过牛市咯，但是这是把双刃剑，在熊市的时候也不会错过，这不可能避免。 但是有一个缓解之法，那就是做市值和现金的动态平衡，原理很简单： 在牛市中，市值不断变大的时候，卖出一部分仓位，保持市值和现金的1:1平衡，这样会不断的抛售仓位，可以缓和在随后的大跌里的损失。在熊市中，市值不断变小的时候，可以使用现金补充一部分仓位，这样可以平滑熊市的跌幅。 回测说了这么多，看起来挺美好的，对FIRE基金策略是一个不错的补充，那么实际情况如何呢？我们回测下看看吧： 可以看到，在宽基比如上证50，科创50，创业板50，创成长上有不错的增益效果，而在行业基上表现平平 那么原因是啥呢，我估计是因为行业基在发出买入信号的时候已经涨到当天高点了，所以即使尾盘能卖出，也基本上没收益或者是干脆负收益，所以跟FIRE基金策略差不多。。 而宽基不一样，可能一会这个涨，一会那个涨，有个时间差，所以发出买入信号之后还有不少利润空间。 那么这样的话，格局版策略就最好选择宽基吧，下面就创业板50，上证50和科创50做一个详细一点的分析，初始资金20W 创业板50创业板50的数据从2021年1月20日开始，前一天的指数数值是2999，截至今天数值是2552，下跌14.9%，那么这半仓到现在剩余85100元 另外半仓的收益率是43.6%，那么剩余143600元 总计228700元，总收益率14.35% 2年时间14.3%，看起来并不多，平均每年7%，但是你要考虑到2022年创业板下跌了30%，那如果来一波牛市，年收益率岂不是更高。 上证50上证50的数据从2021年3月3日开始，前一天的指数数值是3718，截至今天数值是2776，下跌25%，那么这半仓到现在剩余75000元 另外半仓的收益率是24%，那么剩余124000元 总计199000元，总收益率-0.5% 上证50在21年下跌10%，22年下跌20%，算是两年熊市了吧 科创50科创50的数据从2021年6月10日开始，前一天的指数数值是1427，截至今天数值是1023，下跌28%，那么这半仓到现在剩余72000元 另外半仓的收益率是24%，那么剩余124000元 总计199000元，总收益率-2% 同样22年下跌30% 回测ok总体上看，在经历了两年熊市的情况下，最终收益情况很ok啊，当然创业板50的表现要比上证50，科创50好多了。如果搭上几年上涨，就可以快速拉高收益率，不可能年年跌吧。 执行目前看来格局版策略理论和回测都通过了考验，而且也作为FIRE基金策略是一个很好的补充，所以我打算在测试账户上执行这个格局版策略，而且只做创业板50。 格局版策略也有缺点，那就是在熊市，连续下跌的时候不能避免，所以要做好心理预期。目前创业板50的位置，经过这两年的回调，大概和2020年第四季度的水平相当，继续向下的风险已经没那么高了。 格局版策略和FIRE基金是分开的，所以不会每日更新净值，但是季度报告的时候会做一个总结说明。 现在有的策略加上格局版策略，那现在就一共有3个策略了。 FIRE基金策略和FIRE基金策略打野版，这个是在主账号稳定执行的，对应的就是净值曲线里的FIRE基金累计净值，而策略收益率曲线只包含了FIRE基金策略的回测，所以两者曲线会有些许的出入，但是大体上是一样的。 FIRE基金格局版策略打算在测试账户上执行，不进行每日更新，只在季度报告更新情况。","link":"/2023/02/14/FIRE%E5%9F%BA%E9%87%91%E7%AD%96%E7%95%A5%E2%80%94%E2%80%94%E6%A0%BC%E5%B1%80%E7%89%88/"},{"title":"谈谈FIRE","text":"其实最开始我是没有想过FIRE是靠被动收入来生活的，我理想中的是找一份远程工作，然后工作生活在一个小县城或者小镇子，我觉得这样就足够了。后来了解到可以通过控制开销，使得支出和稳定的被动收入相平衡，就实现真正的FIRE了。我这才一步一步的往这个方向努力。 现在我辞职在家，当然不算FIRE，因为没有实现financial independence，首先本金不够多，其次收入只依赖股市，存在很多不确定性和风险，因为股市本身具有随机性，即使按我构建的交易系统进行交易，那也不能说就一定能获取稳定的回报，比如最近这个行情，我感觉是被定向狙击了。 说到这个问题，其实就是存不存在交易圣杯的问题，交易系统会不会失效的问题。简而言之，我觉得在一定条件下是存在的交易圣杯的。至于失效的问题，本质是要看交易系统的核心是什么，核心所依赖的条件失效了吗？如果没有，那就没有失效，至于短期亏损的问题，那只能说是市场不行，毕竟短期市场存在随机性。这些后面我会再单独写一篇文章讨论一下。 那我现在为啥敢辞职在家？说实话，就是无可奈何的事情。我辞职回家这已经是布局好几年的事情了，主要是为了在家带娃，由于家庭原因，我不敢也不想让父母过来带娃，辞职在家带娃也是跟媳妇商议后的一致决定。 当然辞职提前了，直接原因是身体出现比较大的问题，否则，那我肯定再坚持一段时间，好歹也是一份稳定的收入啊，在扩大的本金的同时，还能继续检验交易系统，何乐而不为。 人生真的不容易，越长大越觉得如此，可能还是因为自己没有能力来让事情变得更好，更轻松吧。现在我也佛系了，与身体越来愈差有关，与经历太多的失望有关。","link":"/2023/02/17/%E8%B0%88%E8%B0%88FIRE/"},{"title":"策略回撤分析","text":"看了下创业板50主要回撤的时间和区域，2021年，2022年，2023年都有，但是主要集中在2022年下半年，大概情况如下 回撤20210604～20210607 回撤-2.32% 20220124～20220127 回撤-3.3% 2022年下半年 分别回撤-5.1%，-2.28%，-4.23%，-3.5% 对应曲线分别为下面这几个地方 分析也就是说大部分情况下都是稳定增长的，但是偶发的几次行情拉胯就会导致整个收益率曲线的大幅下降。 而且在回撤的时候，基本上都是买入后不涨，甚至大跌，这种情况不论做不做止盈都是一样的 那么是不是不做止盈会更好呢，参见下图： 绿色为止盈后的曲线，红色为不止盈的曲线 可以看到，很多标的上绿色明显大幅超越红线，虽然红色曲线在有的地方会超过，但是绿色曲线也还算表现可以。 所以综合来看，还是止盈来的好。 虽然说止盈版本可能遇到一些不可避免的回撤，但是明显可以看出，它过滤了大部分回撤。 那么现在问题主要集中于如何规避这些回撤？ 按趋势值来看，确实没办法避免买入这一操作。 那加入止损如何呢？ 加入止损回测之后，发现并没有有什么增益效果，反倒是有一些负作用。 时间段可以看出2022年10月之后，开始频繁出现回撤，那么这段时间指数走势是不是跟以往不太一样呢： 果然，指数在10月之后开始了窄幅震荡，窄幅也就是没有太大的利润空间，还没涨呢，就开始跌了 而10月到现在的回测，也是在震荡，偏下跌型的震荡 总结其实对这些回撤来说，是不可避免的，主要原因还是因为行情低迷，成交不足，导致多头的空间减小，所以策略买入后没法止盈卖出，导致亏损。 那怎么办呢？没什么办法，继续坚持执行策略吧，可以有一些小的调整，比如多策略融合，现在就是基础策略+打野策略+格局策略，后面可能加上非止盈策略。","link":"/2023/02/19/%E7%AD%96%E7%95%A5%E5%9B%9E%E6%92%A4%E5%88%86%E6%9E%90/"},{"title":"身体开始恢复","text":"辞职在家已经20天了，最直观的感受就是压力骤然消减，感觉生活变得轻松，变的慢起来了。 身体也在逐渐的恢复，咳嗽已经基本控制了，感觉就差临门一脚，就好了，这个临门一脚我猜就是气温的逐步回升。 过敏前段时间检测过敏原显示对尘螨，鸡蛋和花生过敏，回家之后就开始集中经历治理灰尘，螨虫，以及戒食鸡蛋。说真的，以前真的也是不注意，家里灰大的很，就连经常用的工作桌，显示器啥的都好多灰尘，地板上也是。最近就花时间经常清扫，拖地，然后床单被罩全部清洗一遍，买了小米的除螨仪，每天晚上睡觉之前吸一遍，然后空气净化器也一直开着。说真的，数码产品不知道买什么，就买小米的，买不了吃亏买不了上当，性价比很高。饮食上就戒食鸡蛋，没有戒食花生的原因是还有半桶花生油没有吃完，就等吃完再说吧。 鸡蛋和花生都是轻微过敏，但是也需要戒除的原因就是轻度过敏也会引起免疫系统的能量消耗，直观在身体上的体现可能就是身体疲惫，精神萎靡。所以最好的方式就是都戒除一段时间，看看身体的变化。 另外，这个过敏原测试有缺陷就是如果没有接触过某些物质，身体没有对应抗体，那么这个测试就检测不出来的。我猜我对虾也过敏，因为最近吃了一次虾，洗虾的时候手上就出了寻麻疹，而上次测试没有检测出来对虾过敏，因为检测之前没有吃过虾，具体时间范围多久，我也不清楚了。它只能检测出来当前过敏的那些东西产生的抗体。 过敏原测试也没办法检测是否对冷空气过敏，我猜我这个呼吸道过敏应该主要是对冷空气，当然灰尘，尘螨也会加重呼吸道的炎症反应，所以还是需要格外注意。 睡眠月初的时候，每天晚上10点睡觉，有可能11点多就醒来，有可能1点多醒来，有可能3点醒来，也可能这几个点都会早醒，而且3点之后的睡眠就是那种似睡非睡，导致白天非常疲惫。而且早醒后，很大概率继续入睡是非常困难的，比如11点醒来之后，可能挨到一两点才能勉强入睡。 现在睡眠也逐渐恢复正常了，现在10点睡觉，到晚上1点多醒来，醒来后也能很快入睡，睡到早上6点醒来。这样至少睡眠算是够了，当然如果能睡一个囫囵觉的话，那是最好不过的了，一觉醒来大天亮，爽。 至于睡眠问题是什么导致的，我猜是因为压力太大，现在不工作了，工作带来的压力已经如云烟散去了，但是毕竟重压之下时间太久，身体恢复也需要很长一个过程。 这块今年的计划是练习冥想，释放压力，然后休息一段时间再看。 健身昨天开始把健身恢复起来了，主要还是因为不太咳嗽了，而且感觉身体已经基本恢复如初了。前段时间感觉有点怕冷，稍微少穿一点衣服就感觉要感冒的样子，新冠的后遗症还是有点强的。 昨天健身了40分钟，主要就是有氧运动——打拳，就这么一点运动量，今天手臂，胸部就开始酸疼了。。。哎，3个月没锻炼了，太弱了。 后面的计划就是先坚持每天有氧运动1个小时，然后后面增加持续的肌肉训练。 体重上的目标：今年减肥5kg，把肚子减下去。 其他最近写的文章很多，基本上一天一篇，在家后除了做饭，空闲出了很多时间看书，思考，也有很多时间来写作。我呢，其实想法很多，想做的事情也很多，没事就想把这些想法记下来，然后逐一践行，真的挺有意思的。 其他很重要的一个点就是心理状态，我觉得我这些病根子还是在我的心理，自卑，胆小怯懦，没有安全感，这和我的成长环境有很大关系。小时候，基本上是我和我妈相依为命，但是我妈呢脾气也挺大的，然后我爸脾气也暴躁，在家的那段日子又经常和我妈吵架，所以导致我很没有安全感，另外加上父母经常的批评我，所以我就有点自卑。哪怕是现在，回家面对父母，我都觉得很压抑。哎，现在抱怨没有任何意义，只能说是知道病根，尽量去修复吧。 但是心理的治愈真的挺难的，江山易改，本性难移，只能说是想办法吧。 加油加油～","link":"/2023/02/20/%E8%BA%AB%E4%BD%93%E5%BC%80%E5%A7%8B%E6%81%A2%E5%A4%8D/"},{"title":"止盈系统的进一步优化","text":"目前的止盈系统的原理是固定了一个止盈参数，这个止盈参数包含了两个值，一个值是止盈收益率，也就是说，在(收盘价*止盈收益率)&gt;成本价的时候，按照(收盘价*止盈收益率)价格卖出，第二个值是止盈比例，是说在卖出的时候卖出多少比例的股份，第二个值现在一般固定为100%。 能卖尽卖这种方案经常会出现一个问题，就是按照止盈收益率来卖出，因为设置的有点高，很可能卖不出去，所以后来进一步优化，提出了能卖尽卖方案，该方案集中的点在溢价上，因为ETF价格相比IPOV（净值）会有一些溢价，有时候是溢价，有时候是折价，而在确定第二天的卖出价格的时候，尽量使用折价——以保证价格挂的低些，这样更容易卖出去。 另外在买入的时候可能比策略发信号的价格高，这样第二天挂止盈单的时候价格也会偏高，这时候会选择用策略买入价格来算，而不是实际成交价。 总之，思路就是尽可能保证在符合条件的情况下第二天可以挂出止盈单，而且尽可能往低了挂，在这一系列的调整下，回测收益率有小幅的提高。 进一步优化这段时间创业板50的极端拉胯，导致回撤进一步增大，而且经常出现擦肩而过然后卖不出去的情况，紧接着就是发出卖出信号，导致亏损。 所以这段时间进一步的思考了下止盈系统 其实仔细想想，在第二天挂止盈单的时候，挂在止盈收益率的这个价格上和挂在平盘（前一天收盘价）上，似乎差异并不大，反倒是挂在平盘上更容易卖出去。如果挂的高能卖出去，那么挂的低的价格肯定能卖出去。而挂的低的价格卖出去，挂的高的价格不一定能卖出去。因为系统还有一个设置就是如果第二天收盘价大于成本价，那么就以收盘价卖出去。这一点的设置保证了，不论挂高挂低都是有一个托底。如果挂的高没卖出去，在收盘价盈利的情况下肯定能卖出去，如果收盘价亏损——那可以想象这一天是个啥行情。。所以综合来看还不如挂的低来的靠谱 基于这个思路，可以将上车后的情形分为可以挂止盈单和不能挂止盈单，可以挂止盈单的挂的价格越高，卖出的概率越低，挂的价格越低，卖出的概率越高，这两种情况收益率都很小，其实这是一个数学期望的问题，所以需要找到最合适的一个点。不能挂止盈单的，那就不挂了，很简单。 从代码上梳理逻辑，对应其实就是以下两种情形： 收盘价大于成本价 收盘价小于成本价 下面分别论述 收盘价大于成本价这时候会挂止盈单，那么从成本价起步，挂哪个价格合适呢。 挂的价格越高，卖出的概率越低，挂的价格越低，卖出的概率越高，这两种情况收益率都很小，其实这是一个数学期望的问题：盈利比例X挂单价格的概率 所以可以在代码上设置这样一个变量，来循环遍历看哪个参数最优 挂单价格出现的概率可以预见的是挂单价格越低出现的概率越高，比如相比收盘价-10%肯定是100%出现，相比收盘价10%肯定是0%出现，而出现在收盘价周围的价格比例应该是最高的，有没有觉得这像数学中的一种分布？对，就是正态分布，中间大，两头小。 而且相比于正态分布来说，这个分布应该还有一个特点，就是曲线可能不是那么平滑，也就是说在两边可能会出现断层，那么我们优化的目标就很简单了，找出中间那部分——概率最高的部分，选择比收盘价高的那个点，就是挂单价格的最优解。这样，挂单价格最高，挂单价格出现概率也高，那么数学期望就高，也就是止盈收益最大。 每一个标的在发出买入信号后，而且当天收盘价大于成本价，第二天的价格概率分布可能是不一样的，所以需要每个标的分别统计，然后最终看看是否有统一性。如果没有，那么需要每个标的单独处理。 收盘价小于等于成本价这里相比上面那种情况要简单，但是需要考虑的是成本价小于收盘价多少的时候我们需要挂卖出单，而挂卖出单的价格是固定的，就是保本出。至于为什么选择保本出，在文中一开始就论述过了，挂个保本出和挂多零点几其实差异不大，而卖出去和卖不出去差异比较大。 那这里我们只要设置一个变量，循环去跑一遍，找收益最大的那个值就可以了。 根据这个原则，筛选了一遍，貌似还真是现在的止盈参数是最佳的，在各个标的上表现都还可以。 代码选择价格的代码其实很简单，sell_rate对应收盘价大于成本价的止盈盈利率，change_rate对应收盘价小于等于成本价的差多少卖的差价率 12345678if close_price &gt; stock_cost_price: profit_sell_price = max(round((close_price * (100 + sell_rate)) / 100, 3), stock_cost_price + 0.001)else: change_price = round((close_price * (100 + change_rate)) / 100, 3) if change_price &lt; stock_cost_price: continue else: profit_sell_price = stock_cost_price + 0.001 回测虽然看起来上面两种情况是独立的，但是其实其中有千丝万缕的联系，所以搞了个双重循环，来寻找最佳的参数点。跑了一遍发现，每个标的其实不太一样，但是差的也不多，所以最后那就每个标的挂止盈的时候选择不同的参数吧。 下面是新的止盈策略和之前的收益率的比较图，可以看出来还是有一些不错的提升","link":"/2023/02/22/%E6%AD%A2%E7%9B%88%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E4%B8%80%E6%AD%A5%E4%BC%98%E5%8C%96/"},{"title":"杀死一只知更鸟","text":"我为什么喜欢读书，是因为读书能让我进入到另一个世界，感觉到他们的喜怒哀乐，或感动，或悲伤，总之能让我忘记当下的生活，这也许是一种逃避，但是对于我来说是一种解放。 这本书对我最大的感受是，我要成为阿迪克斯这样的好爸爸，这本书告诉我们父亲应该是一个什么样的形象，要坚守什么样的原则。 正义，尊严，尊重，教育，高贵。 坎坷之路，终抵星空～","link":"/2023/02/23/%E6%9D%80%E6%AD%BB%E4%B8%80%E5%8F%AA%E7%9F%A5%E6%9B%B4%E9%B8%9F/"},{"title":"又一夜失眠","text":"昨天晚上9点半睡觉，大概10点钟睡着，到1点钟醒来上个厕所后再也睡不着了，尝试做了会冥想，发现脑子异常清醒和兴奋，做冥想的时候感觉脑子在不断的切换各种画面，即使尝试将注意力集中在某个地方，也不能阻止大脑的异常兴奋，也没有什么具体的事情，就是各种想法画面涌向大脑。挣扎了这一个半小时，算了，不睡了，起来罢了。 真是特别怀念能睡一晚囫囵觉的时候，哎。 今天恰好是3月的第一天，也刚好是我辞职的一个月，这一个月来似乎好像也没有什么大的改变，可能因为之前也一直是在家办公，所以生活时间上，生活规律上没有大的变化。不过值得高兴的一点就是咳嗽基本上快好了，不知道是因为不工作压力减小，免疫力恢复，还是因为尘螨治理有效，还是因为气温逐渐回暖，也许是三者皆有，不清楚，反正恢复了就好。另外有一点明显感觉到的变化，就是精力恢复了，感觉就是没那么困了，每天想干的事情变多了，入睡时间也不像之前那么早了，以前是下班吃完饭后8点钟就想睡觉了，现在吃完饭后大概6点多，到9点多才想睡觉。随着精力恢复，已经开始健身了，2月份健身5次，一共消耗1400千卡能量。 2月份生活上没有什么太大改变，每天依然是做饭+看书+锻炼+炒股的生活，距离宝宝出生还有1个月，时间越来越近，就越感觉没有准备好，做一件以前从来没有接触过的事情，逐渐的有点紧张感。而且随着宝宝出生，可能真的要切换角色状态了——开始做一个全职奶爸了。为什么现在还不能确定的说，将来我就要做全职奶爸，第一点就是父母那边，虽然说我要尽量和父母保持距离，避免他们继续给我产生负能量，但是毕竟是父母，是亲情，我没理由直接拒绝他们来帮我看小孩，所以这个过程可能需要不断的来沟通商量。第二点就是经济方面的考虑，如果股市真的不太行，那可能我还得去打工挣钱去。所以各方面的取舍，现在还不能确定。。。 说到股市，2月份是真的惨，策略回撤3.2%，实盘回撤4.2%。策略回撤小的原因是做了点优化，要是按优化之前的，基本上和实盘回撤差不多。其实2月份就那几次买入，第一次科创50亏了0.8%，第二次创业板亏了0.7%，第三次创业板赚了0.7%，第四次创业板亏了3.5%，优化后的策略在第二次创业板买入是从亏0.7%到赚0.7%，所以比实盘能好1个点。最主要的回撤发生在第四次买入创业板，那天买入后跳水，反正是挺惨烈的，但是没办法，只能接受。本月的话跑输沪深300，跑赢创业板50，因为策略主要还是做创业板，所以跟创业板相关性更大点。 其实我是一个风险厌恶的人，股市对于我来说，特别是这种短线投机，我是不喜欢的，不论你再怎么控制，也避免不了股市起伏对自己内心的波动，这样就很难做到内心的平静。我现在将炒股软件安装在另一个手机上，只有需要操作的时候我才会去看盘，操作，其余时间使用另一个手机，尽可能的避免无尽的盯盘，以及盯盘带来的无谓内心波动。但是嘛，人性总是好奇未知的东西，总是有时候难以忍住，没事的时候看一眼。有了交易系统，其实真的没必要看盘，首先是看盘毫无作用，并不会影响走势，其次是不需要看盘，交易系统该怎么操作都是有提醒的。以后还是要尽量去控制，避免在这一方面消耗精力，因为消耗了也没有任何用处。 理想中的FIRE不是这样子的，即使做投资应该也是长线持有的，无视短期波动，当然如果你乐意，可以做短线投机，但是原则是即使你不做短线投机，也有足够的被动收入以供生活，所有你做的事情，都是你主动选择的，而不是不得不做，这才是理想的FIRE。 这段时间我也在回忆和思考我的人生，我在想为什么我会处于当前的这么一个境地，当然了这个境地是好还是不好，没有这么绝对，因为当前的处境也许就是你人生的必然。为什么这么讲，因为你的所有经历促使成了你的性格和三观，而面临每一次选择的时候你的性格和三观大概率就已经决定了你的选择。我把我的人生分为了两个部分，第一部分就是性格和三观养成期，第二部分就是各种选择的决策期。性格和三观养成期对应上大学之前，因为在这之前你没有可以真正做选择的事情，没办法选择家庭环境，没办法选择生活环境，上学也是按部就班，朋友也就是那么个小圈子，这个时间就是各种外部因素对性格，三观的塑造和影响。决策期对应上大学之后，特别是工作经济独立之后，这时候面临的很多选择都是需要我独立来做的，当然有的人不一样，可以更多的依赖家庭甚至家族，我没办法，只能是我自己做，而做出什么样的选择就是基于第一部分塑造出来的性格和三观。比如对于我来说比较大的选择有：选择读博，之后又选择退学去做编程，选择对象，选择是否要娃，选择辞职做全职奶爸等等，其实现在想想，这些选择如果能够重来我会怎么选，感觉大概率还是一样的。 还有一个关键点，就是两部分的衔接点，这个衔接点就是上大学选学校和专业，不过不幸的是高中时期的我对这些专业一点都不了解，甚至到大学期间都有很多误解，比如计算机专业，我一直以为它是主要研究硬件的，所以在大一转专业的时候我没有把握住，大一的时候其实我就一直在看算法。高三的时候我唯一知道我喜欢的专业就是天文学，当时目标就是南京大学的天文学专业，无奈高考发挥不够，平时670分左右，高考只考了633，差异主要在理综的物理几道大题，全都是思路对，最后算错了，扣了一半的分数，差不多就是二三十分。最后填志愿的时候是听从我爸的意见，所填的六个专业都是发动机相关的，我爸认为中国航空发动机不太行，将来肯定会大力发展，然后我毕业后的工作也已经计划好了，那就是去西飞，至于这样的安排好吗？看起来也还不错，但是我确实不太喜欢。学校的话，当时我特别喜欢下雪的地方，所以想去哈工大，但是我妈又觉得太远了，所以最后选择了西工大。 这个衔接点对我来说影响确实很大，因为只有到学到专业课的时候你才会发现你这个专业到底是干嘛的，而大一大二的公共课大部分工科专业其实都差不多，我就是在大四做毕设的时候才知道我究竟喜欢做什么，但是已经晚了。所以对我来说，这个衔接点基本上决定了我后面的路就不会太顺利。衔接点的这个选择只是诸多选择的一个，但是它是第一个选择，第一个选择就像树干的第一个分叉一样，看起来普通，但是其实是至关重要的。 我在这里也并不是抱怨父母给我人生第一个选择的决定，我理解他们的考虑，也认为这是一个普通家庭能给孩子的不错的选择，但只是他们忽略了我的需求，忽略了和我的沟通，其实这一点从小就看出来了，如果他们能多和我沟通，平静而且耐心的沟通，我的性格也不会是这样自卑，缺乏安全感了。但是这一切都已成过往，我现在思考这些，有两个原因，一个是我想治愈自己的心灵，另一个就是我要吸取教训，在我的小孩教育上要特别注意。 代际创伤理论提出者心理治疗师莫雷·鲍恩认为：家庭创伤经历会塑造一代人的价值观、想法和体验的模板，这个模板会潜移默化地不断传递给下一代。我们要么像父母认同，要么拼了命要成为和父母不一样的人。 所以，为人父母者要觉察到自己身上的代际创伤，好好疗愈自己修炼自己，让很多代际创伤的痛苦终结在自己这一代，不要继续去祸害下一代，而美好的健康的模式则传承下去，发扬光大。 今天先写到这里吧，我现在越发觉得这一段时间的休息是必要的，我已经在心灵里忍受这些不好的东西太长时间了，如果再久不管可能真的会让我崩溃掉。","link":"/2023/03/01/%E5%8F%88%E4%B8%80%E5%A4%9C%E5%A4%B1%E7%9C%A0/"},{"title":"痛苦的根源","text":"今天晚上睡到2点多醒来后，再也睡不着，然后脑海中就浮现各种画面，突然想到我关于小时候的梦境几乎都发生在一个地方的原因不是因为我怀念那个地方，而是那个地方正是我痛苦的根源。 我的童年因为母亲工作的变迁，所以可以分为三个时段。 第一时段是7岁之前，小学二年级之前，生活在湾子中学。 第二时段是在7岁到11岁，小学三年级到小学六年级，生活在崇皇乡的高陵三中。 第三时段是11岁之后，小学六年级之后，生活在县城，后来就一直定居在此。 现在我关于小时候的梦境基本上都是发生在第二时段的高陵三中，不论梦中的我多大，梦里的环境都是高陵三中的那间房子，房子的布置，周围的环境在梦里非常清晰。 梦里有时候我是在房子里翻箱倒柜，似乎在找什么东西。有时候就是把这间房子当成我的秘密基地，晚上我就会过来睡觉。 最开始，我以为是我怀念这个地方，所以才会每次关于小时候的梦都会来这里。 最近我不断的回忆童年，回忆小时候对我印象深刻的事情，无论是幸福的还是痛苦的事情，今天失眠的这段时间，突然发现在高陵三中的回忆大部分都是令我恐惧，令我非常没有安全感，令我痛苦的回忆： 在我心里造成最严重创伤，印象最深刻的应该就是我爸跟我妈吵架，然后我爸扇了我妈一巴掌，我妈开始寻死觅活的那一夜，我撕心裂肺的哭着看到这一切。 吃饭的时候，因为我没有把碗拿稳，我爸说狗都知道护食呢，我爸的那个语气，那个表情，那个场景，也在我心理产生了非常深刻的印象，经久不忘。 很多个晚上，我侧着身子面对墙壁独自悄声啜泣，想自杀，想怎样自杀才能不痛苦，后来想通了，不自杀，还没有体验世界就死，有点不值得，太可惜，我想的是以后长大了，啥都体验了再死吧。 不知道因为我又犯了什么错误，我妈大晚上把我锁到门外面，逼着我承认错误，道歉，这一场景依然历历在目。 下午放学回家，家里门锁着，我妈不在家，我以为我妈不要我了或者是我妈出事了，我整个校园哭着找我妈。 在这一时段，我外公去世了，在我的回忆里，我外公给我的都是温暖的回忆。有一次外公骑摩托送我回家，我趴在外公背上，望着远处的落日，想到外公会不会也和这落日一样，没想到没过多久就真的再也见不到外公了，那时候很自责，为什么不及时给父母说，能尽早去检查，尽早发现病情。此后，每次我爸妈吵架，我一个人晚上就会啜泣着想念外公。 陪伴了我一年多，温暖的大橘猫被我爸妈送走了，我那时候挺难过的，不知道为什么要送走，我也不敢问。 我爸因为猫早上叫，起来就打猫，打得很厉害，我有些害怕。当时先后养了两只猫，第一个就是大橘，第二个是黑白相间的猫。 我想给我在湾子时候的好朋友潘帅写信，我妈不让，非得让我给我姨妈写信。潘帅我至今都记得，当时每天放学都和他玩。 等等。。。 当然，温暖的事情也有，但是很少，没有多少印象深刻的回忆： 我爸妈带着我，在校园里找能给我扩展出床的床板。 我想，这大概就是让我痛苦的根源吧，所有折磨我的性格的起源吧。 与在高陵三中的回忆不同，在湾子乡的第一段童年的回忆大部分是温暖的，不好的回忆没那么多。","link":"/2023/03/06/%E7%97%9B%E8%8B%A6%E7%9A%84%E6%A0%B9%E6%BA%90/"},{"title":"抑郁症（一）","text":"医院诊断前天去精神医院，给医生说了当前的状态，医生二话不说给开了一堆检查，脑部CT，心电图，因为我说我有过敏，所以也开了血常规和超敏C蛋白检测，剩下就是一堆心理测验。 前面的这些检查都没问题，肯定没啥问题啊，要有问题早就感觉出来了。然后就是这些心理测验，说实话，太水了，跟以前在网上做的差不多，还要花几百块，真是大冤肿。最后测验结果就是中度抑郁，轻度强迫症，我上大学的时候就在网上测过，结果也是中度抑郁。 然后拿着检查复诊，医生也没说个啥有用的，反正就是开药，但是诊断结果没有写抑郁症，只是写了失眠，焦虑状态。但是开的药却是治疗抑郁症的：米氮平，巴戟天寡糖，艾斯西酞普兰。 回来之后我在网上查了下这几个药都是干嘛的，查了之后有点不敢吃了，副作用明显，还有很严重的戒断反应。。。 后来晚上思来想去，想着药都买回来了，试着吃一下吧，所以吃了半片的米氮平，一粒巴戟天寡糖。 果然啊，太上头了，这个米氮平真是药效浓郁啊，当天晚上睡觉依然还有早醒，醒来两次，但是醒来上个厕所后，躺床上很快就睡着了。第二天早上起来口干舌燥，而且第二天整天晕乎乎的，到第二天晚上依然药效不散。直到第三天，也就是今天早上，才感觉脑子能清醒起来。 这样可不太行啊，就剩一个月媳妇就要生了，要是突然有个啥，我估计连开车出车库都困难。所以第二天我就决定先不吃药了，等后面生活都安定下来再考虑吃药解决问题吧。 自我疗愈这篇文章我放到了自愈分类下，而且文章标题有数字后缀（一）。 放到自愈分类下是因为我之前有好几种病症的自我疗愈经验，而且也有很好的效果，所以我觉得抑郁症也一样。 数字后缀（一）表示目前仅仅是一个开始。。。 说实话，我对现在的临床医学有点失望了，我去看了很多病，基本上都是头疼医头，脚痛医脚，基本上没有一个能彻底治愈的。 腰椎间盘突出腰椎间盘突出，医生说看你感觉如何了，如果不行来做手术吧。。。 动不动就做手术可不是个好主意。。。 过敏性咳嗽过敏性咳嗽，辗转3个医院，最终在陕西省人民医院，该做了的检查都做了一遍，没有问题，就确诊过敏性咳嗽，问能治愈吗？医生说不能，这不就是强哥说的”绝症”么。。 而且给人感觉就像是没其他可能了，最后都会归到过敏🤣而对过敏性咳嗽，开的药就是抗过敏药，刚开始有点用，后来就几乎无用了。 再问医生，医生就说注意隔绝过敏原，我问这个是免疫系统疾病，能想办法调养身体提高免疫力来治愈吗？医生说太难了。 我就想说，过敏原这怎么隔离的完啊，冷空气，灰尘，螨虫。。。 所以啊，临床医学给人的感觉就像是只有实质性器官病变它才能治，要是没有，它好像毫无办法，你说你不舒服，医生查了一通说没问题，那怎么办，等吧，等你有了实质性器官病变再来治吧，这好吗？肯定不好。 后来不就出来了预防性医学和功能医学，这不就和中医养生的思想殊途同归了吗？现在有很多中医黑，我也不知道他们为啥黑中医，世界上确实有很多西医根本无法治疗的疾病，比如我的这各种过敏，药可能开始有用，后来就没用了，你要是只依赖西医，那最后肯定是越来越严重。人嘛，为什么要搞二元对立，哪个好用用哪个不好吗？ 虽然有了预防性医学和功能医学，但是指望医生给你制定一套符合自己情况的解决方案实在是太不现实了，而且现在很多医生也只会头疼医头，脚痛医脚，可能都不太了解预防性医学和功能医学的理念，所以能指望的只有自己，自己要做自己的主治医生才是这种慢性病的最佳归宿。 只有自己才能详细知道自己的情况，只有自己才能和自己的生活起居息息相关，所以自我疗愈就是最终选择。 抑郁症的自我疗愈小时候我就看过梦的解析，觉得真的很神奇，弗洛伊德的心理创伤学说的确很有趣，他认为心灵过去所受的伤害（心理创伤）是引起目前不幸的罪魁祸首。它那因果规律的简单逻辑和戏剧性的发展进程自然而然的散发出摄人心魄的魅力。 前段时间回忆童年生活的时候，不自然的就套用了弗洛伊德的理论，在童年生活中寻找心理创伤，寻找在什么时候受到了心理创伤。 但是最近看阿德勒心理学相关内容，它明确否定心理创伤，提出了目的论：决定我们自身的不是过去的经历，而且我们赋予经历的意义，而之所以不幸不是因为过去或者环境，而是缺乏勇气，缺乏获得幸福的勇气。 关于这些心理学，真的是很有意思，但是我还是只知皮毛，后面的时间我将会继续研究，继续通过这些心理学的东西尝试疗愈自己，也许是一个很漫长的过程，但吾将上下而求索。 所以这篇文章只是我尝试自我疗愈抑郁症的一个开端。","link":"/2023/03/08/%E6%8A%91%E9%83%81%E7%97%87%EF%BC%88%E4%B8%80%EF%BC%89/"},{"title":"大知闲闲","text":"大知闲闲，小知间间；大言炎炎，小言詹詹 -《庄子》 准备给宝宝起名知闲，首先第一个方面是出自上面这句话，意思就是有大智慧的人看上去就显得非常广博。 其次呢，字面意思也比较符合我目前的心境。 然后听起来，整体感觉还挺不错的。 宝宝35周了，离出生还有一个月左右。 期待。","link":"/2023/03/14/%E5%A4%A7%E7%9F%A5%E9%97%B2%E9%97%B2/"},{"title":"crontab的一个小问题","text":"最近家里网断了，交易系统想要正常运行，就得用手机开热点，但是偶尔要出门，就没办法了，而且有时候也会忘记开热点，导致不能及时更新数据，为了摆脱这个烦恼，趁着昨晚失眠的时间，我把交易系统给上云了。 之前的log日志是直接append到一个文件里的，在本地好说，用电脑查看，也没什么不妥。上云后，为了能方便的通过移动设备来访问，于是将日志按照时间来做了切分： /path/to/bin/update_stock_data.sh &gt;&gt; /path/to/logs/update-$(date +%Y%m%d).log 2&gt;&amp;1 然后将这个命令加入了云服务器的crontab，但是怎么都不运行。。 刚开始以为是cron服务没有启动，检查之：service cron status，没问题，active 查看日志：tail -200 /var/log/syslog，发现cron确实执行了，但是没执行成功，显示这么一句： CRON[5629]: (root) CMD (&quot;/root/quantization/bin/update_stock_data.sh &gt;&gt; /root/matrix/logs/update-$(date +) 乍一看，我以为是系统没显示完全，但是命令执行没问题，那是不是这个$()需要双引号引起来呀，改了之后，仍然没有作用， 后来网上搜了一番，才发现，我去，%在cron里被解释成了换行。。。 需要加上\\来进行转义，这样： /path/to/bin/update_stock_data.sh &gt;&gt; /path/to/logs/update-$(date +\\%Y\\%m\\%d).log 2&gt;&amp;1 这样就能执行成功了。","link":"/2023/03/14/crontab%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/"},{"title":"LESS IS MORE","text":"曾经以为只有多做几个标的才能赚的更多 曾经以为同时做更多的标的才能充分利用时间赚的更多 曾经以为上车越频繁才能赚的更多 曾经以为在场时间越长才能赚的更多 曾经以为关注的越多，花的时间越多才能赚的更多 后来发现这一切其实都不对 LESS IS MORE 诚不欺我 同时只做一个标的其实更能行稳致远 上车频率降低，在长时间减少其实更能最小回撤，稳定复利 减少关注，放手才能心态更好 有些东西仅仅知道了并不行，等实践一圈才能理解的更加深刻。 一些解释为什么同时做一个标的比做多个标的更好呢？因为每个标的都有其特有性质，比如做多和做空时间，有时候可能多个标的会做多重叠，有时候会做空重叠，有时候是不重叠的。这就在同时做多个标的时候会导致一个问题，可能本轮上车A，就会错过B，但是上次刚在B赔了钱，如果这轮做B就能干回去，但是做了A，A又没涨多少。或者是在一轮回调时候，A先亏了钱，然后又去做B，导致再亏一次钱，这就是多空点没有重叠导致重复吃伤害。当然了也会有重复吃上涨的可能，只不过重复吃伤害会造成更大的回撤，而重复吃上涨的可能性又小于重复吃伤害的可能。","link":"/2023/03/20/LESS-IS-MORE/"},{"title":"身体问题逻辑闭环","text":"目前身体出现的这些问题，整理了一下逻辑，大概就是上图中所展示的这样。 工作压力开始于2018年，性格心理因素以及家庭这些都是持续影响的。 2018年后确实开始出现了不少的免疫力疾病： 口腔溃疡，虽然不是啥大病，但是以前确实没有得过。一次是吃甘蔗，然后开始溃疡，大概持续一个多星期，没法吃饭，真的难受。后来就再也不吃甘蔗了。 过敏性咳嗽，2020年冬天，突然觉得刺骨的寒冷，没多会就开始咳嗽了，然后一直到现在。。。 上面的这些症状在2022年12月之前也只是慢慢累积和发展，睡眠从之前的醒来后能睡着，到后面的可能偶尔醒来后就睡不着了。但是我猜这些不好的东西累积到一定地步，迟早还是会爆发的。 而新冠病毒是真的厉害，直接加速了这一进程： 咳嗽复发而且加重 睡眠紊乱：以前只是早醒一次，现在一晚上的睡眠可能被切分为五六段，到2-3点之后可能还直接失眠 各种过敏症状，除了过敏性咳嗽，还有各种接触性，食入性过敏症状，这以前都是没有过的 现在我的解决办法： 移除持续输入的压力源：暂时离开工作，尽量避免家庭影响情绪 过敏症状：隔离过敏原，所有已知过敏的过敏原全部不接触和不食入。 尽可能的保证睡眠：调整心理和情绪，治愈心灵。降低房间的光源和噪音影响，辅助一些助眠保健品。 锻炼身体，控制饮食：控制血糖波动，减肥。 首先第一点是从总输入端来控制，这样保证现在已有的问题不会继续恶化。 后面的都是来破除现有的问题： 第二点是解决身体的表征，还有就是过敏症状是可以影响到睡眠的，破除这个恶性循环。 第三点和第四点都是为了提高和恢复自身免疫力。","link":"/2023/03/21/%E8%BA%AB%E4%BD%93%E9%97%AE%E9%A2%98%E9%80%BB%E8%BE%91%E9%97%AD%E7%8E%AF/"},{"title":"蹭网成功🤪","text":"现在住的这个房子是去年9月租的，家里的宽带应该是上一个租客的网，一直能用，所以我就没再拉网，毕竟一年后就搬到新家了，再折腾网络有点麻烦，所以就一直用下去了。 没想到从上个月最后一天开始断网了，一直到现在😅，昨天没事干，下载了个wifi万能钥匙，一打开，我去，有一个信号还不错的有钥匙的网，连上去，能上网！哈哈，这下子就能蹭网了。 打开设置选择分享wifi，出现一个二维码，然后用微信扫一下，wifi密码就出来了，找到wifi密码就好说了。 然后我拿着手机在屋子里转了一圈，发现在客厅信号最好，然后我把手机放到地板上，发现没有变化，然后举高往天花板放，果然信号满格了，那基本上确定了这是楼上邻居的网络。 确定了哪里信号最强后，开始着手构建一个无线mesh！ 手机无线mesh家里有一个没有用的新手机，一开始想的是拿这个手机当作一个跳板，先连上邻居的网，然后开一个网络共享，其他设备连这个手机，理论上应该没啥问题。 但是这样搞了之后，我发现： 这个网络的5G wifi信号在手机上比正常2.4G的信号要弱，连5G的根本没法上网，连2.4G的也不太稳定，动不动就上不了网了。 其他设备连接共享网络基本上只能浏览网页，看不了视频，虽然作为跳板的手机可以正常看视频。 所以我猜手机的天线功率还是太小了，所以打算用笔记本电脑试一下。 笔记本电脑无线mesh用笔记本电脑打开wifi，果然笔记本的天线要好多了，2.4G的网络是满格，5G的网络也只少了一格。 连上5G，在电脑上看视频打游戏那就跟自家网络一样，没问题。 那怎么共享网络呢，查了下，苹果电脑在设置-共享-互联网共享里进行设置 但是我发现mac电脑里没有从wifi入，然后从wifi共享的选项，而手机可以这样操作。 这下有点麻烦了，但是我看有一个蓝牙选项，我就试着打开蓝牙。但是这个功能只有苹果手机能连上，其他手机不行，而且苹果手机连上之后，网速也不太行，看视频看不了，看网页也要卡好久。 那这个方案也作罢。。 笔记本替换光猫做网关在上面共享设置里有一个选项是usb以太网，突然想起来我之前买过一个usb网卡，那怎么用呢？ 家里的路由器连上光猫就可以上网，也就是说光猫及以上的部分的作用就是提供了互联网接入。 那和我现在的场景岂不是一样：光猫以及光猫以上的部分相当于笔记本连上wifi了么！ 于是打开usb以太网共享，将网线一头插到usb网卡上，一头插到路由器的wan口上，啥都不用改。 果然通过原来的wifi信号可以上网了！ 这样那太爽了，家里的所有设备都不用动，因为之前的wifi就能上网。 哈哈，我简直太高兴了，虽然说蹭的邻居的网有点不地道，但是我管不了那么多了，先让我玩几局游戏再说，憋了一个月了🤣","link":"/2023/03/26/%E8%B9%AD%E7%BD%91%E6%88%90%E5%8A%9F%F0%9F%A4%AA/"},{"title":"又睡不着了","text":"今晚又失眠了，肠胃一直不太舒服，好像总是在跳，然后心跳似乎也稍微快了点，神经处于兴奋状态，做冥想也没有什么用处，这种兴奋状态应该是属于潜意识的那种，不受大脑控制，是自发的。 失眠原因应该比较清楚，前天嘴馋，去好利来买了两块面包，前天晚上吃了一块，当天晚上睡眠就有点问题了，总是醒来，但是还好，还能睡着。 昨天早上吃了一块面包，然后晚上还去买了份凉菜，凉菜吃完，肠胃就有点不太舒服，倒也不是菜有问题，而应该是辣或者什么有点刺激，导致肠胃不舒服，放屁也多了起来😅 这两天其他方面和往日没有区别，只有这两点，情绪上也没什么波动，生活没有什么变化，而且最近也根本没有仓位在股市上。 肠道是人体最大的免疫器官，确实还是蛮重要的，以前都没有注意到。食物过敏也是跟肠胃有关系。看来得好好注意这方面了。 以前坐火车有时候会坐硬座，到了晚上空调太冷，我的肠胃就会非常不舒服，拉肚子。 也许我的肠胃不如我想象的那么强，还是要想办法调养一下。 以后： 忍住，坚决不吃可能导致过敏的食物 不吃刺激性的食物，避免肠胃反应过度 控制饮食量，偶尔断食，减少肠胃负担，给肠胃以修复时间 人生在世，吃吃喝喝，哎，这吃喝以后看来是享受不到快乐了😢","link":"/2023/03/29/%E5%8F%88%E7%9D%A1%E4%B8%8D%E7%9D%80%E4%BA%86/"},{"title":"2023Q1——改变，就是好事","text":"2023年的第一个季度，真的是改变很多。 感染新冠病毒后，几将摧垮我的身体和免疫力，然后鼓起勇气提出辞职疗养身体。从长期的慢性压力解脱出来，真的是让我如释重负。但是伴随的身体这些病症仍需要抽丝剥茧式的进行治疗。。。 投资 大概情况就是1月份顺利上涨，然后2月份有比较大的回撤，然后3月份小幅增长。 2月有比较大回撤的原因是因为有一天上车之后下午快速跳水，然后第二天继续下跌，导致这轮上车亏损3.5%，而且这轮也无可避免。快速跳水的原因似乎与战争有关？ 另外FIRE基金比策略回撤更大的原因一个是因为在2月初对止盈系统做了进一步优化，所以2月初的几次上车本来是亏损的，在策略回撤上就扭亏为盈了。这一部分差异不大。 然后3月份交易系统对一次强转弱信号有个误判，这个误判是当时判断加入的时候有些条件扩大化了。这一部分多损失了1个多点。 最后总收益和策略收益持平的主要原因是在1月份FIRE基金把握了当时上涨时机，涨的足够多，而且在高位进行了分红。 下图是策略按天回撤的收益曲线： 在第一季度关于交易系统有三项比较重要的优化： 上云从3月1号开始家里断网了，而下半年就要搬家了，懒得再去办网，所以干脆把交易系统部署到云上了，这样方便点，即使在外面也能看到是否在计算。以前如果出门，就很难知道当前的状态。 止盈系统优化主要是关于止盈系统中判断要不要止盈和止盈多少这两项指标进行了分离，之前都糅合在一起，当然不太科学，分离之后在几乎所有标的上都有很不错的提升。 标的分离年初定的计划是大账号只做宽基标的，但是是糅合在一起的，比如创业板，上证50，科创50，就是谁强做谁。但其实这样做是有些问题的，从回测也能看出来有一段时间回撤相当厉害，而且最大回撤也比较大，不符合我的最小回撤，稳定复利的原则。 查看了那段时间的数据，大概情况就是这样子：上了上证50，回撤，上了科创50，回撤，上了创业板，也回撤，所以导致回撤叠加到一起，造成了更大的回撤。有回撤了不要紧，涨回去就行，但是标的糅合的缺点就在这里，在这些回撤之后的买入信号都是同一天，所以只能选择一个上车，那这不就相当于挨了三份打，吃了一颗枣吗？ 但是如果单个标的拎出来看，每个标的在回撤后，都能把握住下次买入信号涨回去。 那么这里就很清楚了，要做标的分离了，less is more，以为多做几个标的，多上车就能多收益的想法其实不太科学： 回撤可能叠加，但是收益可能并不叠加，虽然这两者的可能性没有计算，但是回撤叠加会造成比较大的最大回撤，体验不好。 每个标的的幅度并不相同，比如上证的最大涨幅是10%，而创业板股票涨幅是20%，那么创业板的股票的波动性就比上证的大很多。如果这一次吃了创业板的回撤，下一次只吃到上证50的枣，那不亏大了。 最后看看回测，在叠加止盈系统优化后，只做创业板的收益虽然和糅合做创业板，上证50，科创50的收益差不多（原因是后者最主要还是创业板），但是曲线明显平滑很多，最大回撤也只有5%，可以说是实现了最小回撤，稳定复利的目标。 Q2策略和目标大账号只做创业板，小账号只做宽基。 收益目标15%。 财务2023Q1是我用beancount记账的第一个完整季度。 一共支出2.76W，其中1月份0.81W，2月份0.93W，3月份1.02W 支出项目和比例大概如下表： 项目 金额 比例 房贷 1.09W 39.3% 交通 0.52W 18.8% 餐饮 0.49W 18.1% 购物 0.46W 16.7% 其他 0.2W 7.2% 哎，房贷太多了。。。 收入的话，Q1主要还是工作收入，投资收入只能覆盖一个交通费用😂一季度实现FIRE失败🤪 今年的投资目标是只要能大概覆盖生活支出就很满足了🤣希望后面3个季度给力点","link":"/2023/04/01/2023Q1%E2%80%94%E2%80%94%E6%94%B9%E5%8F%98%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%A5%BD%E4%BA%8B/"},{"title":"我们与恶的距离","text":"之前也听过这部剧，但是一直没有机会看，现在赋闲在家，没事刷刷剧，这次就是刷倚天屠龙记从敏敏而来。 这部剧刚开始看的感觉有点压抑，但是你也没办法说谁就完全的错，感觉吧就像是让人有一种沉默感，让人开始思考这一切到底是为什么。 我自己呢，其实是有自卑情结和抑郁的，上个月刚去看了医生，医生给开了治抑郁的药，说实话，是非常上头的，只喝了半粒，晕了2天，后来考虑副作用以及可能的戒断反应，我停了，而且我觉得我也没有那么严重。 喝药的感受呢，其实就是让你感觉麻木，我可以在那里坐一天而没有什么感觉，别人说的话就好像是风吹过去一样，轻飘飘的。我想吃药可能就是帮助你走向极端，走向伤害自己伤害他人这条路。其实精神类疾病应该伤害最大的是自己，其次就是身边的人。 影片上说的随机杀人，其实不应该被媒体片面的就和精神疾病挂钩。我们与恶的距离也许真的就是一言之间，而媒体引导了不良舆论，真的可能是会杀人的。 这部电视剧拍的是真好，很容易就让人进入，体会悲伤，感动，然后触发思考，有很强的现实意义。 强烈推荐。","link":"/2023/04/10/%E6%88%91%E4%BB%AC%E4%B8%8E%E6%81%B6%E7%9A%84%E8%B7%9D%E7%A6%BB/"},{"title":"非理性繁荣","text":"断断续续看了2个月 大部分感觉是听君一席话，如听一席话。 不过还算是“卒或有所闻”🤣","link":"/2023/04/11/%E9%9D%9E%E7%90%86%E6%80%A7%E7%B9%81%E8%8D%A3/"},{"title":"Aurora 代理设置","text":"跟网站服务器一样，代理这个现在也懒得折腾，直接用现成免费的，虽然慢点，但是只搜索看文本信息是足够的了。 Aurora 之前是通过代理服务器访问，有个 list 记录了网址规则，然后搭配谷歌插件 SwitchyOmega 来判断不同网址是要用代理还是直接连接，还是蛮香的。 Aurora 最近一次更新改成了 PAC 情景模式，PAC 情景模式就是主要根据 PAC 文件里面的规则来访问网络，所以在 SwitchyOmega 也需要改一下配置 首先到电脑设置-&gt;网络-&gt;高级-&gt;代理-&gt;自动代理配置，查看系统自动识别出来的 PAC 代理配置，我的这里是：http://localhost:51076/FfDwKP81YnT9sXpoe3vXON0C3WJcQvGC/fei.pac 然后到 SwitchyOmega 新增一种情景模式，选择 PAC，填写 PAC 网址，点击立即更新情景模式 应用选项之后，前往 auto switch，把之前需要代理访问的情景模式都改成新的 PAC 模式即可。","link":"/2023/04/16/Aurora-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"}],"tags":[{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"FIRE基金","slug":"FIRE基金","link":"/tags/FIRE%E5%9F%BA%E9%87%91/"},{"name":"casdoor","slug":"casdoor","link":"/tags/casdoor/"},{"name":"投资思考","slug":"投资思考","link":"/tags/%E6%8A%95%E8%B5%84%E6%80%9D%E8%80%83/"},{"name":"读书","slug":"读书","link":"/tags/%E8%AF%BB%E4%B9%A6/"},{"name":"switch","slug":"switch","link":"/tags/switch/"},{"name":"健身","slug":"健身","link":"/tags/%E5%81%A5%E8%BA%AB/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"random","slug":"random","link":"/tags/random/"},{"name":"pip","slug":"pip","link":"/tags/pip/"},{"name":"cte","slug":"cte","link":"/tags/cte/"},{"name":"sql","slug":"sql","link":"/tags/sql/"},{"name":"WebSocket","slug":"WebSocket","link":"/tags/WebSocket/"},{"name":"Tornado","slug":"Tornado","link":"/tags/Tornado/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"subquery","slug":"subquery","link":"/tags/subquery/"},{"name":"趋势梭哈","slug":"趋势梭哈","link":"/tags/%E8%B6%8B%E5%8A%BF%E6%A2%AD%E5%93%88/"},{"name":"sso","slug":"sso","link":"/tags/sso/"},{"name":"经济","slug":"经济","link":"/tags/%E7%BB%8F%E6%B5%8E/"},{"name":"世界","slug":"世界","link":"/tags/%E4%B8%96%E7%95%8C/"},{"name":"危机","slug":"危机","link":"/tags/%E5%8D%B1%E6%9C%BA/"},{"name":"Chartjs","slug":"Chartjs","link":"/tags/Chartjs/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"covid-19","slug":"covid-19","link":"/tags/covid-19/"},{"name":"装修","slug":"装修","link":"/tags/%E8%A3%85%E4%BF%AE/"},{"name":"beancount","slug":"beancount","link":"/tags/beancount/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"交易系统","slug":"交易系统","link":"/tags/%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F/"},{"name":"策略","slug":"策略","link":"/tags/%E7%AD%96%E7%95%A5/"},{"name":"冥想","slug":"冥想","link":"/tags/%E5%86%A5%E6%83%B3/"},{"name":"unittest","slug":"unittest","link":"/tags/unittest/"},{"name":"pytest","slug":"pytest","link":"/tags/pytest/"},{"name":"cookiecutter","slug":"cookiecutter","link":"/tags/cookiecutter/"},{"name":"投资","slug":"投资","link":"/tags/%E6%8A%95%E8%B5%84/"},{"name":"心理学","slug":"心理学","link":"/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"},{"name":"疫情","slug":"疫情","link":"/tags/%E7%96%AB%E6%83%85/"},{"name":"救世主","slug":"救世主","link":"/tags/%E6%95%91%E4%B8%96%E4%B8%BB/"},{"name":"宝宝","slug":"宝宝","link":"/tags/%E5%AE%9D%E5%AE%9D/"},{"name":"旅行","slug":"旅行","link":"/tags/%E6%97%85%E8%A1%8C/"},{"name":"睡眠","slug":"睡眠","link":"/tags/%E7%9D%A1%E7%9C%A0/"},{"name":"年度计划","slug":"年度计划","link":"/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"},{"name":"免疫系统","slug":"免疫系统","link":"/tags/%E5%85%8D%E7%96%AB%E7%B3%BB%E7%BB%9F/"},{"name":"道","slug":"道","link":"/tags/%E9%81%93/"},{"name":"凯恩斯主义","slug":"凯恩斯主义","link":"/tags/%E5%87%AF%E6%81%A9%E6%96%AF%E4%B8%BB%E4%B9%89/"},{"name":"自由经济主义","slug":"自由经济主义","link":"/tags/%E8%87%AA%E7%94%B1%E7%BB%8F%E6%B5%8E%E4%B8%BB%E4%B9%89/"},{"name":"过敏","slug":"过敏","link":"/tags/%E8%BF%87%E6%95%8F/"},{"name":"FIRE","slug":"FIRE","link":"/tags/FIRE/"},{"name":"失眠","slug":"失眠","link":"/tags/%E5%A4%B1%E7%9C%A0/"},{"name":"心理","slug":"心理","link":"/tags/%E5%BF%83%E7%90%86/"},{"name":"抑郁症","slug":"抑郁症","link":"/tags/%E6%8A%91%E9%83%81%E7%97%87/"},{"name":"baby","slug":"baby","link":"/tags/baby/"},{"name":"crontab","slug":"crontab","link":"/tags/crontab/"},{"name":"共享网络","slug":"共享网络","link":"/tags/%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C/"},{"name":"电视剧","slug":"电视剧","link":"/tags/%E7%94%B5%E8%A7%86%E5%89%A7/"},{"name":"代理","slug":"代理","link":"/tags/%E4%BB%A3%E7%90%86/"}],"categories":[{"name":"碎碎念","slug":"碎碎念","link":"/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"},{"name":"投资","slug":"投资","link":"/categories/%E6%8A%95%E8%B5%84/"},{"name":"程序员","slug":"程序员","link":"/categories/%E7%A8%8B%E5%BA%8F%E5%91%98/"},{"name":"运动","slug":"运动","link":"/categories/%E8%BF%90%E5%8A%A8/"},{"name":"读书","slug":"读书","link":"/categories/%E8%AF%BB%E4%B9%A6/"},{"name":"年度计划","slug":"年度计划","link":"/categories/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"},{"name":"自愈","slug":"自愈","link":"/categories/%E8%87%AA%E6%84%88/"},{"name":"季度报告","slug":"季度报告","link":"/categories/%E5%AD%A3%E5%BA%A6%E6%8A%A5%E5%91%8A/"},{"name":"看剧","slug":"看剧","link":"/categories/%E7%9C%8B%E5%89%A7/"}],"pages":[{"title":"关于我","text":"大学学的鱼雷发动机， 读了一年博士， 转行去做了程序员， 后来写了一个交易系统， 所以又开始做交易了， 。。。 人生就是这样，有无限可能～","link":"/about/index.html"},{"title":"FIRE 基金养老版","text":"因为个人精力原因，暂时下线该组合的更新 对，这个也是 FIRE 基金，不过它是养老版，所以更加注重于 低频操作，长期，高分红和稳定。 另外操作标的也与 FIRE 基金有所不同，FIRE 基金主要为场内的 ETF 基金，而养老版主要操作标的为场外的 ETF 链接基金或者是高分红股票组合。 从2022年10月开始在这里记录 FIRE 基金养老版的成长（每月更新一次） 给定1月1日累计净值：1.0000 选择标的股票型基金 名称 占比 上证50 ETF 30% 红利 ETF 25% 双创 ETF 20% 沪深300 ETF 10% 深红利 ETF 10% 银行 ETF 5% 注： 沪深300 ETF 买入日期跟随上证50 ETF 占比为每次买入金额的占比 股票 名称 占比 注： 资金来源于 FIRE 基金的盈利 选择标的为各行业 ETF 的龙头 买入日期为各行业 ETF 发买入信号的时候 本月净值2022年11月30日 单位净值：1.0191 累计净值：1.0191 累计分红：0 较上月上涨：0.36% 累计上涨（较1月1日）：1.91% 净值曲线下面是基金从2022年1月开始到现在的净值（累计净值）曲线图： var ctx = document.getElementById('chart8298').getContext('2d'); var options = { type: 'line', data: { labels: [ '2022-1-1', '2022-9-30', '2022-10-31', '2022-11-30', ], datasets: [ { label: 'FIRE 基金养老版累计净值', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(255, 99, 132)', data: [ 1.0000, 1.0141, 1.0154, 1.0191, ] }, { label: '沪深300', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(99, 132, 255)', data: [ 1.0000, 0.7702, 0.7102, 0.7799, ] }, { label: '创业板50', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(99, 255, 132)', data: [ 1.0000, 0.6790, 0.6713, 0.7002, ] }, ] }, options: { responsive: true, title: { display: true, text: '基金净值曲线' } } }; new Chart(ctx, options); 注： 累计净值：是基金成立以来每天增减量的累加，包含了所有分红的数据。 单位净值：指的是某一天该基金的单位价值，即该基金当天的价格。 当前持仓 名称 当前比例 同比增减 货币基金 96.41% -2.23% 上证50 ETF 1.1% 0.66% 中证500 ETF 0.31% 0.02% 银行 ETF 0.33% 0.11% 上证红利 ETF 0.68% 0.46% 沪深300 ETF 0.54% 0.41% 深证红利 ETF 0.27% 0.21% 双创 ETF 0.36% 0.36% 基金月报 FIRE基金养老版月报(202211) FIRE基金养老版月报(202210)","link":"/funds-for-old/index.html"},{"title":"FIRE 基金","text":"2023年开始，改为每季度更新一次报告。在这里会每月更新净值情况 嗯，是的，我建立了一个基金。就叫它 FIRE 吧，代表我向往的 FIRE 生活。 2023年净值曲线下面是基金2023年净值（累计净值）曲线图： var ctx = document.getElementById('chart1535').getContext('2d'); var options = { type: 'line', data: { labels: [ '2023-1-1', '2023-1-31', '2023-2-28', '2023-3-31', '2023-4-21', ], datasets: [ { label: 'FIRE 基金累计净值', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(255, 99, 132)', data: [ 1.0000, 1.0564, 1.0113, 1.0161, 1.0255, ] }, { label: '策略收益率', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(132, 99, 255)', data: [ 1.0000, 1.0239, 1.0028, 1.0169, 1.0328, ] }, { label: '沪深300', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(99, 132, 255)', data: [ 1.0000, 1.0737, 1.0510, 1.0461, 1.0414, ] }, { label: '创业板50', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(99, 255, 132)', data: [ 1.0000, 1.1097, 1.0235, 0.9936, 0.9628, ] }, ] }, options: { responsive: true, title: { display: true, text: '基金净值曲线' } } }; new Chart(ctx, options); 2023Q1——改变，就是好事 2022年净值曲线下面是基金2022年的净值（累计净值）曲线图： var ctx = document.getElementById('chart9104').getContext('2d'); var options = { type: 'line', data: { labels: [ '2022-1-1', '2022-1-31', '2022-2-28', '2022-3-31', '2022-4-30', '2022-5-31', '2022-6-30', '2022-7-31', '2022-8-31', '2022-9-30', '2022-10-31', '2022-11-30', '2022-12-31', ], datasets: [ { label: '策略收益率', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(132, 99, 255)', data: [ 1.0000, 1.0169, 1.0253, 1.0396, 1.1019, 1.1363, 1.1900, 1.1971, 1.2054, 1.2232, 1.1620, 1.2069, 1.1996, ] }, { label: '沪深300', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(99, 132, 255)', data: [ 1.0000, 0.9237, 0.9273, 0.8547, 0.8130, 0.8281, 0.9079, 0.8441, 0.8255, 0.7700, 0.7101, 0.7800, 0.7836, ] }, { label: '创业板50', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(99, 255, 132)', data: [ 1.0000, 0.8731, 0.8584, 0.7942, 0.6926, 0.7160, 0.8473, 0.8008, 0.7699, 0.6791, 0.6713, 0.7004, 0.7016, ] }, ] }, options: { responsive: true, title: { display: true, text: '基金净值曲线' } } }; new Chart(ctx, options); 2021年净值曲线下面是基金2021年的净值（累计净值）曲线图： var ctx = document.getElementById('chart9840').getContext('2d'); var options = { type: 'line', data: { labels: [ '2021-1-1', '2021-1-31', '2021-2-28', '2021-3-31', '2021-4-30', '2021-5-31', '2021-6-30', '2021-7-31', '2021-8-31', '2021-9-30', '2021-10-31', '2021-11-30', '2021-12-31', ], datasets: [ { label: '策略收益率', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(132, 99, 255)', data: [ 1.0000, 1.0051, 1.0322, 1.0789, 1.1128, 1.1274, 1.1427, 1.2085, 1.2246, 1.2409, 1.2923, 1.3264, 1.3330, ] }, { label: '沪深300', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(99, 132, 255)', data: [ 1.0000, 1.0270, 1.0241, 0.9687, 0.9832, 1.0230, 1.0024, 0.9232, 0.9220, 0.9337, 0.9418, 0.9272, 0.9479, ] }, { label: '创业板50', backgroundColor: 'rgba(0,0,0,0)', borderColor: 'rgb(99, 255, 132)', data: [ 1.0000, 1.0662, 0.9951, 0.9348, 1.0708, 1.1567, 1.2310, 1.2219, 1.1255, 1.1504, 1.1994, 1.2482, 1.1686, ] }, ] }, options: { responsive: true, title: { display: true, text: '基金净值曲线' } } }; new Chart(ctx, options); 注： 累计净值：是基金成立以来每天增减量的累加，包含了所有分红的数据。 单位净值：指的是某一天该基金的单位价值，即该基金当天的价格。","link":"/funds/index.html"}]}
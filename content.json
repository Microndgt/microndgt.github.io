{"posts":[{"title":"2022年4月","text":"之前的趋势梭哈系统每月总结决定不再更新了，其一是现在投资策略基本已成，变动不大，也不太需要专门记录了，其二是想在每月总结中加一点其他的内容，比如本月发生的事情，自己的思考等。所以就直接改成每月总结得了。 那首先还是记录一下投资方面的事情，本月收益率5.3%。四月行情非常差，但是没想到四月份是收益最高的一个月 果然危机，危中有机，收益主要来自4月的最后几天，真是柳暗花明又一村。 关于投资策略的一些思考，现在我觉得似乎可以考虑开始建一些长期仓位，但是也只能是非常小的仓位，因为我对当前世界经济形势还是有非常强的担忧的，毕竟现在没有破局之法，除非全球各国之间进行合作，但是这非常难。全球经济大国，中国和美国现在这种基本对立的情况，问题是没法解决的。所以保持长期仓位这个还是得慎之又慎，再继续看看吧，不着急，按照策略的短期操作在2月，3月，4月都取得了3+%的收益率，所以完全不用担心。 4月开始读围城这本书，以前一直在kindle上断断续续的看，一直没有看完，这次是之前凑单买的纸质书，发现看起来非常有感觉，而且感觉很好看。好看的一点原因是我有点浸入到书中的世界了，觉得他们的生活很有意思，估计是因为我自己的生活太乏味了～ 另外一点就是我觉得我挺像方鸿渐的，凡事糊里糊涂没有主见，主要还是内心有点脆弱不够强大，遇到事情第一个想到的可能是逃避。 现在在城市的生活，白天上班，晚上睡觉真的是有点枯燥，然后周末也不知道干啥，百无聊赖，无所事事。五一假期一回到农村，就感觉节奏就慢起来了，似乎大脑神经也放松起来了。说实话，我现在有点想去农村躺平了，种种花，养养动物啥的。一回到城市就感觉神经紧张，各种事情得面对，最近要面对的一个大事情就是装修，真太花钱了，随随便便几十万的花费，为啥一定要在城市高花费低生活质量呢？我现在在这个刚需盘的房子里已经花了200W了，我有这200W去农村生活不好吗？ 工作上，也许是我身体原因吧，反正每天上一天班我眼睛就很不舒服，现在甚至有时候会视野变花，然后等一会才会恢复，眼睛疲惫是常事，表现就是肿胀，酸疼，有时候会痒，飞蚊症越来越明显。去看医生，医生就说少看屏幕，可是现在工作怎么才能少看屏幕呢，之前下班回来还会看会书（电脑上看），或者看会视频，有时候会打游戏，现在晚上回来，一个屏幕都不想看，9点多早早就睡觉了，就这样，每天白天眼睛还依然很难受。我在想，这样的生活质量，我不知道在坚持什么？我真怕啥时候瞎了。 算了，不说这些负能量了，没有意义，抱怨解决不了问题，只有尝试解决才会。","link":"/2022/05/02/2022%E5%B9%B44%E6%9C%88/"},{"title":"2022年5月","text":"时间流逝之快，超出我的想象。之前好像还能稍微抓住它，现在只能任其飘散。越是这样，我心里会越慌，然后越来越麻木，任其流逝，最终回过头来只能懊悔。我不太喜欢这样快节奏的生活，太空虚，整个人似乎只是为了工作，为了钱而活着，其他方面没有可以想象的空间。 我想去乡村生活，有一片自己的土地，可以种想种的东西，蔬菜瓜果，花草树木，养一些小动物，每天起来读书写字，远离焦虑，然后这样慢下来生活。 不扯这些了，说说这个月实际发生的事情 装修首先这个月开始收房装修了，五一假期的时候就把主材订了，差不多20W吧，然后收房补的面积差价，交的大修基金下来就有快3W了。收房之后等了一个周开始办装修手续，办装修手续又办了一个周，这物业实在是太差劲了，好不容易到5月29日才开工。 开工先搞的事情就是铲素灰，铲保温墙，砸墙，我们改了户型设计，将两个卫生间合并成一个卫生间了，所以砸了不少墙，砸墙就花了1600。这第一步铲砸和运垃圾一共花了4700。 5月整个在装修上做的事情就只有这些了，效率实在是太低了。截至今天，6月1日完成了新风和空调的安装，6月3日开始砌墙，这个砌墙其实就是改卫生间那块的设计，墙砸了还要按设计重新砌一下，估计就到6月4日完工，下来就是水电改造工程。 装修太花钱了，让人感觉就是一个千疮百孔的容器，里面的水（水就好比你的资金）止不住的流，但是你往进加水的速度又太慢了。而且本来以为装修仅仅是花钱的事情，没想到里面要操心的事情太多了，比如地暖会不会漏水，天花板上的下水管道会不会漏水，空调新风打的孔会不会有问题，这些都是之前没有遇到过的问题，心里容易慌。搞的现在花钱都是小问题了，只要顺利完成装修才是我现在心里着重希望的事情。 投资股市方面，本月收益率5%，主要还是两次创业板上车的盈利，其他打野标的也就是赚了亏，亏了赚，对收益率没有啥贡献，主要还是创业板。红利其实也有所表现，只不过当时上的仓位比较少，盈利不多，收益率的话也有2%。现在交易已经省心省力了，我的交易系统已经逐渐稳定成型了。 在市场里持续赚钱，就得去重复那些让自己能赚钱的事儿，避免那些让自己亏钱的事儿和运气主导的事儿。所以得总结，做对的事儿继续做，犯过的错不再犯，业绩就会逐渐提高。我觉得现在就已经走在这条正确的路上了。 现在有一个问题，就是按照交易系统操作，其实会漏掉一部分收益，因为现在的原则就是有收益就止盈，像5月30日到6月2日的这波创业板行情，我是5月30日上车的，5月31日上涨2%，这天的收益全部满仓吃上，然后6月1日挂止盈单清仓，但是6月1日又上涨了快1%，6月2日上涨了2.5%，相当于我少吃了至少3%的收益。 现在似乎确实没有什么解决办法，因为你并不知道一波趋势来了之后，会持续多久。像从2021年12月到现在的创业板走势，大多时候一波趋势也就两三天，我的系统就能完美处理这种情况。再从另外一个角度来看，我现在定的每个月收益率目标是5%，那只要达到我的目标，哪怕少挣点，其实没什么问题，毕竟你不可能把市场的收益吃干榨净。我觉得只要能够实现稳定盈利，慢慢积累就够了，人要是贪婪起来就没完没了了。 另外我除了创业板还会做红利，还有其他标的啊，在创业板转弱的时候，还能继续在红利上取得收益，综合来看其实比创业板的收益差不了多少。所以这个问题其实并不是问题，之所以这个会成为问题，还是人性贪婪。 将来的生活计划6-7月要娃，现在时间一步步接近，但是总是觉得忧心忡忡，比较担心将来有娃之后的生活怎么应对，谁来带娃？ 目前来说最佳方案就是我在家办公，然后请一个保姆仅工作日白天来做饭看娃，这样应该是最好的方案。但是找到一个在家办公的工作确实不易，也不知道我们公司能不能给我搞个特殊。此乃上上策。 如果不能搞特殊，那要么就是我去找个远程的工作，难度比较大。此乃中策。 要么就是我不工作了，我自己看娃，省一个保姆的钱，然后自己靠股市生存，这是下下策。因为没有工作的话，自己的交易心态就会有比较大的影响，具体有多大，没经历过，也不知道。 这仅仅是谁来带娃的问题，其他小问题我想肯定只会多不会少。现在压力真的很大，工作压力：各种被优化，被毕业，工作上还各种卷，上班一天已经筋疲力尽了。经济压力：房租房贷装修，三座大山，我现在房贷+房租一个月1W+。生活压力：很多琐碎的事情你也要去应付，因为没有人帮你做。 这样的情境下，既没心情，没时间消费，也没能力消费。一天天的发消费券，有个P用，能不能直接发钱，让我先把房贷还一下。","link":"/2022/06/03/2022%E5%B9%B45%E6%9C%88/"},{"title":"Switch铁人三项","text":"Switch铁人三项就是：健身环大冒险，有氧拳击，舞力全开，这三个我都有，聊聊体验吧。 接触Switch就是从健身环大冒险开始的，而这一切又都是从疫情开始的，在疫情之前从来没有想过还会在家里健身，潜意识里都是健身房，而疫情改变了这一切，改变了人的认知。 健身环大冒险因为疫情爆火，而我也在2020年12月开始Switch铁人三项之旅。 首先是健身环大冒险，做的挺不错，也挺科学的，有氧运动+无氧运动结合，搭配闯关剧情，很容易让人坚持下来，也有趣味性。刚开始的时候因为在家办公，所以我经常玩，后来去办公室上班后，每天下班之后就感觉累成狗，基本上工作日晚上就没玩过几次了，基本上都是周末玩一会。 买了健身环大冒险一个多月后，出了舞力全开这款游戏，当时就是为了尝试体验一下，后来发现这个游戏打开的机会屈指可数，主要还是我没有节奏感，不会跳舞，玩这个游戏就是群魔乱舞，基本上毫无体验感和成就感可言。所以一般玩家可以跳过这个游戏，除非喜欢跳舞。 有氧拳击是最近买的一款游戏，主要特点就是专于有氧运动，一天的运动量在40分钟左右，消耗能量300大卡左右，平均心率在130左右，每次练完一身汗，非常舒服。这款游戏从强度来说没有健身环累，主要是健身环有更多的无氧运动，比如有时候持续深蹲，就非常累，而有氧拳击全程有氧运动，心率很均匀，所以不容易疲劳。 跑步也是一项持续的有氧运动，但是跑步这件事情对于大体重的选手来说非常容易损伤膝盖，所以有氧拳击就是一项非常好的替代品。 后面的健身计划： 第一步，继续有氧拳击，争取每天都能玩一次，加强心肺功能，提高基础代谢水平，然后让体重降下来。 第二步，逐渐开始健身环大冒险，适应一下更多的无氧运动，肌肉训练。 第三步，开始逐步恢复囚徒健身，增大肌肉训练。 至于囚徒健身，之前练过一段时间，后来有所懈怠，后面会再写篇文章介绍一下。","link":"/2022/07/30/Switch%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/"},{"title":"WINTER IS COMING","text":"疫情以来的世界，慢慢变的有点失控。 首先疫情已经给世界带来诸多的负面影响了，旅游业受到重创，很多新建景点已经人流稀少，甚至关门大吉，这是最直接可以感受到的。其次每次疫情的爆发都需要大量的社会资源来进行检测，隔离，而且每一次封控都会造成经济活动的停滞，这又反过来减少了社会资源的产出。 最近，上海疫情持续恶化，每天都是几万例，上次听到这个级别的数字也还是疫情初始的武汉，但是过去了这么长时间了，经历了多少次疫情在各个城市的爆发，现在上海依然是防控不住，而且还造成这样的爆发性传染，实在是让人咂舌。从新闻来看，似乎上海就是从0开始防疫，防疫中出现的问题，之前的城市比如西安也都出现过。 国家是时候得发挥中央的优势了，比如组建国家级别的防疫小组，在各地积累经验，然后在爆发疫情的城市指导抗疫工作。另外一码通我觉得也有必要实行全国统一，不能让这些城市各自为战，而是全局统筹规划才行。 刚才看了下高德地图，东部很多地方都出现了因为疫情封路的情况，广州可能又要开始一轮疫情爆发，而西安听说今天已经封了好几个地方。看这架势，今年的经济可能真的没法保住了。 而全球局势也是动荡不安，俄罗斯乌克兰战事依然持续，北约势力还在继续拱火……看看最近的汽油价格，92#都已经快9块了，我也已经一个多月没有加过油了。 如果真这么持续下去，今年下半年或者明年发生金融危机的可能性就非常大了。 那么作为个人，我觉得无非就是想办法增加收入，增加存款，减少开支，减少负债。工作上好好工作，不要轻易辞职，生活上保护好自己的家人。投资上减少股票类型投资，主要做保本的货币类理财。","link":"/2022/04/09/Winter-is-coming/"},{"title":"Tornado 实现的 WebSocket 简单例子","text":"Server 部分，主要就是继承 WebSocketHandler 实现了个 WebSocket Handler 1234567891011121314151617181920212223242526272829303132333435363738394041import loggingimport tornado.webimport tornado.websocketimport tornado.ioloopimport tornado.optionsfrom tornado.options import define, optionsdefine(&quot;port&quot;, default=3000, help=&quot;run on the given port&quot;, type=int)class Application(tornado.web.Application): def __init__(self): handlers = [(r&quot;/&quot;, MainHandler)] settings = dict(debug=True) tornado.web.Application.__init__(self, handlers, **settings)class MainHandler(tornado.websocket.WebSocketHandler): def check_origin(self, origin): return True def open(self): logging.info(&quot;A client connected.&quot;) def on_close(self): logging.info(&quot;A client disconnected&quot;) def on_message(self, message): logging.info(&quot;message: {}&quot;.format(message))def main(): tornado.options.parse_command_line() app = Application() app.listen(options.port) tornado.ioloop.IOLoop.instance().start()if __name__ == &quot;__main__&quot;: main() Client 部分 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#!/usr/bin/env python# -*- coding: utf-8 -*-from tornado.ioloop import IOLoop, PeriodicCallbackfrom tornado import genfrom tornado.websocket import websocket_connectclass Client(object): def __init__(self, url, timeout): self.url = url self.timeout = timeout self.ioloop = IOLoop.instance() self.ws = None self.connect() PeriodicCallback(self.keep_alive, 20000).start() self.ioloop.start() @gen.coroutine def connect(self): print(&quot;trying to connect&quot;) try: self.ws = yield websocket_connect(self.url) except Exception as e: print(&quot;connection error&quot;) else: print(&quot;connected&quot;) self.run() @gen.coroutine def run(self): while True: msg = yield self.ws.read_message() if msg is None: print(&quot;connection closed&quot;) self.ws = None break def keep_alive(self): if self.ws is None: self.connect() else: self.ws.write_message(&quot;keep alive&quot;)if __name__ == &quot;__main__&quot;: client = Client(&quot;ws://localhost:3000&quot;, 5) 运行 Server 和 Clinet 之后输出如下： Server 部分 12345[I 220805 10:49:12 server:27] A client connected.[I 220805 10:49:32 server:33] message: keep alive[I 220805 10:49:52 server:33] message: keep alive[I 220805 10:50:12 server:33] message: keep alive[I 220805 10:50:13 server:30] A client disconnected Client 部分 12trying to connectconnected","link":"/2022/08/05/Tornado-%E5%AE%9E%E7%8E%B0%E7%9A%84-WebSocket-%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90/"},{"title":"写hexo博客的绝佳工具——hexo-client","text":"最近逛Github，发现了一款写hexo博客的绝佳工具——hexo-client，非常好用，在这安利一下。 以前写hexo博客都是用IDE加载整个项目文件夹，在其中编辑，然后利用hexo命令在终端进行操作。有几个地方不是很方便： 上传图片的时候的操作很繁琐，首先需要把图片挪到对应文件夹下，然后在文章里面用markdown语法插入对应的图片地址。 没有markdown的编辑器，有时候一些语法还得现查 没法按照分类和标签来展示文章 IDE编辑完成后，还得在终端去执行发布命令 现在这款hexo-client工具完美解决了上面的问题，它提供了一个很好用的markdown编辑器，如下图： 然后上传图片的时候也很方便，点击编辑器里面的图片按钮，上传即可，工具会自动帮你上传到指定的图片文件夹下，并且会重命名，比如上面这张图片的地址是这样的： ![WX202207301024142x.png](/images/2022/07/30/66ef87ce-a338-4597-9de5-2f3b73084553.png) 很方便有木有，另外首页界面的文章也可以按照分类，标签展示，一目了然： 最后最牛的一点，工具可以一键发布，太爽了有木有： 太好用了，又激起我写博客的热情了，感谢 gaoyoubo！","link":"/2022/07/30/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%9D%E4%BD%B3%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94hexo-client/"},{"title":"以前的hexo博客源码没了","text":"以前的hexo博客源码没了，只能重新开一个了～ 之前搭建的博客服务器到期了，也没有动力继续维护了，算了，然后过期就被收回了 输出其实是个挺耗精力的事情，可能得很久才能攒出一篇正儿八经的文章或者视频 可能还是执行力不太够，现在挖的坑越来越大 想做的事情太多了～ 一件一件来吧 不过博客这个东西最好还是保持持续性吧 后面会把之前的精选文章挪进来 不太喜欢用类似博客网站的东西，觉得太不够私人了 那就从github这个pages重新开始吧 现在有一个宏大的设想，正在一步一步实现，这个过程也会记在这里 慢慢来搞吧","link":"/2022/01/13/%E4%BB%A5%E5%89%8D%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E6%B2%A1%E4%BA%86/"},{"title":"不断的正反馈","text":"炒股嘛，需要不断正反馈才能更有信心 这里就需要高胜率，也就是说干一次成一次，大部分都能成，这样才敢继续干，干了之后心态才能好，才有信心，这是第一步。 保证能成的同时，还需要保证干不成的那次亏损不能太多，不能干成很多次，但是一次干不成就把前面很多次干成的利润全吞掉了，这样肯定不行，因为这样就挣不着钱了。所以光胜率高也没用，需要回撤也低。这里相当于赔率，赔率其实没有明确的定义，而在投资里面可以这样理解，比如盈利可获利40%，反之则亏损20%，那么它的赔率就是40/20=2，所以我们需要保证低回撤其实就是需要保证高赔率。 评价一个策略是否能成就要看它是否是盈利正期望的，而决定是否盈利正期望的就是高胜率，低回撤（高赔率）。 上图是趋势梭哈系统使用组合模式的历史收益曲线，很明显它就是一个高胜率，低回撤（高赔率）的交易系统。这段时间经过实践也能体会到这一点，现在已经执行6次了，每次都是盈利的。 星辰大海，岂不是就在眼前～","link":"/2022/02/09/%E4%B8%8D%E6%96%AD%E7%9A%84%E6%AD%A3%E5%8F%8D%E9%A6%88/"},{"title":"初识 Casdoor","text":"最近工作需要研究了下Casdoor： Casdoor is a UI-first Identity Access Management (IAM) / Single-Sign-On (SSO) platform based on OAuth 2.0, OIDC, SAML and CAS. 简介Casdoor 是一个开源的单点登录系统，单点登录系统的好处就是集中管理用户，使的我们开发的应用只需要关心业务逻辑而不用每个应用都是去实现一套用户系统。 Casdoor 使用了 OAuth2 的方式来完成单点认证，大概逻辑如下图： 总结一下就是： 第一步 获取code 第二步 用code获取access_token 第三步 用access_token获取所需要的资源 安装服务安装文档 文档说的很明白，我这里是下载源码使用的，因为我用的PostgreSQL，所以需要改一下app.conf和adapter.go。 然后后端启动：go run main.go 后端启动： 123cd webyarn installyarn start 非常简单 界面配置这里我是用最小的改动来完成对接demo的，首先需要添加一个组织，组织就是一堆资源，应用的的集合： 后面的用户，角色，权限，模型，提供商都可以先不管，需要了解的可以看文档 然后需要添加一个新的应用，主要就是下图这些 客户端ID和客户端密钥，都是后面对接时候需要的 还有一个就是证书，这个不需要改，只需要点编辑进入将公钥拿到 上面就是在界面上需要完成的事情和完成一个对接demo所需要的数据了 web 对接下面是和 Casdoor 对接的 web 接口代码，主要有两部分，第一部分是获取 code，第二部分是通过 code 获取 access_token，而这个 access_token 已经包含了用户信息，用对应的公钥进行解密，即可得到一个用户的 json 数据。 123456789101112131415161718192021222324252627282930313233343536373839404142434445import loggingfrom urllib.parse import urljoinfrom casdoor import CasdoorSDK@route(r'/casdoor/sso-login')class CASDoorSSOLoginHandler(BaseHandler): def save_user(self, user_data): user = User.make_user(uid=user_data['id'], ext_uname=user_data['name'], username=user_data['name'], _from='casdoor') return user def get(self, *args, **kwargs): code = self.get_argument('code', None) target_uri = self.get_argument('target_uri') subpath = config.get_config(&quot;webif.redirect_subpath&quot;, '') trident_base = urljoin(self.origin_host, subpath.lstrip('/')) endpoint = config.get_config('casdoor_auth.endpoint') client_id = config.get_config('casdoor_auth.client_id') client_secret = config.get_config('casdoor_auth.secret') org_name = config.get_config('casdoor_auth.org_name') certificate = config.get_config('casdoor_auth.cert') sdk = CasdoorSDK( endpoint, client_id, client_secret, certificate, org_name, ) if code: access_token = sdk.get_oauth_token(code) user_data = sdk.parse_jwt_token(access_token) user = self.save_user(user_data) self.session['proxy_user_id'] = str(user.id) redirect_url = urljoin(trident_base, target_uri) else: origin_url = '{}/api/v1/casdoor/sso-login?target_uri={}'.format(trident_base, target_uri) redirect_url = sdk.get_auth_link(origin_url, state='casdoor') logging.info('redirect to %s', redirect_url) return self.redirect(redirect_url) 配置也比较简单： 这里需要特别注意的是，endpoint 配的是 Casdoor 访问的首页地址，也就是这里是前端地址，而不是后端地址。前端地址是：http://localhost:7001/，后端地址是：http://localhost:8000/，这里很有迷惑性，让我折腾了半天。","link":"/2022/08/04/%E5%88%9D%E8%AF%86-Casdoor/"},{"title":"围城","text":"花了大概一个多星期，读完了围城这本书。 其实在我看来，围城只不过是人的天生逃避罢了，遇到问题就会觉得之前的境况能好一点，其实只要有想逃避的念头，哪里都是围城。 书中有一段话我觉得很有意思： 天下只有两种人。比如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留到最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。不过事实却适得其反，缘故是第二种人还有希望，第一种人只有回忆。 以前我用kindle尝试读过一次，但是没读下去，主要是一开始的内容有点乏味。不过这次反倒觉得越读越有意思，我想了想原因，可能是我觉得里面任意一个人物的生活都比我的生活有意思，我有点浸入的感觉了。。就好像进入了别人的世界，忘记了自己现在枯燥的生活。 另外我感觉我有点像方鸿渐，啥事糊里糊涂没有主见，生活呢也是一塌糊涂，混沌度日，然后自尊心还强。。 有人说，每个人都能从《围城》中找到自己的影子，也许他就是我在本书中找到的影子。","link":"/2022/05/09/%E5%9B%B4%E5%9F%8E/"},{"title":"我在伊朗长大","text":"这几天疫情又开始蔓延了，所以还是尽量宅在家里吧，宅在家里能做的就是看书，看电视，打游戏，偶尔健个身，虽然看着无聊，但是能看书，看电视，能去了解别人的世界，就已经非常有趣了。 今天又看完了一本书——《我在伊朗长大》，这是一本漫画书，讲的是作者从10岁到24岁，即1980年至1994年间的生活记录。这期间，伊朗在伊斯兰革命之后建立了伊朗伊斯兰共和国，随后与邻国伊拉克打了八年战争，大量戴着天堂钥匙的年轻男孩被送到战场上。作者在1984年14岁时离开伊朗求学奥地利，此时两伊战争正酣。1988年作者回到伊朗，在一度消沉之后，通过国家考试进入大学，1994年毕业后再次离开伊朗。本书虽是作者十四年间的个人成长史或者说是私人生活小史，但透过一个儿童、以及一个离开祖国四年后又重回伊朗并在那里度过四年大学时光的年轻女孩的眼睛来观察伊朗，对于了解伊朗这个政教合一的意识形态国家还是别有一番启示。 伊朗跟朝鲜一样都是一个让人觉得神秘的国家，而伊朗比朝鲜更多的有一种恐怖主义的印象，人们一提起那个波斯古国，真的就是原教旨主义、狂热主义和恐怖主义。宗教并没有错，错的只是人们的利用方式。看这本书让人感觉到是当局一小部分人而非普通民众有这种狂热，想通过这些方式来控制民众，但是这只属于少数极端分子的行为，仍然有一大批为了捍卫自由的斗士，以及受到迫害的普通伊朗民众。 看完这本书，对伊朗有了更进一步的了解。 下面摘录一些觉得有意思的语句： 只有当灾难还能承受的时候我们才会自怨自艾，一旦超越了这个限度，忍受无法忍受的痛苦的唯一办法就是一笑置之。 我的爸爸他们在哪里？为什么他们不能把我搂在怀里安慰我？ 其实我没有什么可哭的。 我只是挽回了自己的尊严。 一年里我第一次感到自豪。我终于明白了外婆的意思，如果我自己不能感到内心的平静，我就永远平静不下来。 人必须教育自己。 生命只有一次，你有责任把它过得精彩。 人可以原谅，但绝不应该忘记。","link":"/2021/08/01/%E6%88%91%E5%9C%A8%E4%BC%8A%E6%9C%97%E9%95%BF%E5%A4%A7/"},{"title":"房子基础装修好了","text":"基础装修：水电木瓦油，也就是房屋水电，吊顶，墙地砖，腻子刷漆 下来是等成品，柜子安装 期待完工的那一天","link":"/2022/07/29/%E6%88%BF%E5%AD%90%E5%9F%BA%E7%A1%80%E8%A3%85%E4%BF%AE%E5%A5%BD%E4%BA%86/"},{"title":"投资往往是知易行难","text":"投资说起来简单，但是做起来确实不容易。最大的一个障碍就是如何做到知行合一。 在股市里，知易行难的原因是人们通常低估了赚钱和亏钱时候的心理波动。上涨赚钱的时候高歌猛进，觉得未来一定是涨涨涨，也更加容易发现所谓的利多，所以也容易高位加仓，一把亏光；下跌亏钱的时候，觉得未来前景黯淡，周围也全是利空，所以也容易低位割肉，割完就涨。 而且纵然是你有投资策略，也可能架不住这种心理波动，感觉就像是有个杠杆极度的放大了这个波动，所以很容易出现情绪性的梭哈买入和恐慌割肉。 从另一个角度来看，股市是反人性的，在大家情绪热烈的时候，就需要开始减仓了，在大家情绪低迷的时候，就需要开始加仓了。如果天生可以理性的做到这一点，那么活该你赚钱。但是大部分人都是普通人，都做不到，你可能现在想这么简单，怎么可能做不到，但是事实是，在你真正实盘的时候，在盈亏都是实际的钱的时候，面临这些情况的时候可能真的是做不到的。 所以需要投资策略，还需要对投资策略的信仰。 此外，浸淫在股市这个欲望场里，诱惑很多，欲望也很多，所以另一个很重要的是自己的定力，如何能看到诱惑还能坚持自己的策略，也是一个很值得修炼的品质。","link":"/2022/07/29/%E6%8A%95%E8%B5%84%E5%BE%80%E5%BE%80%E6%98%AF%E7%9F%A5%E6%98%93%E8%A1%8C%E9%9A%BE/"},{"title":"斯通纳","text":"这段时间读完了一本书——《斯通纳》，这本书是之前看完《我脑袋里的怪东西》后，在豆瓣上看书评时候发现的。感谢豆瓣，一个让你能发现更多有意思东西的地方，很多书电影都是在通过豆瓣发现的。 《我脑袋里的怪东西》这本书看完后让人有一种力量，一种可以直面惨淡人生的力量，有时候读着读着，就放佛自己就是主人公麦夫鲁特，自己在经历那些生活的坎坷，但是从不放弃。“在这个世界上，我最爱拉伊哈”——麦夫鲁特和拉伊哈的爱情，婚姻也让人觉得感动，幸运的是，在这个世界上，我也有最爱的人。 我喜欢阅读，是因为从中你可以汲取力量，从中可以感受到生命力，感受到别人的世界，感受到那些平凡的伟大，给人前进的动力。 《斯通纳》就是这样一本书，走到斯通纳的世界里，你会觉得一切都是那么平凡且不如意，但是你会感受到斯通纳的坚持，他在平凡里的坚持。 斯通纳自一堂选修文学课为起点， 他的一生就此悄然改变。未来的斯通纳成为了一名大学老师，结婚、生子、教学、退休、衰老、死亡。在他生命的尽头，或许他可以坦然面对这个问题：你的一生，还要期望别的什么吗？ 的确，这就是平凡的生活，但是能从中汲取到面对平凡可能又失意的生活时的力量。 你还期望什么呢？ P.S. 这本书的翻译有点差","link":"/2021/07/26/%E6%96%AF%E9%80%9A%E7%BA%B3/"},{"title":"有些东西真是违反直觉，实践方能出真知","text":"虽然这个道理很早就知道了，但是知道一个道理远不如你真正遇到的时候震撼 去年年初的时候搞了一套股票交易的趋势系统，截至到现在，这套系统有一些参数需要设定 而这些参数的设定一直都是我脑子里臆想出来的，并没有实际验证过 这次是我前天吃晚饭的时候，突然想到既然现在该有的数据都有，那为什么不去写份代码验证一下呢？ 所以花了一晚上写了一份回测代码，其实也不多，也就100行，不过组织测试数据比较麻烦，因为也有一年的数据了 搞定这些之后，开始运行，然后很快就发现我目前的参数设置和不设置基本没有区别，这让我有点吃惊，于是赶紧修改代码，准备把各种情况测试一下，找一下最优解是什么 跑完之后，我惊讶的下巴都要掉了，以前我觉得不可能赚到钱的参数组合，却在程序中得到的几乎就是最优解，而且广泛适合各种情况，甚至在12月到1月的这波快速下跌中还能挣到钱 我有点恍惚了，我以为是代码写错了，所以一遍一遍的逐句调试，发现它就是实际情况，它就是事实 我不禁感叹到：有些东西真是违反直觉，实践方能出真知！ 那个晚上，我半夜就醒了，心想既然睡不着了，那干脆起来把整个过程完整详细的过一遍，确定一下将来使用的最优参数组合。从凌晨4点多，一直搞到早上8点，我憋出了一篇类似毕业论文一样的文章，详细的记录了我是如何做参数选择的，有图有数据，可谓有理有据 终于，我要找的真相，我要找的东西就在这样的实践中找到了，要是我一直保持我的固有思想，只是用拍脑袋去做决定，一直不去用实践检验，那我可能永远都只能在真相附近兜兜转转了","link":"/2022/01/15/%E6%9C%89%E4%BA%9B%E4%B8%9C%E8%A5%BF%E7%9C%9F%E6%98%AF%E8%BF%9D%E5%8F%8D%E7%9B%B4%E8%A7%89%EF%BC%8C%E5%AE%9E%E8%B7%B5%E6%96%B9%E8%83%BD%E5%87%BA%E7%9C%9F%E7%9F%A5/"},{"title":"正念冥想","text":"最近看到一个关于冥想有意思的观点，让我有一种茅塞顿开的感觉。 众所周知，冥想一般都是打坐，然后集中注意力到我们自己的呼吸上，摒弃其他无关的想法，由此来帮助我们提升专注力。 但是想达到这样的条件似乎不太容易，比如家里没有安静的地方，没有充分的整块时间，可能一会有这个干扰，一会有那个干扰，让人很难集中注意力来做冥想。 但是这位up主提出了一个观点就是，所谓冥想，不一定就一定是要静坐二三十分钟，然后集中注意力到自己的呼吸上。在做任何事情都可以开始“冥想”，正所谓专注于当下，也就是专注于当下你正在做的事情上就足够了，比如： 你在路上走路的时候，就专注于走路本身，感受脚和土地接触的力量，感受自己的呼吸和心跳，感受自己出汗的过程，感受空气的流动和变化，排斥掉其他无关想法，这就是一种冥想。 你在做家务的时候，专注于家务本身。 你在倾听别人说话的时候，专注于别人说的话。 也就是说，在做任何一件事情的时候，专注于这件事情本身。 像古代的大僧大儒，为何喜欢扫地，为何喜欢园艺，他们其实就是通过这些事情来提升自己的专注力。 所以不一定非得形式化的静坐二三十分钟进行冥想，随时随地都可以“冥想”，因为我们的目的只是为了提升专注力，而不是冥想这一个形式。 P.S. 视频链接：没时间没条件冥想？都市忙人提升专注力必看","link":"/2022/03/14/%E6%AD%A3%E5%BF%B5%E5%86%A5%E6%83%B3/"},{"title":"用cookiecutter来创建一个自己的代码模板","text":"最近工作上要新建一个项目，又要搬运一些重复代码，这件事情想想都让人有点sick，于是想到搞一个代码模板多好，以后新建项目直接把相关信息一填，直接生成出新的项目，所以想到了cookiecutter。 cookiecutter以前很早就用过了，比如cookiecutter-tornado，cookiecutter-flask 用这些模板生成出来的项目你就会感觉到什么叫做最佳范式，想必大家都读过最佳实践之类的书或者文章吧，这种最佳实践的确会让人感觉很舒服。 Github上其实有很多模板项目，比如上面的tornado，flask，最新的fastapi也有，但是这些都不太满足我的需求，因为我们公司有很多自己定制化的代码，而且我们是前后端分离的，项目也不需要那些前端模板项目。 因此是时候搞一个自己的模板项目了，其实搞一个模板项目很简单，只是个体力劳动。 cookiecutter其实就是利用模板渲染，把需要替换的字符串写成jinja2的形式：{{ project }}，然后cookiecutter执行的时候就是把你在cookiecutter.json预定义的变量在代码里替换一下。非常简单是不是？ 首先随便在Github上找一个现成的模板项目：full-stack-fastapi-postgresql 把这个里面除了{{cookiecutter.project_slug}}目录，都拷贝到你自己的项目里 然后开始修改里面的cookiecutter.json，这里面的变量需要的可以保留，不需要的删掉即可，也可以新加上自己需要的。 然后就是从一个已有的项目把代码复制到{{cookiecutter.project_slug}}目录里，复制完成之后就开始最累人的部分，将在cookiecutter.json定义的变量替换到代码对应地方，比如这样： 123456789import hashlibimport uuidimport peeweefrom fastapi_permissions import Allowfrom playhouse.postgres_ext import BinaryJSONFieldfrom {{ cookiecutter.project_slug }}.common.enums import Rolefrom {{ cookiecutter.project_slug }}.models import BaseModel 所有需要变量替换的地方都写成{{ variable }}的形式，替换完成之后，利用模板生成一个项目，看是否有问题，直到修改的没有问题，大功告成。","link":"/2022/07/29/%E7%94%A8cookiecutter%E6%9D%A5%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"},{"title":"能否武统","text":"不管今晚怎样，反正白天先吃了一记闷棍——亏损2% 😨 目前看到各路消息，似乎一副马上开战的样子 但是我觉得吧，打应该打不起来，那么就有两个分支： 佩洛西不敢去台湾，那双方都当无事发生，不过这也说明美国影响力在下降，但是最开始美国没说要访问台湾，只是台湾媒体渲染起来的，那最终输家就是台湾。 佩洛西前往台湾，我国战机伴飞，飞跃台湾本土，这是另一个突破，输家也在台湾。 总之，我们都是赢了。 那么明天能不能阳包阴，来个大涨！","link":"/2022/08/02/%E8%83%BD%E5%90%A6%E6%AD%A6%E7%BB%9F/"},{"title":"赚钱模式","text":"昨晚上跟我媳妇讨论了一下这个问题，感觉挺有趣的，所以记录一下。 首先我们赚钱模式归因为三个变量，时间，赚钱次数，钱的规模。 所谓时间，很好理解，就是你为了赚这个钱自己实际付出的时间。 赚钱次数，就是你花这一份时间能赚多少次钱，比如打工的人一份时间就只能赚一份钱，而写书的一份时间创作一次就能赚多份钱 钱的规模，打工人或者是写书的赚钱规模都是固定的，因为工资是固定的，每本书的价格也是固定的，虽然随着时间都会增长，但是幅度相比起来其实很小，所以可以忽略掉。而对于做投资的这种，钱的规模变大的速率会更高。 由此我们总结了大概五种赚钱模式，以下一一列举 一份时间一份钱的零售模式 时间: 1 赚钱次数: 0~1 钱的规模: 1 这种是最基础的，也是最赚不到钱的赚钱模式。 你花了一份时间，只能赚到一份钱，而这份时间的出卖是没有保证的。类比于实际，就是打零工，你的这份时间只能按一段一段的去零售，有人买你才有钱赚，没人买你就没钱赚，饱了这顿没了下顿。 所以这种模式累积钱的速度是非常慢的，因为不仅单位时间的钱比较少，而且单位时间也可能是无效的，积累不到任何钱。 一份时间一份钱的批发模式 时间: 1 赚钱次数: 1 钱的规模: 1 这种模式是对应于大部分普通打工人的赚钱模式。 不同于上面的零售模式，批发模式相当于你把时间批发卖给了公司，老板，然后公司按照月来给你发工资，这不就相当于把时间打包批发卖出去了。 这种模式相对于零售模式就是避免了无效时间的产生，你的每一段时间都会创造价值，只不过一份时间还是只对应一份钱。相比于零售模式，积累钱的速度有了明显提升。 一份时间多份钱 时间: 1 赚钱次数: n 钱的规模: 1","link":"/2022/02/10/%E8%B5%9A%E9%92%B1%E6%A8%A1%E5%BC%8F/"},{"title":"趋势梭哈系统2022年2月战报","text":"本月是趋势梭哈系统2.0版本实盘试运行的第二个月，目前来看效果不错，跟策略预计的差不多： 本月实盘收益率3.08%，策略预计收益率3.73% 因为2月份只有3个周，所以比平常的月份收益率会低一点 今年累计收益率-4.68% 3月份有5个周，所以3月份实现2022年扭亏为盈应该问题不大 目前趋势梭哈系统已经升级到2.4版本了，现在基本上是稳定版，然后操作流程也趋于稳定————每天就是等信号买入，等信号卖出，无需自己看盘，省心省力。 当然策略的进一步优化升级，以及其他的一些想法都会去实现验证 继续加油吧～","link":"/2022/02/28/%E8%B6%8B%E5%8A%BF%E6%A2%AD%E5%93%88%E7%B3%BB%E7%BB%9F2022%E5%B9%B42%E6%9C%88%E6%88%98%E6%8A%A5/"},{"title":"趋势梭哈系统2022年1月战报","text":"本月是趋势梭哈系统2.0版本实盘试运行的第一个月，但是市场真是太糟糕了，见下图： 这让我想起来去年2月18日的时候，趋势梭哈系统1.0版本刚刚正式上线的时候，从那之后的几个星期也是跌成狗，那段时间实盘亏了快6%，真是非常难受。 没想到这次2.0系统试运行阶段行情就这么惨，而且这次论收益率，甚至比去年的时候跌的还多，本月回撤了7.52%。。。 但是这些亏损中，所有都来源于自己之前躺平的那些仓位，可以看到本月收益率曲线是跑赢创业板指数5%的 为什么能跑赢，就是本月用仅有的流动资金试运行趋势梭哈系统，所带来的收益，减少了一点亏损。 下图为本月趋势梭哈系统2.0版本的收益曲线图，收益3.12% 目前账户已经把之前躺平的割掉了，虽然有点心痛…… 所以下个月也就是年后正式开始实盘跟踪趋势梭哈系统2.0版本的策略～ P.S. 以后每个月更新一次实盘跟踪情况，写一点总结，针对这个月的情况调整下个月的行动。","link":"/2022/01/29/%E8%B6%8B%E5%8A%BF%E6%A2%AD%E5%93%88%E7%B3%BB%E7%BB%9F2022%E5%B9%B41%E6%9C%88%E6%88%98%E6%8A%A5/"},{"title":"趋势梭哈系统2022年3月战报","text":"转眼间2022年四分之一已经过去了，但是2022年还没有扭亏为盈。 不过在3月这种极端行情下，还能保持正收益，并且跑赢指数快10个点，已经非常不错了。 今年累计收益率-0.96% 3月份没有如愿实现扭亏为盈，不过也快了，不出意外，4月份应该就可以实现了。 最近一直在构建自己的FIRE框架 首先是要有足够的存款，其带来的利息能够，保证自己正常生活。按照自己的生活水平，如果排除掉贷款，房租，车位的花费，不出去旅行，正常生活下一个月差不多是4K的花费，如果按照年收益率3%来算，那么就至少需要160W的存款。 剩下的部分就是可以在股市上尝试获取一些超额收益，目前来看我的交易系统可以每月稳定提供3%-4%的收益率，那么其实我只需要25W的本金，就可以获取到1W元的月收益。 如果能达到这两点，那么真的可以找一个小地方躺平了。 但是现在实际情况呢，房子还有房贷，也还没有装修好，还有房租，车位也是租的，这是额外的支出项。然后存款也不够，股市本金也不够，当然交易系统也没有经过长时间的验证，每月稳定提供3%-4%的收益率也不是那么肯定。 所以，所以，现在还是得搬砖，不过还是要想一想，往前走一走。 FIRE也许就这样慢慢实现了。","link":"/2022/04/01/%E8%B6%8B%E5%8A%BF%E6%A2%AD%E5%93%88%E7%B3%BB%E7%BB%9F2022%E5%B9%B43%E6%9C%88%E6%88%98%E6%8A%A5/"},{"title":"pip 最佳使用方法","text":"在激活的虚拟环境中使用 pip install 或者 python -m pip install 效果是完全相同的，但是有些场景下就有问题了，而 python -m pip 确保了想要安装的包会和当前解释器是一个环境。 可以设置个别名接着用： 1❯ echo 'alias pip=&quot;python -m pip&quot;' &gt;&gt; ~/.aliasrc","link":"/2022/08/05/pip-%E6%9C%80%E4%BD%B3%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"},{"title":"投资切记不要贪婪","text":"曾经的贪婪以我自身来说，很早就定下来了决定要一以贯之的投资策略，但是中间随着时间的发展，来自人天生的原始力量——贪婪，针对这最初的投资策略，做了好几次优化。 但是结果呢，每次优化每次坑，最终还是回到了之前的投资策略上，这中间的资金成本，时间成本，没法算了。 第一次，想能多上几次车，修改了策略的上车和下车条件。巧的是，修改之后第一次执行就遇到亏损情况，这次影响最为深远，亏损幅度也是最大。 第二次，想着能快速的盈利，将不要买股票这条原则忘的一干二净，买了不少股票，而且还是地产银行相关的，随后的事情——保交楼事件，让银行地产相关的股票大幅下挫，但是还好动用的仓位不多，这次亏损幅度较小。 第三次，再一次的修改了策略的上车，下车条件，按道理这次改变其实不算很大，但是恰巧的是，刚一改就遇到不相容的情况，造成了损失，亏损幅度也较小。 综上，三次都是为了多挣点钱，不满足于既定策略的收益情况，做了一些贪婪的决策，最终导致了亏钱，亏时间的事情发生。 这三次比较巧的事情是，每次都是刚修改完，立马就会步入坑中，其实这三个修改，也是多多少少做了些回测的，但是很奇怪，每次修改完，不相容的情况立马就会出现，立马就会造成亏损。 还好的是，每次跳坑之后，切换到原始策略上，很快就又都能回血，但是失去的时间已经一去不复返了。 还有一种贪婪就是不按策略既定的止盈条件来操作，自己觉得还要涨，所以就不卖了，导致本来还能盈利的，后来给亏损了。这种情况的贪婪伤害幅度虽然不大，但是侮辱性极强，很气人。 总结首先如果真的要做优化，最好还是： 第一，使用模拟盘或者小仓位去测试 第二，要经历一个跨度比较长的时间 第三，要严格做出回测 否则，脑袋一拍，就动用大仓位去试错，后果可想而知。 其次严格按策略的止盈止损来操作，既然已经有策略，不按策略来，反而去拍脑袋决策，孰优孰劣可想而知。 最后投资要记的一点：慢就是快，能不断的滚雪球，就是最好的方式。切记不要贪婪","link":"/2022/08/06/%E6%8A%95%E8%B5%84%E5%88%87%E8%AE%B0%E4%B8%8D%E8%A6%81%E8%B4%AA%E5%A9%AA/"},{"title":"构建你的投资体系","text":"作为一个普通人，最开始的时候需要通过工作不断的积累本金，应付结婚买房生子等等诸多事情，而这些事情都是相当耗费钱的。一旦度过这些所谓的“坎”，工作上也有了不断进步，收入逐渐提高，财富也慢慢的积累起来的时候，就是时候考虑如何用这些积累的财富去创造价值了。 使用资本去创造额外价值就是一种投资，但是投资是有巨大风险的，在没有清楚认识到这些风险之前，不要投资！你要做的就是构建属于你的投资体系！ 这篇文章我先介绍一下自己的投资体系，至于我是怎么一步一步的构建出来的，以后再说。 建立在股票基金上投资体系这件事情范围很大，涉及整个家庭的资金分配，最为人熟知的就是，标准普尔家庭资产象限图 我这里指的是狭义上的投资体系：股票基金这种高风险投资标的上建立的投资体系 基本原则首先我的投资体系里有几个原则： 不买股票，只买基金。其实对于我来说，我的投资体系是建立在基金上的。 建立自己的交易系统并且坚定执行。 体系结构我的投资体系分为 趋势梭哈 和 长期持有 两个部分，但是这两个部分共同点是基于一套交易系统。 这个交易系统是我花了一年时间打造的量化决策交易系统。 趋势梭哈趋势梭哈部分的主要理念就是利用交易系统的信号进行高抛低吸 分为 梭哈标的 和 打野标的 梭哈标的目前就是创业板相关基金，创成长，创业板50，双创，在买入的时候全仓买入。 打野标的就是其他一些宽基和行业基金：上证50，红利，深红利，科创50，能源，新能车，银行，农业，军工，旅游，有色金属。买入的时候只买20%比例。 如何做呢？就是在交易系统提示弱转强的时候买入，在提示强转弱的时候卖出，或者是根据交易系统的止盈条件进行卖出。 长期持有长期持有部分就是长期持有一部分宽基，在低位加仓，在高位减仓，其实总体上就是一个大波段的高抛低吸。 目前持有标的：上证50，红利，深红利，创成长 另外长期持有的一个目标就是积累足够的份额，足够的利润垫，每年赚取分红，红利ETF的分红大概在3%-5%之间，还是可以的。 总结我的投资体系大概就是如此，不必盯盘，因为有量化交易系统。不必焦虑，因为有投资体系。靠时间的力量，慢慢积累。","link":"/2022/08/08/%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84%E6%8A%95%E8%B5%84%E4%BD%93%E7%B3%BB/"},{"title":"构建基于 Python 的单元测试","text":"这篇文章记录了如何基于 Python 构建一个 Web 系统的单元测试，涉及一些基本和高级用法。 测试分类 单元测试：单个模块的测试 集成测试：多个模块的测试 功能测试：项目的功能测试 其实就是范围不同，单元测试仅是系统特定一部分的测试，功能测试是将系统作为整体进行测试，集成测试介于两者之间。 单元测试库最常用的是 unittest 和 pytest 继承 unittest 的 TestCase 类来组织单元测试 assert 语句用来检测是否符合预期，而 pytest 提供了一些更强大的 assert 方法 pytest 用来运行测试，它可以使用加强版的 assert，并且它完全支持 unittest 一个简单的单元测试123456789import unittestfrom fizzbuzz import fizzbuzzclass TestFizzBuzz(unittest.TestCase): def test_fizz(self): for i in [3, 6, 9, 18]: print('testing', i) assert fizzbuzz(i) == 'Fizz' 运行： 123456789(venv) $ pytest========================== test session starts ===========================platform darwin -- Python 3.8.6, pytest-6.1.2, py-1.9.0, pluggy-0.13.1rootdir: /Users/miguel/testingcollected 1 itemstest_fizzbuzz.py . [100%]=========================== 1 passed in 0.03s ============================ pytest命令比较智能，它会自动识别单元测试，它假定以这样的名字：test_[something].py 或者 [something]_test.py 命名的模块都包含单元测试。同时它也会搜索子目录。 一般来说，单元测试统一放到 tests 目录下，和应用目录隔离开。 测试覆盖率安装：pip install pytest-cov 运行 pytest --cov=fizzbuzz，可以针对 fizzbuzz 模块运行单元测试以及覆盖率 123456789101112131415161718(venv) $ pytest --cov=fizzbuzz========================== test session starts ===========================platform darwin -- Python 3.8.6, pytest-6.2.2, py-1.10.0, pluggy-0.13.1rootdir: /Users/miguel/testingplugins: cov-2.11.1collected 3 itemstest_fizzbuzz.py ... [100%]---------- coverage: platform darwin, python 3.8.6-final-0 -----------Name Stmts Miss Cover---------------------------------fizzbuzz.py 13 4 69%---------------------------------TOTAL 13 4 69%=========================== 3 passed in 0.07s ============================ 还有以下参数： --cov-branch 针对分支处理，有多少个分支就统计多少次 --cov-report=term-missing 表示以何种方式展示报告，term-missing表示在terminal上展示，并且会额外加上缺少测试覆盖的代码行数，另外一个常用选项是html 在html上展示报告，很清晰，常用。 可以添加注释 pragma: no cover 来跳过该块代码的覆盖率检测 测试参数化使用库 parameterized： pip install parameterized 12345678910111213141516from parameterized import parameterized# ...class TestLife(unittest.TestCase): # ... @parameterized.expand([('pattern1.txt',), ('pattern2.txt',)]) def test_load(self, pattern): life = Life() life.load(pattern) assert life.survival == [2, 3] assert life.birth == [3] assert set(life.living_cells()) == { (10, 10), (11, 11), (15, 10), (17, 10)} assert life.bounding_box() == (10, 10, 17, 11) 也可以使用列表推导式： 12345class TestLife(unittest.TestCase): # ... @parameterized.expand([(n,) for n in range(9)]) def test_advance_cell(self, num_neighbors): 支持多参数： 1234567import itertoolsclass TestLife(unittest.TestCase): # ... @parameterized.expand(itertools.product([True, False], range(9))) def test_advance_cell(self, alive, num_neighbors): 测试异常1234567891011import pytest# ...class TestLife(unittest.TestCase): # ... def test_load_invalid(self): life = Life() with pytest.raises(RuntimeError): life.load('pattern4.txt') Mockingmocking 就是劫持函数或者功能，可以控制返回值或者其他东西的一种功能。在测试中如果对某个函数已经有了详尽的测试，那么在这个函数被调用的地方，就可以用mocking功能，节约资源。 unittest 里的 mock 模块，可以使用 mock.patch_object() 来替换函数或者方法 123456789from unittest import mockclass TestLife(unittest.TestCase): # ... @mock.patch.object(Life, '_advance_cell') def test_advance_false(self, mock_advance_cell): mock_advance_cell.return_value = False # ... 测试 Web 应用最好将测试归集到一个继承 unittest.TestCase 的类里，这样可以公用 setUp 和 tearDown 方法，会有更好的性能，以及更方便。 WSGI 和 ASGI 都有特定的规则用于服务器如何传递到应用的请求。所以我们可以注入假的请求到应用上来模拟，而不用启动真正的服务器。这些 Web 框架都有所谓的测试客户端（test clients）来帮助实现单元测试，不需要任何网络，会向应用传递假的请求。如果 Web 框架没有提供的话，WSGI 应用可以使用 Werkzeug 库，ASGI 应用可以使用 async-asgi-testclient。 比如，Flask 框架可以直接使用自带的 test client: 1234567891011121314class TestWebApp(unittest.TestCase): def setUp(self): self.app = create_app() self.appctx = self.app.app_context() self.appctx.push() db.create_all() self.client = self.app.test_client() def tearDown(self): db.drop_all() self.appctx.pop() self.app = None self.appctx = None self.client = None Tornado 框架可以继承 HTTPTestCase or AsyncHTTPTestCase 类来实现，其中它自带了 HTTPClient 和 AsyncHTTPClient，可以直接使用： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475class BaseTestCase(AsyncHTTPTestCase): def setUp(self): super(BaseTestCase, self).setUp() self.db_session = test_session self.db_session.commit() self.cookie = SimpleCookie() def get_app(self): test_app = Application() return test_app def get_new_ioloop(self): return IOLoop.current() def get_url(self, path): full_path = super(BaseTestCase, self).get_url('/api/v1{}'.format(path)) return full_path def _update_cookies(self, headers): try: cookies = escape.native_str(headers['Set-Cookie']) self.cookie.update(SimpleCookie(cookies)) except KeyError: return def make_response(self, req, resp): response = Response() response.status_code = getattr(resp, 'code', None) response.headers = {k: v for k, v in list(resp.headers.items())} response.encoding = get_encoding_from_headers(response.headers) response.raw = resp response.reason = response.raw.reason response._content = resp.body if isinstance(req.url, bytes): response.url = req.url.decode('utf-8') else: response.url = req.url extract_cookies_to_jar(response.cookies, req, resp) response.request = req return response def send(self, url, method='GET', data=None, json_data=None, files=None, headers=None, **kwargs): if 'follow_redirects' not in kwargs: kwargs['follow_redirects'] = False request = Request(url=self.get_url(url), files=files, data=data, json=json_data) request_data = request.prepare() if headers is None: headers = {} headers.update(request_data.headers) cookie_sting = '; '.join([f'{key}={morsel.value}' for key, morsel in self.cookie.items()]) if cookie_sting != '': headers.update({'Cookie': cookie_sting}) resp = self.fetch(url, method=method, headers=headers, body=request_data.body, allow_nonstandard_methods=True, **kwargs) self._update_cookies(resp.headers) response = self.make_response(request, resp) self.db_session.rollback() return response def get(self, url, **kwargs): response = self.send(url, method='GET', **kwargs) return response def patch(self, url, files=None, data=None, json_data=None): response = self.send(url, method='PATCH', files=files, data=data, json_data=json_data) return response def post(self, url, files=None, data=None, json_data=None, **kwargs): response = self.send(url, method='POST', files=files, data=data, json_data=json_data, **kwargs) return response def put(self, url, files=None, data=None, json_data=None): response = self.send(url, method='PUT', files=files, data=data, json_data=json_data) return response 测试 html 内容没必要全部 match 去做测试，而是可以检查一部分内容是否存在，比如提交按钮是否存在于 html 中，而忽略其顺序等无关信息。 1234567891011def test_registration_form(self): response = self.client.get('/auth/register') assert response.status_code == 200 html = response.get_data(as_text=True) # make sure all the fields are included assert 'name=&quot;username&quot;' in html assert 'name=&quot;email&quot;' in html assert 'name=&quot;password&quot;' in html assert 'name=&quot;password2&quot;' in html assert 'name=&quot;submit&quot;' in html 这样的方式也适合于其他数据量比较大的测试，只需要测试关键部分即可。 提交表单主要问题在于 CSRF token 怎么处理，可以先发一个 GET 请求，然后拿到 token，再去提交表单，这是一种方法。另一种方法就是在测试中禁掉 CSRF 的保护。 1234567def setUp(self): self.app = create_app() self.app.config['WTF_CSRF_ENABLED'] = False # no CSRF during tests self.appctx = self.app.app_context() self.appctx.push() db.create_all() self.client = self.app.test_client() 测试表单验证根据表单验证失败返回的语句进行判断 12345678910def test_register_user_mismatched_passwords(self): response = self.client.post('/auth/register', data={ 'username': 'alice', 'email': 'alice@example.com', 'password': 'foo', 'password2': 'bar', }) assert response.status_code == 200 html = response.get_data(as_text=True) assert 'Field must be equal to password.' in html 测试需要登陆验证的页面有以下几点： setUp 方法初始化用户 login 方法 完成对应测试 Example: 123456789101112131415161718192021222324252627282930313233343536373839# ...import reclass TestWebApp(unittest.TestCase): # ... def setUp(self): self.app = create_app() self.app.config['WTF_CSRF_ENABLED'] = False # no CSRF during tests self.appctx = self.app.app_context() self.appctx.push() db.create_all() self.populate_db() self.client = self.app.test_client() def populate_db(self): user = User(username='susan', email='susan@example.com') user.set_password('foo') db.session.add(user) db.session.commit() def login(self): self.client.post('/auth/login', data={ 'username': 'susan', 'password': 'foo', }) def test_write_post(self): self.login() response = self.client.post('/', data={'post': 'Hello, world!'}, follow_redirects=True) assert response.status_code == 200 html = response.get_data(as_text=True) assert 'Your post is now live!' in html assert 'Hello, world!' in html assert re.search(r'&lt;span class=&quot;user_popup&quot;&gt;\\s*' r'&lt;a href=&quot;/user/susan&quot;&gt;\\s*' r'susan\\s*&lt;/a&gt;\\s*&lt;/span&gt;\\s*said', html) is not None 测试 API 服务器比较简单，因为 API 接口第一涉及范围小，第二返回基本上都是 JSON，容易解析。 123456789101112def test_api_register_user(self): response = self.client.post('/api/users', json={ 'username': 'bob', 'email': 'bob@example.com', 'password': 'bar' }) assert response.status_code == 201 # make sure the user is in the database user = User.query.filter_by(username='bob').first() assert user is not None assert user.email == 'bob@example.com' 参考 How to Write Unit Tests in Python, Part 1: Fizz Buzz How to Write Unit Tests in Python, Part 2: Game of Life How to Write Unit Tests in Python, Part 3: Web Applications","link":"/2022/08/10/%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8E-Python-%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"投资思考","slug":"投资思考","link":"/tags/%E6%8A%95%E8%B5%84%E6%80%9D%E8%80%83/"},{"name":"读书","slug":"读书","link":"/tags/%E8%AF%BB%E4%B9%A6/"},{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"switch","slug":"switch","link":"/tags/switch/"},{"name":"健身","slug":"健身","link":"/tags/%E5%81%A5%E8%BA%AB/"},{"name":"经济","slug":"经济","link":"/tags/%E7%BB%8F%E6%B5%8E/"},{"name":"世界","slug":"世界","link":"/tags/%E4%B8%96%E7%95%8C/"},{"name":"危机","slug":"危机","link":"/tags/%E5%8D%B1%E6%9C%BA/"},{"name":"WebSocket","slug":"WebSocket","link":"/tags/WebSocket/"},{"name":"Tornado","slug":"Tornado","link":"/tags/Tornado/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"趋势梭哈","slug":"趋势梭哈","link":"/tags/%E8%B6%8B%E5%8A%BF%E6%A2%AD%E5%93%88/"},{"name":"casdoor","slug":"casdoor","link":"/tags/casdoor/"},{"name":"sso","slug":"sso","link":"/tags/sso/"},{"name":"冥想","slug":"冥想","link":"/tags/%E5%86%A5%E6%83%B3/"},{"name":"cookiecutter","slug":"cookiecutter","link":"/tags/cookiecutter/"},{"name":"投资","slug":"投资","link":"/tags/%E6%8A%95%E8%B5%84/"},{"name":"趋势梭哈每月战报","slug":"趋势梭哈每月战报","link":"/tags/%E8%B6%8B%E5%8A%BF%E6%A2%AD%E5%93%88%E6%AF%8F%E6%9C%88%E6%88%98%E6%8A%A5/"},{"name":"pip","slug":"pip","link":"/tags/pip/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"交易系统","slug":"交易系统","link":"/tags/%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F/"},{"name":"unittest","slug":"unittest","link":"/tags/unittest/"},{"name":"pytest","slug":"pytest","link":"/tags/pytest/"}],"categories":[{"name":"每月总结","slug":"每月总结","link":"/categories/%E6%AF%8F%E6%9C%88%E6%80%BB%E7%BB%93/"},{"name":"运动","slug":"运动","link":"/categories/%E8%BF%90%E5%8A%A8/"},{"name":"生活","slug":"生活","link":"/categories/%E7%94%9F%E6%B4%BB/"},{"name":"程序员","slug":"程序员","link":"/categories/%E7%A8%8B%E5%BA%8F%E5%91%98/"},{"name":"投资","slug":"投资","link":"/categories/%E6%8A%95%E8%B5%84/"},{"name":"读书","slug":"读书","link":"/categories/%E8%AF%BB%E4%B9%A6/"},{"name":"杂谈","slug":"生活/杂谈","link":"/categories/%E7%94%9F%E6%B4%BB/%E6%9D%82%E8%B0%88/"},{"name":"碎碎念","slug":"碎碎念","link":"/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"},{"name":"冥想","slug":"冥想","link":"/categories/%E5%86%A5%E6%83%B3/"},{"name":"趋势梭哈","slug":"投资/趋势梭哈","link":"/categories/%E6%8A%95%E8%B5%84/%E8%B6%8B%E5%8A%BF%E6%A2%AD%E5%93%88/"}],"pages":[{"title":"关于我","text":"妄想财富自由，然后去干想干的事情","link":"/about/index.html"}]}